<?xml version="1.0" encoding="UTF-8"?>
<model:MDescriptors xmlns:model="http://www.silabs.com/ss/Studio.ecore">
  <descriptors label="STK3600_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/blink/SimplicityStudio/STK3600_blink.slsproj,../app/mcu_example/EFM32LG_STK3600/blink/arm/blink.uvprojx,../app/mcu_example/EFM32LG_STK3600/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="STK3600_burtc" description="&lt;h1&gt;&lt;b&gt;Backup power domain RTC example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate use of the backup power domain and the&#xD;&#xA;backup real time clock (BURTC).&#xD;&#xA;&#xD;&#xA;Start the example with the Power Source Selector switch in the &quot;DBG&quot; position.&#xD;&#xA;When the clock is running you can adjust time by pressing pushbuttons&#xD;&#xA;PB0 and PB1.&#xD;&#xA;When you move the Power Source Selector switch to the &quot;USB&quot; position, the&#xD;&#xA;EFM is turned off and the BURTC peripheral runs on power from the BU capacitor.&#xD;&#xA;(See User manual for EFM32LG-STK3600 starter kit for details on the hardware).&#xD;&#xA;When you move the Power Source Selector switch back to the &quot;DBG&quot; position, you&#xD;&#xA;can verify that time has been recorded correctly.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/burtc/SimplicityStudio/STK3600_burtc.slsproj,../app/mcu_example/EFM32LG_STK3600/burtc/arm/burtc.uvprojx,../app/mcu_example/EFM32LG_STK3600/burtc/iar/burtc.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_clock" description="&lt;h1&gt;&lt;b&gt;Wall Clock example using the segment LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS  and demonstrates  the use of&#xD;&#xA;the LCD controller, RTC (real time counter), VCMP, GPIO and various&#xD;&#xA;Energy Modes (EM).&#xD;&#xA;&#xD;&#xA;The RTC is set up to wake the EFM32 from EM2 every minute. During this&#xD;&#xA;interval, the LCD is updated to reflect the current time. The animation&#xD;&#xA;feature is used to show the seconds. This is done by using the frame&#xD;&#xA;event counter to drive the animation feature every second.&#xD;&#xA;&#xD;&#xA;Time is set with pushbuttons PB0 and PB1.&#xD;&#xA; - Pushing PB0 increments minute count.&#xD;&#xA; - Pushing PB1 increments hour count.&#xD;&#xA;&#xD;&#xA;The VCMP is used to measure the input voltage on every wakeup. If the&#xD;&#xA;voltage drops too low, voltage boost is enabled on the LCD. This makes&#xD;&#xA;the LCD clear and readable even when running on low batteries.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/clock/SimplicityStudio/STK3600_clock.slsproj,../app/mcu_example/EFM32LG_STK3600/clock/arm/clock.uvprojx,../app/mcu_example/EFM32LG_STK3600/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/clock.c"/>
  </descriptors>
  <descriptors label="STK3600_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xD;&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xD;&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xD;&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xD;&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xD;&#xA; &#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit and CPT007B Evaluation Board&#xD;&#xA;Device: EFM32LG990F256&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/cpt007b/SimplicityStudio/STK3600_cpt007b_demo.slsproj,../app/mcu_example/EFM32LG_STK3600/cpt007b/arm/cpt007b_demo.uvprojx,../app/mcu_example/EFM32LG_STK3600/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="STK3600_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the capacitive sensing firmware library to sample&#xD;&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xD;&#xA;qualification status, and other state variables can be displayed and examined&#xD;&#xA;in the Capacitive Sensing Profiler tool.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/cslib/SimplicityStudio/STK3600_cslib.slsproj,../app/mcu_example/EFM32LG_STK3600/cslib/arm/cslib.uvprojx,../app/mcu_example/EFM32LG_STK3600/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with segment LCD example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LCD controller, RTC (real time counter), GPIO and&#xD;&#xA;various Energy Modes (EM) on the starter kit.&#xD;&#xA;&#xD;&#xA;EM2 is used for delays in between refreshing the LCD display, and a lot of&#xD;&#xA;&quot;eye candy&quot; are present to show off the MCU module's LCD display.&#xD;&#xA;&#xD;&#xA;The LCD controller drives the display down to EM2. In the demo, EM2 is used&#xD;&#xA;for &quot;most&quot; delays to show off this feature. The user can press PB0 or PB1 to&#xD;&#xA;activate EM3 and EM4. EM4 requires a system reset, while PB0 again will wake&#xD;&#xA;up the system  from Energy Mode 3.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32STG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/emlcd/SimplicityStudio/STK3600_emlcd.slsproj,../app/mcu_example/EFM32LG_STK3600/emlcd/arm/emlcd.uvprojx,../app/mcu_example/EFM32LG_STK3600/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="STK3600_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 EMLIB and demonstrates the use of&#xD;&#xA;the LCD controller, RTC (real time counter), GPIO and various Energy&#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;The user can press the push buttons PB0 and PB1 to select which energy&#xD;&#xA;mode to demonstrate.&#xD;&#xA;&#xD;&#xA;This demo application has been made to give a quick demo of the&#xD;&#xA;Energy Profiler from Silicon Labs and to reproduce the different &#xD;&#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/emode/SimplicityStudio/STK3600_emode.slsproj,../app/mcu_example/EFM32LG_STK3600/emode/arm/emode.uvprojx,../app/mcu_example/EFM32LG_STK3600/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of&#xD;&#xA;using FreeRTOS on a Silicon Labs MCU. The configuration uses the tickless mode&#xD;&#xA;of FreeRTOS in order to enter low energy mode when idle.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/freertos_blink/SimplicityStudio/STK3600_freertos_blink.slsproj,../app/mcu_example/EFM32LG_STK3600/freertos_blink/arm/freertos_blink.uvprojx,../app/mcu_example/EFM32LG_STK3600/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_gpiointerrupt" description="&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show&#xD;&#xA;how to handle multiple GPIO interrupts. Buttons pressing toggles LEDs.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/gpiointerrupt/SimplicityStudio/STK3600_gpiointerrupt.slsproj,../app/mcu_example/EFM32LG_STK3600/gpiointerrupt/arm/gpiointerrupt.uvprojx,../app/mcu_example/EFM32LG_STK3600/gpiointerrupt/iar/gpiointerrupt.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and EMLIB to demonstrate&#xD;&#xA;the usage of the internal temperature sensor on EFM32 Leopard Gecko&#xD;&#xA;devices.&#xD;&#xA;&#xD;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xD;&#xA;temperatures due to a sensor calibration bug.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/inttemp/SimplicityStudio/STK3600_inttemp.slsproj,../app/mcu_example/EFM32LG_STK3600/inttemp/arm/inttemp.uvprojx,../app/mcu_example/EFM32LG_STK3600/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="STK3600_lcd" description="&lt;h1&gt;&lt;b&gt;Segment LCD controller example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and EMLIB peripheral library and&#xD;&#xA;demonstrates the use of the segment LCD controller.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/lcd/SimplicityStudio/STK3600_lcd.slsproj,../app/mcu_example/EFM32LG_STK3600/lcd/arm/lcd.uvprojx,../app/mcu_example/EFM32LG_STK3600/lcd/iar/lcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lcd.c"/>
  </descriptors>
  <descriptors label="STK3600_lcsense" description="&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xD;&#xA;the LESENSE peripheral on the board.&#xD;&#xA;&#xD;&#xA;This demo has two different modes.&#xD;&#xA;To change between them, press PB1. In Mode0 (default). The LESENSE&#xD;&#xA;module will wake up whenever a metal object is passed above the LC&#xD;&#xA;sensor in the bottom right of the STK. In Mode 1, the EFM32 will only&#xD;&#xA;wake up every fifth time the metal object is passed over the sensor.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/lcsense/SimplicityStudio/STK3600_lcsense.slsproj,../app/mcu_example/EFM32LG_STK3600/lcsense/arm/lcsense.uvprojx,../app/mcu_example/EFM32LG_STK3600/lcsense/iar/lcsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lcsense.c"/>
  </descriptors>
  <descriptors label="STK3600_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project reads and sends the data back to terminal using LEUART&#xD;&#xA;while staying in EM2.&#xD;&#xA;&#xD;&#xA;It uses the EFM32 CMSIS and EMLIB, to demonstrate the&#xD;&#xA;use of LEUART communication using DMA under the EM2 on the &#xD;&#xA;EFM32LG_STK3600 Starter Kit.&#xD;&#xA;&#xD;&#xA;The LEUART is configured to be used with DMA under EM2.&#xD;&#xA;The terminal configuration is 9600-8-N-1.&#xD;&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xD;&#xA;&#xD;&#xA;Testing:&#xD;&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xD;&#xA;2. Pin Configuration:&#xD;&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xD;&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xD;&#xA;	2.3. Pin-1 Gnd&#xD;&#xA;&#xD;&#xA;3. Configure terminal to 9600-8-N-1.&#xD;&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xD;&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Starter Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/leuart/SimplicityStudio/STK3600_leuart.slsproj,../app/mcu_example/EFM32LG_STK3600/leuart/arm/leuart.uvprojx,../app/mcu_example/EFM32LG_STK3600/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_lightsense" description="&lt;h1&gt;&lt;b&gt;Lightsensor example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS&#xD;&#xA;and demonstrates the use of the LESENSE peripheral on the board.&#xD;&#xA;&#xD;&#xA;This demo has two different modes.&#xD;&#xA;To change between them, press PB0. In Mode0 (default). The LESENSE&#xD;&#xA;module will wake up whenever a &quot;dark&quot; event is detected by the light sensor&#xD;&#xA;below the &quot;EFM32&quot; sign on the right from the LCD on the STK. In Mode 1,&#xD;&#xA;EFM32 will only wake up on every fifth &quot;dark&quot; event.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/lightsense/SimplicityStudio/STK3600_lightsense.slsproj,../app/mcu_example/EFM32LG_STK3600/lightsense/arm/lightsense.uvprojx,../app/mcu_example/EFM32LG_STK3600/lightsense/iar/lightsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lightsense.c"/>
  </descriptors>
  <descriptors label="STK3600_mpu" description="&lt;h1&gt;&lt;b&gt;Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including STK BSP (board&#xD;&#xA;support package).&#xD;&#xA;&#xD;&#xA;It sets up the MPU to demonstrate usage of MPU to catch memory access&#xD;&#xA;violations. STK pushbuttons are used generate MPU faults.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/mpu/SimplicityStudio/STK3600_mpu.slsproj,../app/mcu_example/EFM32LG_STK3600/mpu/arm/mpu.uvprojx,../app/mcu_example/EFM32LG_STK3600/mpu/iar/mpu.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/mpu.c"/>
  </descriptors>
  <descriptors label="STK3600_nandflash" description="&lt;h1&gt;&lt;b&gt;Nandflash example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates use of the NANDFLASH driver.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the TTL-level serialport (115200-N-8-1). Here EXP port pin 1 &#xD;&#xA;is ground, EXP port pin 4 is transmitter and EXP port pin 6 is reciever.&#xD;&#xA;&#xD;&#xA;Operations on the flash are initiated by issuing commands on the terminal.&#xD;&#xA;Command &quot;h&quot; will print a help screen on the terminal :&#xD;&#xA;&#xD;&#xA;    Available commands:&#xD;&#xA;        fi         : Show NAND flash device information&#xD;&#xA;        h          : Show this help&#xD;&#xA;        rp n       : Read page n&#xD;&#xA;        bp n       : Blankcheck page n&#xD;&#xA;        bd         : Blankcheck entire device&#xD;&#xA;        bb         : Check bad-block info&#xD;&#xA;        mb n       : Mark block n as bad&#xD;&#xA;        wp n       : Write page n&#xD;&#xA;        eb n       : Erase block n&#xD;&#xA;        ecc n      : Check ECC algorithm, uses page n and n+1&#xD;&#xA;        cp m n     : Copy page m to page n&#xD;&#xA;&#xD;&#xA;Note that the nandflash device used on this kit has 32 pages per block, so&#xD;&#xA;pages 0-31 belongs to block 0.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/nandflash/SimplicityStudio/STK3600_nandflash.slsproj,../app/mcu_example/EFM32LG_STK3600/nandflash/arm/nandflash.uvprojx,../app/mcu_example/EFM32LG_STK3600/nandflash/iar/nandflash.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32LG990F256. When running this example, the Energy Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each&#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/powertest/SimplicityStudio/STK3600_powertest.slsproj,../app/mcu_example/EFM32LG_STK3600/powertest/arm/powertest.uvprojx,../app/mcu_example/EFM32LG_STK3600/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_touch" description="&lt;h1&gt;&lt;b&gt;Capactive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates the capacitive touch capability of the EFM32 and the&#xD;&#xA;Tiny Gecko STK. This is a port of the EFM32_G8xx_STK capacitive touch demo.&#xD;&#xA;&#xD;&#xA;It demonstrates the use of LESENSE, ACMP, VCMP, LCD, and EMU.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/touch/SimplicityStudio/STK3600_touch.slsproj,../app/mcu_example/EFM32LG_STK3600/touch/arm/touch.uvprojx,../app/mcu_example/EFM32LG_STK3600/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/touchdemo.c"/>
  </descriptors>
  <descriptors label="STK3600_usbdcomposite" description="&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a composite USB device with tree functions:&#xD;&#xA;&#xD;&#xA; - Mass storage class device (MSD) implementing a disk in internal flash memory.&#xD;&#xA; - Communication device class (CDC) implementing a USB to UART bridge&#xD;&#xA; - Vendor Unique Device similar to the usbdvud example (control STK leds).&#xD;&#xA;&#xD;&#xA;As the CDC function has two interface, the CDC function use an Interface&#xD;&#xA;Association Descriptor (IAD). A composite device which use IAD's must be&#xD;&#xA;implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The vendor unique function (VUD).&#xD;&#xA;=================================&#xD;&#xA;Toggles user LED's 0 and 1 when receiving vendor unique class setup commands.&#xD;&#xA;Intended to be used together with the &quot;libusb&quot; device driver, and host&#xD;&#xA;application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud&#xD;&#xA;example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud&#xD;&#xA;example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00&#xD;&#xA;are specified.&#xD;&#xA;&#xD;&#xA;The CDC COM port function.&#xD;&#xA;==========================&#xD;&#xA;Implements an USB CDC based virtual COM port. USART1 on the STK is used as the&#xD;&#xA;physical COM port. Any data sent to the virtual CDC COM port is transmitted on&#xD;&#xA;USART1. Any data received on USART1 is transmitted to the virtual port.&#xD;&#xA;USART1 is available on the STK EXT port. EXT pin 4 is Tx, pin 6 is Rx.&#xD;&#xA;NOTE: This is a TTL level USART, DO NOT CONNECT DIRECTLY TO RS232 PORTS !&#xD;&#xA;&#xD;&#xA;USB Mass Storage Device function.&#xD;&#xA;=================================&#xD;&#xA;Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Windows driver installation.&#xD;&#xA;============================&#xD;&#xA;The first time the composite USB device is connected to the host, Windows must&#xD;&#xA;install drivers for the VUD and CDC functions.&#xD;&#xA;&#xD;&#xA;To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;&#xD;&#xA;device driver. Manually direct Windows to look for this driver in the &quot;host&quot;&#xD;&#xA;folder of the usbdvud example.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on one of functions&#xD;&#xA;of the new composite device (marked with yellow exclamation mark) and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;After libusb is installed you can start EFM32-LedApp.exe to control leds on&#xD;&#xA;the STK.&#xD;&#xA;&#xD;&#xA;Similarly for the CDC function, direct Windows to look for a driver in the&#xD;&#xA;folder where you have your copy of the &quot;EFM32-Cdc.inf&quot; file (same folder as&#xD;&#xA;this readme file, unzip the Silabs-CDC_Install.zip).&#xD;&#xA;Note how the .inf file specifies interface number 2, VID_10C4&amp;PID_0008&amp;MI_02.&#xD;&#xA;When the serial port driver is succesfully installed, the device will be listed&#xD;&#xA;as a &quot;Ports&quot; device in Device Manager, double-click it, select the&#xD;&#xA;&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port&#xD;&#xA;properties.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/usbdcomposite/SimplicityStudio/STK3600_usbdcomposite.slsproj,../app/mcu_example/EFM32LG_STK3600/usbdcomposite/arm/usbdcomposite.uvprojx,../app/mcu_example/EFM32LG_STK3600/usbdcomposite/iar/usbdcomposite.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_usbdhidkbd" description="&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB HID class keyboard device (one button !).&#xD;&#xA;&#xD;&#xA;PB0 is the keyboard button. Pressing this button will succesively write&#xD;&#xA;&quot;Silicon Labs - &quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/usbdhidkbd/SimplicityStudio/STK3600_usbdhidkbd.slsproj,../app/mcu_example/EFM32LG_STK3600/usbdhidkbd/arm/usbdhidkbd.uvprojx,../app/mcu_example/EFM32LG_STK3600/usbdhidkbd/iar/usbdhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_usbdmsd" description="&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a device Mass Storage Class device (MSD).&#xD;&#xA;&#xD;&#xA;The example provides two different MSD types.&#xD;&#xA;&#xD;&#xA; - A 96KByte &quot;disk&quot; in internal SRAM (on devices with 128 kByte or larger SRAM)&#xD;&#xA; - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)&#xD;&#xA;&#xD;&#xA;Select mediatype in msddmedia.h (#define MSD_MEDIA)&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/usbdmsd/SimplicityStudio/STK3600_usbdmsd.slsproj,../app/mcu_example/EFM32LG_STK3600/usbdmsd/arm/usbdmsd.uvprojx,../app/mcu_example/EFM32LG_STK3600/usbdmsd/iar/usbdmsd.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_usbdvud" description="&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB Vendor Unique Device.&#xD;&#xA;&#xD;&#xA;The example will toggle LED's 0 and 1 when receiving vendor unique class&#xD;&#xA;setup commands.&#xD;&#xA;&#xD;&#xA;This example is intended to be used together with the &quot;libusb&quot; device driver,&#xD;&#xA;and host application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;&#xD;&#xA;The first time the USB device is connected to the host, you must tell the host&#xD;&#xA;OS to install the &quot;libusb&quot; device driver.&#xD;&#xA;&#xD;&#xA;On Windows, you can follow this procedure:&#xD;&#xA;Insert the device, and manually direct Windows to look for drivers in the&#xD;&#xA;directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;After libusb is installed, start EFM32-LedApp.exe.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/usbdvud/SimplicityStudio/STK3600_usbdvud.slsproj,../app/mcu_example/EFM32LG_STK3600/usbdvud/arm/usbdvud.uvprojx,../app/mcu_example/EFM32LG_STK3600/usbdvud/iar/usbdvud.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_usbhenum" description="&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host stack to implement&#xD;&#xA;a simple device enumerator. When a device is attached its descriptors are read&#xD;&#xA;and the vendor and product id's (VID/PID) are displayed on the LCD.&#xD;&#xA;The device attached will not be configured.&#xD;&#xA;&#xD;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xD;&#xA;when attached.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG-STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/usbhenum/SimplicityStudio/STK3600_usbhenum.slsproj,../app/mcu_example/EFM32LG_STK3600/usbhenum/arm/usbhenum.uvprojx,../app/mcu_example/EFM32LG_STK3600/usbhenum/iar/usbhenum.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_usbxpress_echo" description="&lt;h1&gt;&lt;b&gt;USBXpress Echo example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xD;&#xA;It echoes all received data back to the host that sent it.&#xD;&#xA;&#xD;&#xA;The host-side application is the usbxpress_echo.py Python script found in the&#xD;&#xA;USBXpress SDK at Examples/Echo/Host. The USBXpress SDK is available for download&#xD;&#xA;at www.silabs.com/products/mcu/Pages/USBXpress.aspx.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/usbxpress_echo/SimplicityStudio/STK3600_usbxpress_echo.slsproj,../app/mcu_example/EFM32LG_STK3600/usbxpress_echo/arm/usbxpress_echo.uvprojx,../app/mcu_example/EFM32LG_STK3600/usbxpress_echo/iar/usbxpress_echo.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_usbxpress_test_panel" description="&lt;h1&gt;&lt;b&gt;USBXpress Test Panel example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xD;&#xA;It communicates with the TestPanel host application to send and receive data.&#xD;&#xA;TestPanel is included in the USBXpress SDK, available for download at:&#xD;&#xA;&#xD;&#xA;https://www.silabs.com/products/mcu/Pages/USBXpress.aspx&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/usbxpress_test_panel/SimplicityStudio/STK3600_usbxpress_test_panel.slsproj,../app/mcu_example/EFM32LG_STK3600/usbxpress_test_panel/arm/usbxpress_test_panel.uvprojx,../app/mcu_example/EFM32LG_STK3600/usbxpress_test_panel/iar/usbxpress_test_panel.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3600_userpage" description="&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS  and demonstrates the programming of&#xD;&#xA;the user page in flash. The page can be used for data such as keys, serial&#xD;&#xA;numbers and other information that should not be deleted by a device erase.&#xD;&#xA;&#xD;&#xA;PB0 increases the main counter.&#xD;&#xA;PB1 saves the main counter value to the user page and displays how many Flash writes&#xD;&#xA;have been issued.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32LG_STK3600 Development Kit&#xD;&#xA;Device: EFM32LG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Leopard Gecko 3600 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32LG_STK3600/userpage/SimplicityStudio/STK3600_userpage.slsproj,../app/mcu_example/EFM32LG_STK3600/userpage/arm/userpage.uvprojx,../app/mcu_example/EFM32LG_STK3600/userpage/iar/userpage.eww"/>
    <properties key="core.boardCompatibility" value="brd2201a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/userpage.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6241A_EZR32HG/blink/SimplicityStudio/SLWSTK6241A_blink.slsproj,../app/mcu_example/SLWSTK6241A_EZR32HG/blink/arm/blink.uvprojx,../app/mcu_example/SLWSTK6241A_EZR32HG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6241A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6241A_EZR32HG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6241A_EZR32HG/clock/SimplicityStudio/SLWSTK6241A_clock.slsproj,../app/mcu_example/SLWSTK6241A_EZR32HG/clock/arm/clock.uvprojx,../app/mcu_example/SLWSTK6241A_EZR32HG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_direct_rx/SimplicityStudio/SLWSTK6241A_ezradio_direct_rx.slsproj,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_direct_tx/SimplicityStudio/SLWSTK6241A_ezradio_direct_tx.slsproj,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_per" description="&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;This example bases on the standard TRx with auto acknowledge example. It is &#xD;&#xA;advised to study the original application first.&#xD;&#xA;All the original functionalities can be turned on, however, the main purpose&#xD;&#xA;of this example is to show how to implement transmission packet error rate (PER) &#xD;&#xA;and RSSI measurements in an application. The user can send either one (PB0) &#xD;&#xA;or multiple packets (PB1) with the transmitter node and study the PER and RSSI&#xD;&#xA;values on the receiver node.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_per/SimplicityStudio/SLWSTK6241A_ezradio_per.slsproj,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_per/arm/ezradio_per.uvprojx,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_per/iar/ezradio_per.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_pn9/SimplicityStudio/SLWSTK6241A_ezradio_pn9.slsproj,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_pn9/arm/ezradio_pn9.uvprojx,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_simple_trx/SimplicityStudio/SLWSTK6241A_ezradio_simple_trx.slsproj,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_trx_ack/SimplicityStudio/SLWSTK6241A_ezradio_trx_ack.slsproj,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6241A_ezradio_unmodulated_carrier.slsproj,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6241A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6241A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6241A_EZR32HG/humitemp/SimplicityStudio/SLWSTK6241A_humitemp.slsproj,../app/mcu_example/SLWSTK6241A_EZR32HG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLWSTK6241A_EZR32HG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6241A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and EMLIB, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6241A_EZR32HG&#xD;&#xA;wireless starter kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART0&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6241A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6241A_EZR32HG/rs232/SimplicityStudio/SLWSTK6241A_rs232.slsproj,../app/mcu_example/SLWSTK6241A_EZR32HG/rs232/arm/rs232.uvprojx,../app/mcu_example/SLWSTK6241A_EZR32HG/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4542b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6242A_EZR32HG/blink/SimplicityStudio/SLWSTK6242A_blink.slsproj,../app/mcu_example/SLWSTK6242A_EZR32HG/blink/arm/blink.uvprojx,../app/mcu_example/SLWSTK6242A_EZR32HG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6242A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6242A_EZR32HG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6242A_EZR32HG/clock/SimplicityStudio/SLWSTK6242A_clock.slsproj,../app/mcu_example/SLWSTK6242A_EZR32HG/clock/arm/clock.uvprojx,../app/mcu_example/SLWSTK6242A_EZR32HG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_direct_rx/SimplicityStudio/SLWSTK6242A_ezradio_direct_rx.slsproj,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_direct_tx/SimplicityStudio/SLWSTK6242A_ezradio_direct_tx.slsproj,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_per" description="&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;This example bases on the standard TRx with auto acknowledge example. It is &#xD;&#xA;advised to study the original application first.&#xD;&#xA;All the original functionalities can be turned on, however, the main purpose&#xD;&#xA;of this example is to show how to implement transmission packet error rate (PER) &#xD;&#xA;and RSSI measurements in an application. The user can send either one (PB0) &#xD;&#xA;or multiple packets (PB1) with the transmitter node and study the PER and RSSI&#xD;&#xA;values on the receiver node.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_per/SimplicityStudio/SLWSTK6242A_ezradio_per.slsproj,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_per/arm/ezradio_per.uvprojx,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_per/iar/ezradio_per.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_pn9/SimplicityStudio/SLWSTK6242A_ezradio_pn9.slsproj,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_pn9/arm/ezradio_pn9.uvprojx,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_simple_trx/SimplicityStudio/SLWSTK6242A_ezradio_simple_trx.slsproj,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_trx_ack/SimplicityStudio/SLWSTK6242A_ezradio_trx_ack.slsproj,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6242A_ezradio_unmodulated_carrier.slsproj,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6242A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6242A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6242A_EZR32HG/humitemp/SimplicityStudio/SLWSTK6242A_humitemp.slsproj,../app/mcu_example/SLWSTK6242A_EZR32HG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLWSTK6242A_EZR32HG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6242A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and EMLIB, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6242A_EZR32HG&#xD;&#xA;wireless starter kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART0&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6242A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6242A_EZR32HG/rs232/SimplicityStudio/SLWSTK6242A_rs232.slsproj,../app/mcu_example/SLWSTK6242A_EZR32HG/rs232/arm/rs232.uvprojx,../app/mcu_example/SLWSTK6242A_EZR32HG/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4543b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6243A_EZR32HG/blink/SimplicityStudio/SLWSTK6243A_blink.slsproj,../app/mcu_example/SLWSTK6243A_EZR32HG/blink/arm/blink.uvprojx,../app/mcu_example/SLWSTK6243A_EZR32HG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6243A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6243A_EZR32HG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6243A_EZR32HG/clock/SimplicityStudio/SLWSTK6243A_clock.slsproj,../app/mcu_example/SLWSTK6243A_EZR32HG/clock/arm/clock.uvprojx,../app/mcu_example/SLWSTK6243A_EZR32HG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_direct_rx/SimplicityStudio/SLWSTK6243A_ezradio_direct_rx.slsproj,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_direct_tx/SimplicityStudio/SLWSTK6243A_ezradio_direct_tx.slsproj,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_per" description="&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;This example bases on the standard TRx with auto acknowledge example. It is &#xD;&#xA;advised to study the original application first.&#xD;&#xA;All the original functionalities can be turned on, however, the main purpose&#xD;&#xA;of this example is to show how to implement transmission packet error rate (PER) &#xD;&#xA;and RSSI measurements in an application. The user can send either one (PB0) &#xD;&#xA;or multiple packets (PB1) with the transmitter node and study the PER and RSSI&#xD;&#xA;values on the receiver node.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_per/SimplicityStudio/SLWSTK6243A_ezradio_per.slsproj,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_per/arm/ezradio_per.uvprojx,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_per/iar/ezradio_per.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_pn9/SimplicityStudio/SLWSTK6243A_ezradio_pn9.slsproj,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_pn9/arm/ezradio_pn9.uvprojx,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_simple_trx/SimplicityStudio/SLWSTK6243A_ezradio_simple_trx.slsproj,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_trx_ack/SimplicityStudio/SLWSTK6243A_ezradio_trx_ack.slsproj,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6243A_ezradio_unmodulated_carrier.slsproj,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6243A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6243A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6243A_EZR32HG/humitemp/SimplicityStudio/SLWSTK6243A_humitemp.slsproj,../app/mcu_example/SLWSTK6243A_EZR32HG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLWSTK6243A_EZR32HG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6243A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and EMLIB, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6243A_EZR32HG&#xD;&#xA;wireless starter kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART0&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6243A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6243A_EZR32HG/rs232/SimplicityStudio/SLWSTK6243A_rs232.slsproj,../app/mcu_example/SLWSTK6243A_EZR32HG/rs232/arm/rs232.uvprojx,../app/mcu_example/SLWSTK6243A_EZR32HG/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4545a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6244A_EZR32HG/blink/SimplicityStudio/SLWSTK6244A_blink.slsproj,../app/mcu_example/SLWSTK6244A_EZR32HG/blink/arm/blink.uvprojx,../app/mcu_example/SLWSTK6244A_EZR32HG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6244A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6244A_EZR32HG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6244A_EZR32HG/clock/SimplicityStudio/SLWSTK6244A_clock.slsproj,../app/mcu_example/SLWSTK6244A_EZR32HG/clock/arm/clock.uvprojx,../app/mcu_example/SLWSTK6244A_EZR32HG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_direct_rx/SimplicityStudio/SLWSTK6244A_ezradio_direct_rx.slsproj,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_direct_tx/SimplicityStudio/SLWSTK6244A_ezradio_direct_tx.slsproj,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_per" description="&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;This example bases on the standard TRx with auto acknowledge example. It is &#xD;&#xA;advised to study the original application first.&#xD;&#xA;All the original functionalities can be turned on, however, the main purpose&#xD;&#xA;of this example is to show how to implement transmission packet error rate (PER) &#xD;&#xA;and RSSI measurements in an application. The user can send either one (PB0) &#xD;&#xA;or multiple packets (PB1) with the transmitter node and study the PER and RSSI&#xD;&#xA;values on the receiver node.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_per/SimplicityStudio/SLWSTK6244A_ezradio_per.slsproj,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_per/arm/ezradio_per.uvprojx,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_per/iar/ezradio_per.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_pn9/SimplicityStudio/SLWSTK6244A_ezradio_pn9.slsproj,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_pn9/arm/ezradio_pn9.uvprojx,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_simple_trx/SimplicityStudio/SLWSTK6244A_ezradio_simple_trx.slsproj,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_trx_ack/SimplicityStudio/SLWSTK6244A_ezradio_trx_ack.slsproj,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6244A_ezradio_unmodulated_carrier.slsproj,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6244A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6244A_EZR32HG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6244A_EZR32HG/humitemp/SimplicityStudio/SLWSTK6244A_humitemp.slsproj,../app/mcu_example/SLWSTK6244A_EZR32HG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLWSTK6244A_EZR32HG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6244A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and EMLIB, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6244A_EZR32HG&#xD;&#xA;wireless starter kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART0&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6244A_EZR32HG Starter Kit&#xD;&#xA;Device: EZR32HG320F64R61&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6244A_EZR32HG/rs232/SimplicityStudio/SLWSTK6244A_rs232.slsproj,../app/mcu_example/SLWSTK6244A_EZR32HG/rs232/arm/rs232.uvprojx,../app/mcu_example/SLWSTK6244A_EZR32HG/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4544a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Starter Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6201A_EZR32LG/blink/SimplicityStudio/SLWSTK6201A_blink.slsproj,../app/mcu_example/SLWSTK6201A_EZR32LG/blink/arm/blink.uvprojx,../app/mcu_example/SLWSTK6201A_EZR32LG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6201A_EZR32LG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6201A_EZR32LG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6201A_EZR32LG/clock/SimplicityStudio/SLWSTK6201A_clock.slsproj,../app/mcu_example/SLWSTK6201A_EZR32LG/clock/arm/clock.uvprojx,../app/mcu_example/SLWSTK6201A_EZR32LG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_direct_rx/SimplicityStudio/SLWSTK6201A_ezradio_direct_rx.slsproj,../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_direct_tx/SimplicityStudio/SLWSTK6201A_ezradio_direct_tx.slsproj,../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_pn9/SimplicityStudio/SLWSTK6201A_ezradio_pn9.slsproj,../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_pn9/arm/ezradio_pn9.uvprojx,../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_simple_trx/SimplicityStudio/SLWSTK6201A_ezradio_simple_trx.slsproj,../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_trx_ack/SimplicityStudio/SLWSTK6201A_ezradio_trx_ack.slsproj,../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6201A_ezradio_unmodulated_carrier.slsproj,../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6201A_EZR32LG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6201A_EZR32LG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG starter kit.&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6201A_EZR32LG/humitemp/SimplicityStudio/SLWSTK6201A_humitemp.slsproj,../app/mcu_example/SLWSTK6201A_EZR32LG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLWSTK6201A_EZR32LG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6201A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and EMLIB, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6201A_EZR32LG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6201A_EZR32LG/rs232/SimplicityStudio/SLWSTK6201A_rs232.slsproj,../app/mcu_example/SLWSTK6201A_EZR32LG/rs232/arm/rs232.uvprojx,../app/mcu_example/SLWSTK6201A_EZR32LG/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4502b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Starter Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6202A_EZR32LG/blink/SimplicityStudio/SLWSTK6202A_blink.slsproj,../app/mcu_example/SLWSTK6202A_EZR32LG/blink/arm/blink.uvprojx,../app/mcu_example/SLWSTK6202A_EZR32LG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6202A_EZR32LG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6202A_EZR32LG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6202A_EZR32LG/clock/SimplicityStudio/SLWSTK6202A_clock.slsproj,../app/mcu_example/SLWSTK6202A_EZR32LG/clock/arm/clock.uvprojx,../app/mcu_example/SLWSTK6202A_EZR32LG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_direct_rx/SimplicityStudio/SLWSTK6202A_ezradio_direct_rx.slsproj,../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_direct_tx/SimplicityStudio/SLWSTK6202A_ezradio_direct_tx.slsproj,../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_pn9/SimplicityStudio/SLWSTK6202A_ezradio_pn9.slsproj,../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_pn9/arm/ezradio_pn9.uvprojx,../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_simple_trx/SimplicityStudio/SLWSTK6202A_ezradio_simple_trx.slsproj,../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_trx_ack/SimplicityStudio/SLWSTK6202A_ezradio_trx_ack.slsproj,../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6202A_ezradio_unmodulated_carrier.slsproj,../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6202A_EZR32LG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6202A_EZR32LG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG starter kit.&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6202A_EZR32LG/humitemp/SimplicityStudio/SLWSTK6202A_humitemp.slsproj,../app/mcu_example/SLWSTK6202A_EZR32LG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLWSTK6202A_EZR32LG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_rangeTest" description="&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;The Range Test application can be used to evaluate Silicon Laboratories radio&#xD;&#xA;chips including performace, sensitivity or blocking measurements.&#xD;&#xA;&#xD;&#xA;Range Test creates a radio link between two evaluation kits and sends &#xD;&#xA;predefined amount of packets from the transmitter side to the receiver.&#xD;&#xA;The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER&#xD;&#xA;based on the packets received. It also displays the current RSSI level in dBm&#xD;&#xA;units and draws a chart of the RSSI historical data.&#xD;&#xA;For long tests the transmitter can be set up to transmit continuously. It is not&#xD;&#xA;necessary to start both sides synchronously.&#xD;&#xA;&#xD;&#xA;*PLEASE NOTE* This example uses the radio extensively and could transmit at high&#xD;&#xA;RF power levels that may result in higher peak current consumption. Due to the&#xD;&#xA;peak current demand this example is not suited to run on a coin cell battery.&#xD;&#xA;If standalone operation is required please consider the use of an external USB&#xD;&#xA;connected battery or other power source.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Starter Kit&#xD;&#xA;Device: EZR32LG330F256R63&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6202A_EZR32LG/rangeTest/SimplicityStudio/SLWSTK6202A_rangeTest.slsproj"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="configuration/rangetestconfig.c"/>
  </descriptors>
  <descriptors label="SLWSTK6202A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and EMLIB, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6202A_EZR32LG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit&#xD;&#xA;Device: EZR32LG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6202A_EZR32LG/rs232/SimplicityStudio/SLWSTK6202A_rs232.slsproj,../app/mcu_example/SLWSTK6202A_EZR32LG/rs232/arm/rs232.uvprojx,../app/mcu_example/SLWSTK6202A_EZR32LG/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4503a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6220A_EZR32WG/blink/SimplicityStudio/SLWSTK6220A_blink.slsproj,../app/mcu_example/SLWSTK6220A_EZR32WG/blink/arm/blink.uvprojx,../app/mcu_example/SLWSTK6220A_EZR32WG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6220A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6220A_EZR32WG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6220A_EZR32WG/clock/SimplicityStudio/SLWSTK6220A_clock.slsproj,../app/mcu_example/SLWSTK6220A_EZR32WG/clock/arm/clock.uvprojx,../app/mcu_example/SLWSTK6220A_EZR32WG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_direct_rx/SimplicityStudio/SLWSTK6220A_ezradio_direct_rx.slsproj,../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_direct_tx/SimplicityStudio/SLWSTK6220A_ezradio_direct_tx.slsproj,../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_pn9/SimplicityStudio/SLWSTK6220A_ezradio_pn9.slsproj,../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_pn9/arm/ezradio_pn9.uvprojx,../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_simple_trx/SimplicityStudio/SLWSTK6220A_ezradio_simple_trx.slsproj,../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_trx_ack/SimplicityStudio/SLWSTK6220A_ezradio_trx_ack.slsproj,../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6220A_ezradio_unmodulated_carrier.slsproj,../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6220A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6220A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG starter kit.&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6220A_EZR32WG/humitemp/SimplicityStudio/SLWSTK6220A_humitemp.slsproj,../app/mcu_example/SLWSTK6220A_EZR32WG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLWSTK6220A_EZR32WG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_rangeTest" description="&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;The Range Test application can be used to evaluate Silicon Laboratories radio&#xD;&#xA;chips including performace, sensitivity or blocking measurements.&#xD;&#xA;&#xD;&#xA;Range Test creates a radio link between two evaluation kits and sends &#xD;&#xA;predefined amount of packets from the transmitter side to the receiver.&#xD;&#xA;The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER&#xD;&#xA;based on the packets received. It also displays the current RSSI level in dBm&#xD;&#xA;units and draws a chart of the RSSI historical data.&#xD;&#xA;For long tests the transmitter can be set up to transmit continuously. It is not&#xD;&#xA;necessary to start both sides synchronously.&#xD;&#xA;&#xD;&#xA;*PLEASE NOTE* This example uses the radio extensively and could transmit at high&#xD;&#xA;RF power levels that may result in higher peak current consumption. Due to the&#xD;&#xA;peak current demand this example is not suited to run on a coin cell battery.&#xD;&#xA;If standalone operation is required please consider the use of an external USB&#xD;&#xA;connected battery or other power source.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R60&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6220A_EZR32WG/rangeTest/SimplicityStudio/SLWSTK6220A_rangeTest.slsproj"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="configuration/rangetestconfig.c"/>
  </descriptors>
  <descriptors label="SLWSTK6220A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and EMLIB, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6220A_EZR32WG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R60&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6220A_EZR32WG/rs232/SimplicityStudio/SLWSTK6220A_rs232.slsproj,../app/mcu_example/SLWSTK6220A_EZR32WG/rs232/arm/rs232.uvprojx,../app/mcu_example/SLWSTK6220A_EZR32WG/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4502c"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6221A_EZR32WG/blink/SimplicityStudio/SLWSTK6221A_blink.slsproj,../app/mcu_example/SLWSTK6221A_EZR32WG/blink/arm/blink.uvprojx,../app/mcu_example/SLWSTK6221A_EZR32WG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6221A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6221A_EZR32WG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6221A_EZR32WG/clock/SimplicityStudio/SLWSTK6221A_clock.slsproj,../app/mcu_example/SLWSTK6221A_EZR32WG/clock/arm/clock.uvprojx,../app/mcu_example/SLWSTK6221A_EZR32WG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_direct_rx/SimplicityStudio/SLWSTK6221A_ezradio_direct_rx.slsproj,../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_direct_tx/SimplicityStudio/SLWSTK6221A_ezradio_direct_tx.slsproj,../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_pn9/SimplicityStudio/SLWSTK6221A_ezradio_pn9.slsproj,../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_pn9/arm/ezradio_pn9.uvprojx,../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_simple_trx/SimplicityStudio/SLWSTK6221A_ezradio_simple_trx.slsproj,../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_trx_ack/SimplicityStudio/SLWSTK6221A_ezradio_trx_ack.slsproj,../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6221A_ezradio_unmodulated_carrier.slsproj,../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6221A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6221A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG starter kit.&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6221A_EZR32WG/humitemp/SimplicityStudio/SLWSTK6221A_humitemp.slsproj,../app/mcu_example/SLWSTK6221A_EZR32WG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLWSTK6221A_EZR32WG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6221A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and EMLIB, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6221A_EZR32WG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R55&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 434 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6221A_EZR32WG/rs232/SimplicityStudio/SLWSTK6221A_rs232.slsproj,../app/mcu_example/SLWSTK6221A_EZR32WG/rs232/arm/rs232.uvprojx,../app/mcu_example/SLWSTK6221A_EZR32WG/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4502d"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6222A_EZR32WG/blink/SimplicityStudio/SLWSTK6222A_blink.slsproj,../app/mcu_example/SLWSTK6222A_EZR32WG/blink/arm/blink.uvprojx,../app/mcu_example/SLWSTK6222A_EZR32WG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6222A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6222A_EZR32WG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6222A_EZR32WG/clock/SimplicityStudio/SLWSTK6222A_clock.slsproj,../app/mcu_example/SLWSTK6222A_EZR32WG/clock/arm/clock.uvprojx,../app/mcu_example/SLWSTK6222A_EZR32WG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_direct_rx/SimplicityStudio/SLWSTK6222A_ezradio_direct_rx.slsproj,../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_direct_tx/SimplicityStudio/SLWSTK6222A_ezradio_direct_tx.slsproj,../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_pn9/SimplicityStudio/SLWSTK6222A_ezradio_pn9.slsproj,../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_pn9/arm/ezradio_pn9.uvprojx,../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_simple_trx/SimplicityStudio/SLWSTK6222A_ezradio_simple_trx.slsproj,../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_trx_ack/SimplicityStudio/SLWSTK6222A_ezradio_trx_ack.slsproj,../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6222A_ezradio_unmodulated_carrier.slsproj,../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6222A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6222A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG starter kit.&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6222A_EZR32WG/humitemp/SimplicityStudio/SLWSTK6222A_humitemp.slsproj,../app/mcu_example/SLWSTK6222A_EZR32WG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLWSTK6222A_EZR32WG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_rangeTest" description="&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;The Range Test application can be used to evaluate Silicon Laboratories radio&#xD;&#xA;chips including performace, sensitivity or blocking measurements.&#xD;&#xA;&#xD;&#xA;Range Test creates a radio link between two evaluation kits and sends &#xD;&#xA;predefined amount of packets from the transmitter side to the receiver.&#xD;&#xA;The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER&#xD;&#xA;based on the packets received. It also displays the current RSSI level in dBm&#xD;&#xA;units and draws a chart of the RSSI historical data.&#xD;&#xA;For long tests the transmitter can be set up to transmit continuously. It is not&#xD;&#xA;necessary to start both sides synchronously.&#xD;&#xA;&#xD;&#xA;*PLEASE NOTE* This example uses the radio extensively and could transmit at high&#xD;&#xA;RF power levels that may result in higher peak current consumption. Due to the&#xD;&#xA;peak current demand this example is not suited to run on a coin cell battery.&#xD;&#xA;If standalone operation is required please consider the use of an external USB&#xD;&#xA;connected battery or other power source.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R63&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6222A_EZR32WG/rangeTest/SimplicityStudio/SLWSTK6222A_rangeTest.slsproj"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="configuration/rangetestconfig.c"/>
  </descriptors>
  <descriptors label="SLWSTK6222A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and EMLIB, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6222A_EZR32WG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 915 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6222A_EZR32WG/rs232/SimplicityStudio/SLWSTK6222A_rs232.slsproj,../app/mcu_example/SLWSTK6222A_EZR32WG/rs232/arm/rs232.uvprojx,../app/mcu_example/SLWSTK6222A_EZR32WG/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4503b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6223A_EZR32WG/blink/SimplicityStudio/SLWSTK6223A_blink.slsproj,../app/mcu_example/SLWSTK6223A_EZR32WG/blink/arm/blink.uvprojx,../app/mcu_example/SLWSTK6223A_EZR32WG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6223A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6223A_EZR32WG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6223A_EZR32WG/clock/SimplicityStudio/SLWSTK6223A_clock.slsproj,../app/mcu_example/SLWSTK6223A_EZR32WG/clock/arm/clock.uvprojx,../app/mcu_example/SLWSTK6223A_EZR32WG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_direct_rx/SimplicityStudio/SLWSTK6223A_ezradio_direct_rx.slsproj,../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_direct_tx/SimplicityStudio/SLWSTK6223A_ezradio_direct_tx.slsproj,../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_pn9/SimplicityStudio/SLWSTK6223A_ezradio_pn9.slsproj,../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_pn9/arm/ezradio_pn9.uvprojx,../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_simple_trx/SimplicityStudio/SLWSTK6223A_ezradio_simple_trx.slsproj,../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_trx_ack/SimplicityStudio/SLWSTK6223A_ezradio_trx_ack.slsproj,../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6223A_ezradio_unmodulated_carrier.slsproj,../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6223A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6223A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG starter kit.&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6223A_EZR32WG/humitemp/SimplicityStudio/SLWSTK6223A_humitemp.slsproj,../app/mcu_example/SLWSTK6223A_EZR32WG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLWSTK6223A_EZR32WG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_rangeTest" description="&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;The Range Test application can be used to evaluate Silicon Laboratories radio&#xD;&#xA;chips including performace, sensitivity or blocking measurements.&#xD;&#xA;&#xD;&#xA;Range Test creates a radio link between two evaluation kits and sends &#xD;&#xA;predefined amount of packets from the transmitter side to the receiver.&#xD;&#xA;The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER&#xD;&#xA;based on the packets received. It also displays the current RSSI level in dBm&#xD;&#xA;units and draws a chart of the RSSI historical data.&#xD;&#xA;For long tests the transmitter can be set up to transmit continuously. It is not&#xD;&#xA;necessary to start both sides synchronously.&#xD;&#xA;&#xD;&#xA;*PLEASE NOTE* This example uses the radio extensively and could transmit at high&#xD;&#xA;RF power levels that may result in higher peak current consumption. Due to the&#xD;&#xA;peak current demand this example is not suited to run on a coin cell battery.&#xD;&#xA;If standalone operation is required please consider the use of an external USB&#xD;&#xA;connected battery or other power source.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R63&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6223A_EZR32WG/rangeTest/SimplicityStudio/SLWSTK6223A_rangeTest.slsproj"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="configuration/rangetestconfig.c"/>
  </descriptors>
  <descriptors label="SLWSTK6223A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and EMLIB, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6223A_EZR32WG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 490 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6223A_EZR32WG/rs232/SimplicityStudio/SLWSTK6223A_rs232.slsproj,../app/mcu_example/SLWSTK6223A_EZR32WG/rs232/arm/rs232.uvprojx,../app/mcu_example/SLWSTK6223A_EZR32WG/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4505b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6224A_EZR32WG/blink/SimplicityStudio/SLWSTK6224A_blink.slsproj,../app/mcu_example/SLWSTK6224A_EZR32WG/blink/arm/blink.uvprojx,../app/mcu_example/SLWSTK6224A_EZR32WG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6224A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLWSTK6224A_EZR32WG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the minute count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 0.5 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6224A_EZR32WG/clock/SimplicityStudio/SLWSTK6224A_clock.slsproj,../app/mcu_example/SLWSTK6224A_EZR32WG/clock/arm/clock.uvprojx,../app/mcu_example/SLWSTK6224A_EZR32WG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_direct_rx/SimplicityStudio/SLWSTK6224A_ezradio_direct_rx.slsproj,../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_direct_tx/SimplicityStudio/SLWSTK6224A_ezradio_direct_tx.slsproj,../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_pn9/SimplicityStudio/SLWSTK6224A_ezradio_pn9.slsproj,../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_pn9/arm/ezradio_pn9.uvprojx,../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_simple_trx/SimplicityStudio/SLWSTK6224A_ezradio_simple_trx.slsproj,../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_trx_ack/SimplicityStudio/SLWSTK6224A_ezradio_trx_ack.slsproj,../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6224A_ezradio_unmodulated_carrier.slsproj,../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6224A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;This example project uses CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xD;&#xA;SLWSTK6224A_EZR32WG board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG starter kit.&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6224A_EZR32WG/humitemp/SimplicityStudio/SLWSTK6224A_humitemp.slsproj,../app/mcu_example/SLWSTK6224A_EZR32WG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLWSTK6224A_EZR32WG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_rangeTest" description="&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;The Range Test application can be used to evaluate Silicon Laboratories radio&#xD;&#xA;chips including performace, sensitivity or blocking measurements.&#xD;&#xA;&#xD;&#xA;Range Test creates a radio link between two evaluation kits and sends &#xD;&#xA;predefined amount of packets from the transmitter side to the receiver.&#xD;&#xA;The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER&#xD;&#xA;based on the packets received. It also displays the current RSSI level in dBm&#xD;&#xA;units and draws a chart of the RSSI historical data.&#xD;&#xA;For long tests the transmitter can be set up to transmit continuously. It is not&#xD;&#xA;necessary to start both sides synchronously.&#xD;&#xA;&#xD;&#xA;*PLEASE NOTE* This example uses the radio extensively and could transmit at high&#xD;&#xA;RF power levels that may result in higher peak current consumption. Due to the&#xD;&#xA;peak current demand this example is not suited to run on a coin cell battery.&#xD;&#xA;If standalone operation is required please consider the use of an external USB&#xD;&#xA;connected battery or other power source.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Starter Kit&#xD;&#xA;Device: EZR32WG330F256R63&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6224A_EZR32WG/rangeTest/SimplicityStudio/SLWSTK6224A_rangeTest.slsproj"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="configuration/rangetestconfig.c"/>
  </descriptors>
  <descriptors label="SLWSTK6224A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses CMSIS and EMLIB, to demonstrates the&#xD;&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6224A_EZR32WG&#xD;&#xA;development kit.&#xD;&#xA;&#xD;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xD;&#xA;#define RETARGET_LEUART0&#xD;&#xA;#define RETARGET_USART1&#xD;&#xA;#define RETARGET_USART2&#xD;&#xA;#define RETARGET_VCOM       (default)&#xD;&#xA;&#xD;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xD;&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xD;&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit&#xD;&#xA;Device: EZR32WG330F256R63&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32WG 169 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6224A_EZR32WG/rs232/SimplicityStudio/SLWSTK6224A_rs232.slsproj,../app/mcu_example/SLWSTK6224A_EZR32WG/rs232/arm/rs232.uvprojx,../app/mcu_example/SLWSTK6224A_EZR32WG/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4504b"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_biometric" description="&lt;h1&gt;&lt;b&gt;Biometric Demo using the Biometric Sensor add-on board on the EFM32GG-STK3700.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the LCD display on the EFM32GG_STK3700 kit. In addition, it&#xA;demonstrates the use of Silicon Labs I2C based sensors on the expansion board&#xA;header.&#xA;&#xA;You must have a Silicon Labs Biometric Sensor add-on board to make use of this demo.&#xA;Once the demo is started, push button PB0 to change what is displayed. While&#xA;on the heart rate monitor display hold your finger on the proximity sensor to &#xA;measure heart rate.&#xA;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Starter Kit and Sensor Add-on board&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/biometric/SimplicityStudio/STK3700_biometric.slsproj,../app/mcu_example/EFM32GG_STK3700/biometric/arm/biometric.uvprojx,../app/mcu_example/EFM32GG_STK3700/biometric/iar/biometric.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/biometric_demo.c"/>
  </descriptors>
  <descriptors label="STK3700_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xA;a skeleton for new projects.&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/blink/SimplicityStudio/STK3700_blink.slsproj,../app/mcu_example/EFM32GG_STK3700/blink/arm/blink.uvprojx,../app/mcu_example/EFM32GG_STK3700/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="STK3700_burtc" description="&lt;h1&gt;&lt;b&gt;Backup power domain RTC example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example demonstrate use of the backup power domain and the&#xA;backup real time clock (BURTC).&#xA;&#xA;Start the example with the Power Source Selector switch in the &quot;DBG&quot; position.&#xA;When the clock is running you can adjust time by pressing pushbuttons&#xA;PB0 and PB1.&#xA;When you move the Power Source Selector switch to the &quot;USB&quot; position, the&#xA;EFM is turned off and the BURTC peripheral runs on power from the BU capacitor.&#xA;(See User manual for EFM32GG-STK3700 starter kit for details on the hardware).&#xA;When you move the Power Source Selector switch back to the &quot;DBG&quot; position, you&#xA;can verify that time has been recorded correctly.&#xA;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Starter Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/burtc/SimplicityStudio/STK3700_burtc.slsproj,../app/mcu_example/EFM32GG_STK3700/burtc/arm/burtc.uvprojx,../app/mcu_example/EFM32GG_STK3700/burtc/iar/burtc.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_clock" description="&lt;h1&gt;&lt;b&gt;Wall Clock example using the segment LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS  and demonstrates  the use of&#xA;the LCD controller, RTC (real time counter), VCMP, GPIO and various&#xA;Energy Modes (EM).&#xA;&#xA;The RTC is set up to wake the EFM32 from EM2 every minute. During this&#xA;interval, the LCD is updated to reflect the current time. The animation&#xA;feature is used to show the seconds. This is done by using the frame&#xA;event counter to drive the animation feature every second.&#xA;&#xA;Time is set with pushbuttons PB0 and PB1.&#xA; - Pushing PB0 increments minute count.&#xA; - Pushing PB1 increments hour count.&#xA;&#xA;The VCMP is used to measure the input voltage on every wakeup. If the&#xA;voltage drops too low, voltage boost is enabled on the LCD. This makes&#xA;the LCD clear and readable even when running on low batteries.&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/clock/SimplicityStudio/STK3700_clock.slsproj,../app/mcu_example/EFM32GG_STK3700/clock/arm/clock.uvprojx,../app/mcu_example/EFM32GG_STK3700/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/clock.c"/>
  </descriptors>
  <descriptors label="STK3700_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xA; &#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit and CPT007B Evaluation Board&#xA;Device: EFM32GG990F1024&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/cpt007b/SimplicityStudio/STK3700_cpt007b_demo.slsproj,../app/mcu_example/EFM32GG_STK3700/cpt007b/arm/cpt007b_demo.uvprojx,../app/mcu_example/EFM32GG_STK3700/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="STK3700_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the capacitive sensing firmware library to sample&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xA;qualification status, and other state variables can be displayed and examined&#xA;in the Capacitive Sensing Profiler tool.&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/cslib/SimplicityStudio/STK3700_cslib.slsproj,../app/mcu_example/EFM32GG_STK3700/cslib/arm/cslib.uvprojx,../app/mcu_example/EFM32GG_STK3700/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with segment LCD example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xA;demonstrate the use of the LCD controller, RTC (real time counter), GPIO and&#xA;various Energy Modes (EM) on the starter kit.&#xA;&#xA;EM2 is used for delays in between refreshing the LCD display, and a lot of&#xA;&quot;eye candy&quot; are present to show off the MCU module's LCD display.&#xA;&#xA;The LCD controller drives the display down to EM2. In the demo, EM2 is used&#xA;for &quot;most&quot; delays to show off this feature. The user can press PB0 or PB1 to&#xA;activate EM3 and EM4. EM4 requires a system reset, while PB0 again will wake&#xA;up the system  from Energy Mode 3.&#xA;&#xA;Board:  Silicon Labs EFM32STG_STK3700 Starter Kit&#xA;Device: EFM32GG990F1024&#xA;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/emlcd/SimplicityStudio/STK3700_emlcd.slsproj,../app/mcu_example/EFM32GG_STK3700/emlcd/arm/emlcd.uvprojx,../app/mcu_example/EFM32GG_STK3700/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="STK3700_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 EMLIB and demonstrates the use of&#xA;the LCD controller, RTC (real time counter), GPIO and various Energy&#xA;Modes (EM).&#xA;&#xA;The user can press the push buttons PB0 and PB1 to select which energy&#xA;mode to demonstrate.&#xA;&#xA;This demo application has been made to give a quick demo of the&#xA;Energy Profiler from Silicon Labs and to reproduce the different &#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/emode/SimplicityStudio/STK3700_emode.slsproj,../app/mcu_example/EFM32GG_STK3700/emode/arm/emode.uvprojx,../app/mcu_example/EFM32GG_STK3700/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of&#xA;using FreeRTOS on a Silicon Labs MCU. The configuration uses the tickless mode&#xA;of FreeRTOS in order to enter low energy mode when idle.&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/freertos_blink/SimplicityStudio/STK3700_freertos_blink.slsproj,../app/mcu_example/EFM32GG_STK3700/freertos_blink/arm/freertos_blink.uvprojx,../app/mcu_example/EFM32GG_STK3700/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_gpiointerrupt" description="&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show&#xA;how to handle multiple GPIO interrupts. Buttons pressing toggles LEDs.&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/gpiointerrupt/SimplicityStudio/STK3700_gpiointerrupt.slsproj,../app/mcu_example/EFM32GG_STK3700/gpiointerrupt/arm/gpiointerrupt.uvprojx,../app/mcu_example/EFM32GG_STK3700/gpiointerrupt/iar/gpiointerrupt.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and EMLIB to demonstrate&#xA;the usage of the internal temperature sensor on EFM32 Giant Gecko&#xA;devices.&#xA;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xA;temperatures due to a sensor calibration bug.&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xA;Device: EFM32GG990F1024&#xA;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/inttemp/SimplicityStudio/STK3700_inttemp.slsproj,../app/mcu_example/EFM32GG_STK3700/inttemp/arm/inttemp.uvprojx,../app/mcu_example/EFM32GG_STK3700/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="STK3700_lcd" description="&lt;h1&gt;&lt;b&gt;Segment LCD controller example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and EMLIB peripheral library and&#xA;demonstrates the use of the segment LCD controller.&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/lcd/SimplicityStudio/STK3700_lcd.slsproj,../app/mcu_example/EFM32GG_STK3700/lcd/arm/lcd.uvprojx,../app/mcu_example/EFM32GG_STK3700/lcd/iar/lcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lcd.c"/>
  </descriptors>
  <descriptors label="STK3700_lcsense" description="&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xA;the LESENSE peripheral on the board.&#xA;&#xA;This demo has two different modes.&#xA;To change between them, press PB1. In Mode0 (default). The LESENSE&#xA;module will wake up whenever a metal object is passed above the LC&#xA;sensor in the bottom right of the STK. In Mode 1, the EFM32 will only&#xA;wake up every fifth time the metal object is passed over the sensor.&#xA;&#xA;Board: Silicon Labs EFM32GG_STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/lcsense/SimplicityStudio/STK3700_lcsense.slsproj,../app/mcu_example/EFM32GG_STK3700/lcsense/arm/lcsense.uvprojx,../app/mcu_example/EFM32GG_STK3700/lcsense/iar/lcsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lcsense.c"/>
  </descriptors>
  <descriptors label="STK3700_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project reads and sends the data back to terminal using LEUART&#xA;while staying in EM2.&#xA;&#xA;It uses the EFM32 CMSIS and EMLIB, to demonstrate the&#xA;use of LEUART communication using DMA under the EM2 on the &#xA;EFM32GG_STK3700 Starter Kit.&#xA;&#xA;The LEUART is configured to be used with DMA under EM2.&#xA;The terminal configuration is 9600-8-N-1.&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xA;&#xA;Testing:&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xA;2. Pin Configuration:&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xA;	2.3. Pin-1 Gnd&#xA;&#xA;3. Configure terminal to 9600-8-N-1.&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/leuart/SimplicityStudio/STK3700_leuart.slsproj,../app/mcu_example/EFM32GG_STK3700/leuart/arm/leuart.uvprojx,../app/mcu_example/EFM32GG_STK3700/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_lightsense" description="&lt;h1&gt;&lt;b&gt;Lightsensor example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS&#xA;and demonstrates the use of the LESENSE peripheral on the board.&#xA;&#xA;This demo has two different modes.&#xA;To change between them, press PB0. In Mode0 (default). The LESENSE&#xA;module will wake up whenever a &quot;dark&quot; event is detected by the light sensor&#xA;below the &quot;EFM32&quot; sign on the right from the LCD on the STK. In Mode 1,&#xA;EFM32 will only wake up on every fifth &quot;dark&quot; event.&#xA;&#xA;Board: Silicon Labs EFM32GG_STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/lightsense/SimplicityStudio/STK3700_lightsense.slsproj,../app/mcu_example/EFM32GG_STK3700/lightsense/arm/lightsense.uvprojx,../app/mcu_example/EFM32GG_STK3700/lightsense/iar/lightsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lightsense.c"/>
  </descriptors>
  <descriptors label="STK3700_mpu" description="&lt;h1&gt;&lt;b&gt;Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including STK BSP (board&#xA;support package).&#xA;&#xA;It sets up the MPU to demonstrate usage of MPU to catch memory access&#xA;violations. STK pushbuttons are used generate MPU faults.&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/mpu/SimplicityStudio/STK3700_mpu.slsproj,../app/mcu_example/EFM32GG_STK3700/mpu/arm/mpu.uvprojx,../app/mcu_example/EFM32GG_STK3700/mpu/iar/mpu.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/mpu.c"/>
  </descriptors>
  <descriptors label="STK3700_micriumos_blink" description="&lt;h1&gt;&lt;b&gt;MicriumOS Blink example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to initialize and run MicriumOS on the kit. The &#xA;application will start a single task which is blinking LED 0 at a regular &#xA;interval. This examples is a good starting point for applications that want &#xA;to use MicriumOS.&#xA;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is enabled by default and can be disabled by changing the &#xA;OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used&#xA;to inspect the runtime behaviour of this example, it will give a nice overview&#xA;of the tasks and interrupts in the application. SystemView can be downloaded &#xA;from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/micriumos_blink/SimplicityStudio/STK3700_micriumos_blink.slsproj,../app/mcu_example/EFM32GG_STK3700/micriumos_blink/arm/micriumos_blink.uvprojx,../app/mcu_example/EFM32GG_STK3700/micriumos_blink/iar/micriumos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/ex_main.c"/>
  </descriptors>
  <descriptors label="STK3700_micriumos_usbdhidmouse" description="&lt;h1&gt;&lt;b&gt;Micrium OS USB device HID mouse example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to use the Micrium OS USB device stack with the&#xA;USB peripheral on the EFM32GG starter kit. This example will emulate&#xA;the behavior of a USB mouse and move the mouse pointer up-left and&#xA;down-right periodically when connected to a PC.&#xA;&#xA;The output from the example application can be found by connecting a &#xA;terminal to the VCOM port.&#xA;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is enabled by default and can be disabled by changing the &#xA;OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used&#xA;to inspect the runtime behavior of this example, it will give a nice overview&#xA;of the tasks and interrupts in the application. SystemView can be downloaded &#xA;from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/micriumos_usbdhidmouse/SimplicityStudio/STK3700_micriumos_usbdhidmouse.slsproj,../app/mcu_example/EFM32GG_STK3700/micriumos_usbdhidmouse/arm/micriumos_usbdhidmouse.uvprojx,../app/mcu_example/EFM32GG_STK3700/micriumos_usbdhidmouse/iar/micriumos_usbdhidmouse.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/ex_main.c"/>
  </descriptors>
  <descriptors label="STK3700_micriumos_usbhmsc" description="&lt;h1&gt;&lt;b&gt;MicriumOS USB host MSC example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to use the MicriumOS USB host stack with the&#xA;USB controller on the EFM32GG starter kit. This example will detect&#xA;a connected USB memory and print some information about the decive.&#xA;&#xA;The output from the example application can be found by connecting a &#xA;terminal to the VCOM port.&#xA;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is enabled by default and can be disabled by changing the &#xA;OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used&#xA;to inspect the runtime behaviour of this example, it will give a nice overview&#xA;of the tasks and interrupts in the application. SystemView can be downloaded &#xA;from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Starter Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/micriumos_usbhmsc/SimplicityStudio/STK3700_micriumos_usbhmsc.slsproj,../app/mcu_example/EFM32GG_STK3700/micriumos_usbhmsc/arm/micriumos_usbhmsc.uvprojx,../app/mcu_example/EFM32GG_STK3700/micriumos_usbhmsc/iar/micriumos_usbhmsc.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/ex_main.c"/>
  </descriptors>
  <descriptors label="STK3700_nandflash" description="&lt;h1&gt;&lt;b&gt;Nandflash example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example demonstrates use of the NANDFLASH driver.&#xA;&#xA;Connect a terminal to the TTL-level serialport (115200-N-8-1). Here EXP port pin 1 &#xA;is ground, EXP port pin 4 is transmitter and EXP port pin 6 is reciever.&#xA;&#xA;Operations on the flash are initiated by issuing commands on the terminal.&#xA;Command &quot;h&quot; will print a help screen on the terminal :&#xA;&#xA;    Available commands:&#xA;        fi         : Show NAND flash device information&#xA;        h          : Show this help&#xA;        rp n       : Read page n&#xA;        bp n       : Blankcheck page n&#xA;        bd         : Blankcheck entire device&#xA;        bb         : Check bad-block info&#xA;        mb n       : Mark block n as bad&#xA;        wp n       : Write page n&#xA;        eb n       : Erase block n&#xA;        ecc n      : Check ECC algorithm, uses page n and n+1&#xA;        cp m n     : Copy page m to page n&#xA;&#xA;Note that the nandflash device used on this kit has 32 pages per block, so&#xA;pages 0-31 belongs to block 0.&#xA;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/nandflash/SimplicityStudio/STK3700_nandflash.slsproj,../app/mcu_example/EFM32GG_STK3700/nandflash/arm/nandflash.uvprojx,../app/mcu_example/EFM32GG_STK3700/nandflash/iar/nandflash.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library&#xA;to demonstrate the use of the various Energy Modes available on the&#xA;EFM32GG990F1024. When running this example, the Energy Profiler tool&#xA;in Simplicity Studio can be used to show the power consumption of each&#xA;energy mode.&#xA;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/powertest/SimplicityStudio/STK3700_powertest.slsproj,../app/mcu_example/EFM32GG_STK3700/powertest/arm/powertest.uvprojx,../app/mcu_example/EFM32GG_STK3700/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_touch" description="&lt;h1&gt;&lt;b&gt;Capactive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example demonstrates the capacitive touch capability of the EFM32 and the&#xA;Tiny Gecko STK. This is a port of the EFM32_G8xx_STK capacitive touch demo.&#xA;&#xA;It demonstrates the use of LESENSE, ACMP, VCMP, LCD, and EMU.&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/touch/SimplicityStudio/STK3700_touch.slsproj,../app/mcu_example/EFM32GG_STK3700/touch/arm/touch.uvprojx,../app/mcu_example/EFM32GG_STK3700/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/touchdemo.c"/>
  </descriptors>
  <descriptors label="STK3700_usbdcomposite" description="&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use the EFM32 USB Device protocol stack&#xA;to implement a composite USB device with tree functions:&#xA;&#xA; - Mass storage class device (MSD) implementing a disk in internal flash memory.&#xA; - Communication device class (CDC) implementing a USB to UART bridge&#xA; - Vendor Unique Device similar to the usbdvud example (control STK leds).&#xA;&#xA;As the CDC function has two interface, the CDC function use an Interface&#xA;Association Descriptor (IAD). A composite device which use IAD's must be&#xA;implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.&#xA;&#xA;&#xA;The vendor unique function (VUD).&#xA;=================================&#xA;Toggles user LED's 0 and 1 when receiving vendor unique class setup commands.&#xA;Intended to be used together with the &quot;libusb&quot; device driver, and host&#xA;application EFM32-LedApp.exe (a Windows application).&#xA;You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud&#xA;example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud&#xA;example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00&#xA;are specified.&#xA;&#xA;The CDC COM port function.&#xA;==========================&#xA;Implements an USB CDC based virtual COM port. USART1 on the STK is used as the&#xA;physical COM port. Any data sent to the virtual CDC COM port is transmitted on&#xA;USART1. Any data received on USART1 is transmitted to the virtual port.&#xA;USART1 is available on the STK EXT port. EXT pin 4 is Tx, pin 6 is Rx.&#xA;NOTE: This is a TTL level USART, DO NOT CONNECT DIRECTLY TO RS232 PORTS !&#xA;&#xA;USB Mass Storage Device function.&#xA;=================================&#xA;Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.&#xA;&#xA;&#xA;Windows driver installation.&#xA;============================&#xA;The first time the composite USB device is connected to the host, Windows must&#xA;install drivers for the VUD and CDC functions.&#xA;&#xA;To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;&#xA;device driver. Manually direct Windows to look for this driver in the &quot;host&quot;&#xA;folder of the usbdvud example.&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on one of functions&#xA;of the new composite device (marked with yellow exclamation mark) and&#xA;select &quot;Update Driver Software...&quot;.&#xA;After libusb is installed you can start EFM32-LedApp.exe to control leds on&#xA;the STK.&#xA;&#xA;Similarly for the CDC function, direct Windows to look for a driver in the&#xA;folder where you have your copy of the &quot;EFM32-Cdc.inf&quot; file (same folder as&#xA;this readme file, unzip the Silabs-CDC_Install.zip).&#xA;Note how the .inf file specifies interface number 2, VID_10C4&amp;PID_0008&amp;MI_02.&#xA;When the serial port driver is succesfully installed, the device will be listed&#xA;as a &quot;Ports&quot; device in Device Manager, double-click it, select the&#xA;&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port&#xA;properties.&#xA;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xA;Win7:&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xA;Win10:&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xA;When computer has restarted into the options menu, select:&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xA;You should now be able to install an unsigned driver.&#xA;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/usbdcomposite/SimplicityStudio/STK3700_usbdcomposite.slsproj,../app/mcu_example/EFM32GG_STK3700/usbdcomposite/arm/usbdcomposite.uvprojx,../app/mcu_example/EFM32GG_STK3700/usbdcomposite/iar/usbdcomposite.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_usbdhidkbd" description="&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use the EFM32 USB Device protocol stack&#xA;and implements an USB HID class keyboard device (one button !).&#xA;&#xA;PB0 is the keyboard button. Pressing this button will succesively write&#xA;&quot;Silicon Labs - &quot;.&#xA;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/usbdhidkbd/SimplicityStudio/STK3700_usbdhidkbd.slsproj,../app/mcu_example/EFM32GG_STK3700/usbdhidkbd/arm/usbdhidkbd.uvprojx,../app/mcu_example/EFM32GG_STK3700/usbdhidkbd/iar/usbdhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_usbdmsd" description="&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use the EFM32 USB Device protocol stack&#xA;to implement a device Mass Storage Class device (MSD).&#xA;&#xA;The example provides two different MSD types.&#xA;&#xA; - A 96KByte &quot;disk&quot; in internal SRAM (on devices with 128 kByte or larger SRAM)&#xA; - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)&#xA;&#xA;Select mediatype in msddmedia.h (#define MSD_MEDIA)&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/usbdmsd/SimplicityStudio/STK3700_usbdmsd.slsproj,../app/mcu_example/EFM32GG_STK3700/usbdmsd/arm/usbdmsd.uvprojx,../app/mcu_example/EFM32GG_STK3700/usbdmsd/iar/usbdmsd.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_usbdvud" description="&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use the EFM32 USB Device protocol stack&#xA;and implements an USB Vendor Unique Device.&#xA;&#xA;The example will toggle LED's 0 and 1 when receiving vendor unique class&#xA;setup commands.&#xA;&#xA;This example is intended to be used together with the &quot;libusb&quot; device driver,&#xA;and host application EFM32-LedApp.exe (a Windows application).&#xA;&#xA;The first time the USB device is connected to the host, you must tell the host&#xA;OS to install the &quot;libusb&quot; device driver.&#xA;&#xA;On Windows, you can follow this procedure:&#xA;Insert the device, and manually direct Windows to look for drivers in the&#xA;directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xA;select &quot;Update Driver Software...&quot;.&#xA;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xA;Win7:&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xA;Win10:&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xA;When computer has restarted into the options menu, select:&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xA;You should now be able to install an unsigned driver.&#xA;&#xA;After libusb is installed, start EFM32-LedApp.exe.&#xA;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/usbdvud/SimplicityStudio/STK3700_usbdvud.slsproj,../app/mcu_example/EFM32GG_STK3700/usbdvud/arm/usbdvud.uvprojx,../app/mcu_example/EFM32GG_STK3700/usbdvud/iar/usbdvud.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_usbhenum" description="&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the USB host stack to implement&#xA;a simple device enumerator. When a device is attached its descriptors are read&#xA;and the vendor and product id's (VID/PID) are displayed on the LCD.&#xA;The device attached will not be configured.&#xA;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xA;when attached.&#xA;&#xA;Board:  Silicon Labs EFM32GG-STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/usbhenum/SimplicityStudio/STK3700_usbhenum.slsproj,../app/mcu_example/EFM32GG_STK3700/usbhenum/arm/usbhenum.uvprojx,../app/mcu_example/EFM32GG_STK3700/usbhenum/iar/usbhenum.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_usbxpress_echo" description="&lt;h1&gt;&lt;b&gt;USBXpress Echo example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xA;It echoes all received data back to the host that sent it.&#xA;&#xA;The host-side application is the usbxpress_echo.py Python script found in the&#xA;USBXpress SDK at Examples/Echo/Host. The USBXpress SDK is available for download&#xA;at www.silabs.com/products/mcu/Pages/USBXpress.aspx.&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/usbxpress_echo/SimplicityStudio/STK3700_usbxpress_echo.slsproj,../app/mcu_example/EFM32GG_STK3700/usbxpress_echo/arm/usbxpress_echo.uvprojx,../app/mcu_example/EFM32GG_STK3700/usbxpress_echo/iar/usbxpress_echo.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_usbxpress_test_panel" description="&lt;h1&gt;&lt;b&gt;USBXpress Test Panel example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xA;It communicates with the TestPanel host application to send and receive data.&#xA;TestPanel is included in the USBXpress SDK, available for download at:&#xA;&#xA;https://www.silabs.com/products/mcu/Pages/USBXpress.aspx&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/usbxpress_test_panel/SimplicityStudio/STK3700_usbxpress_test_panel.slsproj,../app/mcu_example/EFM32GG_STK3700/usbxpress_test_panel/arm/usbxpress_test_panel.uvprojx,../app/mcu_example/EFM32GG_STK3700/usbxpress_test_panel/iar/usbxpress_test_panel.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3700_userpage" description="&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS  and demonstrates the programming of&#xA;the user page in flash. The page can be used for data such as keys, serial&#xA;numbers and other information that should not be deleted by a device erase.&#xA;&#xA;PB0 increases the main counter.&#xA;PB1 saves the main counter value to the user page and displays how many Flash writes&#xA;have been issued.&#xA;&#xA;Board:  Silicon Labs EFM32GG_STK3700 Development Kit&#xA;Device: EFM32GG990F1024&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Giant Gecko 3700 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32GG_STK3700/userpage/SimplicityStudio/STK3700_userpage.slsproj,../app/mcu_example/EFM32GG_STK3700/userpage/arm/userpage.uvprojx,../app/mcu_example/EFM32GG_STK3700/userpage/iar/userpage.eww"/>
    <properties key="core.boardCompatibility" value="brd2200a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/userpage.c"/>
  </descriptors>
  <descriptors label="STK3300_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xA;demonstrate the use of the LED on the starter kit. This example is intended as&#xA;a skeleton for new projects.&#xA;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xA;Device: EFM32TG840F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/blink/SimplicityStudio/STK3300_blink.slsproj,../app/mcu_example/EFM32TG_STK3300/blink/arm/blink.uvprojx,../app/mcu_example/EFM32TG_STK3300/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="STK3300_clock" description="&lt;h1&gt;&lt;b&gt;Wall Clock example using the segment LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS  and demonstrates  the use of &#xA;the LCD controller, RTC (real time counter), VCMP, GPIO and various &#xA;Energy Modes (EM).&#xA;&#xA;The RTC is set up to wake the EFM32 from EM2 every minute. During this &#xA;interval, the LCD is updated to reflect the current time. The animation &#xA;feature is used to show the seconds. This is done by using the frame &#xA;event counter to drive the animation feature every second.&#xA;&#xA;The VCMP is used to measure the input voltage on every wakeup. If the &#xA;voltage drops too low, voltage boost is enabled on the LCD. This makes &#xA;the LCD clear and readable even when running on low batteries.&#xA;&#xA;Board:  Silicon Labs EFM32TG_STK2100 Development Kit&#xA;Device: EFM32TG840F32 with LCD &#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/clock/SimplicityStudio/STK3300_clock.slsproj,../app/mcu_example/EFM32TG_STK3300/clock/arm/clock.uvprojx,../app/mcu_example/EFM32TG_STK3300/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/clock.c"/>
  </descriptors>
  <descriptors label="STK3300_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xA; &#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit and CPT007B Evaluation Board&#xA;Device: EFM32TG840F32&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/cpt007b/SimplicityStudio/STK3300_cpt007b_demo.slsproj,../app/mcu_example/EFM32TG_STK3300/cpt007b/arm/cpt007b_demo.uvprojx,../app/mcu_example/EFM32TG_STK3300/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="STK3300_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Mode rolling demo, with segment LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xA;demonstrate the use of the LCD controller, RTC (real time counter), GPIO and&#xA;various Energy Modes (EM) on the starter kit.&#xA;&#xA;EM2 is used for delays in between refreshing the LCD display, and a lot of&#xA;&quot;eye candy&quot; are present to show off the MCU module's LCD display.&#xA;&#xA;The LCD controller drives the display down to EM2. In the demo, EM2 is used&#xA;for &quot;most&quot; delays to show off this feature. The user can press PB0 or PB1 to&#xA;activate EM3 and EM4. EM4 requires a system reset, while PB0 again will wake&#xA;up the system  from Energy Mode 3.&#xA;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xA;Device: EFM32TG840F32&#xA;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/emlcd/SimplicityStudio/STK3300_emlcd.slsproj,../app/mcu_example/EFM32TG_STK3300/emlcd/arm/emlcd.uvprojx,../app/mcu_example/EFM32TG_STK3300/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="STK3300_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 EMLIB and demonstrates the use of the LCD &#xA;controller, RTC (real time counter), GPIO and various Energy Modes (EM).&#xA;&#xA;The user can press the pushbuttons PB0 and PB1 to select which energy mode to &#xA;demonstrate.&#xA;&#xA;This demo application has been made to give a quick demo of the&#xA;Energy Profiler from Silicon Labs and to reproduce the different &#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xA;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Development Kit&#xA;Device: EFM32TG840F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/emode/SimplicityStudio/STK3300_emode.slsproj,../app/mcu_example/EFM32TG_STK3300/emode/arm/emode.uvprojx,../app/mcu_example/EFM32TG_STK3300/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3300_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of&#xA;using FreeRTOS on a Silicon Labs MCU. The configuration uses the tickless mode&#xA;of FreeRTOS in order to enter low energy mode when idle.&#xA;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xA;Device: EFM32TG840F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/freertos_blink/SimplicityStudio/STK3300_freertos_blink.slsproj,../app/mcu_example/EFM32TG_STK3300/freertos_blink/arm/freertos_blink.uvprojx,../app/mcu_example/EFM32TG_STK3300/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3300_gpiointerrupt" description="&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show&#xA;how to handle multiple GPIO interrupts. Button PB1 sets LED on and PB0 unsets it.&#xA;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xA;Device: EFM32TG840F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/gpiointerrupt/SimplicityStudio/STK3300_gpiointerrupt.slsproj,../app/mcu_example/EFM32TG_STK3300/gpiointerrupt/arm/gpiointerrupt.uvprojx,../app/mcu_example/EFM32TG_STK3300/gpiointerrupt/iar/gpiointerrupt.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3300_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and EMLIB to demonstrate&#xA;the usage of the internal temperature sensor on Tiny Gecko devices.&#xA;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xA;temperatures due to a sensor calibration bug.&#xA;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xA;Device: EFM32TG840F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/inttemp/SimplicityStudio/STK3300_inttemp.slsproj,../app/mcu_example/EFM32TG_STK3300/inttemp/arm/inttemp.uvprojx,../app/mcu_example/EFM32TG_STK3300/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="STK3300_lcsense" description="&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xA;the LESENSE peripheral on the board.&#xA;&#xA;This demo has two different modes.&#xA;To change between them, press PB0. In Mode0 (default). The LESENSE&#xA;module will wake up whenever a metal object is passed above the LC&#xA;sensor in the bottom right of the STK. In Mode 1, the EFM32 will only&#xA;wake up every fifth time the metal object is passed over the sensor.&#xA;&#xA;Board: Silicon Labs EFM32TG_STK3300 Development Kit&#xA;Device: EFM32TG840F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/lcsense/SimplicityStudio/STK3300_lcsense.slsproj,../app/mcu_example/EFM32TG_STK3300/lcsense/arm/lcsense.uvprojx,../app/mcu_example/EFM32TG_STK3300/lcsense/iar/lcsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/lcsense.c"/>
  </descriptors>
  <descriptors label="STK3300_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project reads and sends the data back to terminal using LEUART&#xA;while staying in EM2.&#xA;&#xA;It uses the EFM32 CMSIS and EMLIB, to demonstrate the&#xA;use of LEUART communication using DMA under the EM2 on the &#xA;EFM32TG_STK3300 Starter Kit.&#xA;&#xA;The LEUART is configured to be used with DMA under EM2.&#xA;The terminal configuration is 9600-8-N-1.&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xA;&#xA;Testing:&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xA;2. Pin Configuration:&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xA;	2.3. Pin-1 Gnd&#xA;&#xA;3. Configure terminal to 9600-8-N-1.&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xA;&#xA;Board:  Silicon Labs EFM32TG_STK3300 Starter Kit&#xA;Device: EFM32TG840F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/leuart/SimplicityStudio/STK3300_leuart.slsproj,../app/mcu_example/EFM32TG_STK3300/leuart/arm/leuart.uvprojx,../app/mcu_example/EFM32TG_STK3300/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3300_lightsense" description="&lt;h1&gt;&lt;b&gt;Lightsensor example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xA;the LESENSE peripheral on the board.&#xA;&#xA;This demo has two different modes.&#xA;To change between them, press PB0. In Mode0 (default). The LESENSE&#xA;module will wake up whenever a &quot;dark&quot; event is detected by the light sensor&#xA;below the &quot;EFM32&quot; sign on the right from the LCD on the STK. In Mode 1, &#xA;EFM32 will only wake up on every fifth &quot;dark&quot; event.&#xA;&#xA;Board: Silicon Labs EFM32TG_STK3300 Development Kit&#xA;Device: EFM32TG840F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/lightsense/SimplicityStudio/STK3300_lightsense.slsproj,../app/mcu_example/EFM32TG_STK3300/lightsense/arm/lightsense.uvprojx,../app/mcu_example/EFM32TG_STK3300/lightsense/iar/lightsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/lightsense.c"/>
  </descriptors>
  <descriptors label="STK3300_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library&#xA;to demonstrate the use of the various Energy Modes available on the&#xA;EFM32TG840F32. When running this example, the Energy Profiler tool&#xA;in Simplicity Studio can be used to show the power consumption of each &#xA;energy mode.&#xA;&#xA;Board:  Silicon Labs EFM32TG-STK3300 Development Kit&#xA;Device: EFM32TG840F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/powertest/SimplicityStudio/STK3300_powertest.slsproj,../app/mcu_example/EFM32TG_STK3300/powertest/arm/powertest.uvprojx,../app/mcu_example/EFM32TG_STK3300/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3300_touch" description="&lt;h1&gt;&lt;b&gt;Capactive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example demonstrates the capacitive touch capability of the EFM32 and the&#xA;Tiny Gecko STK. This is a port of the EFM32_G8xx_STK capacitive touch demo.&#xA;&#xA;It demonstrates the use of LESENSE, ACMP, VCMP, LCD, and EMU.&#xA;&#xA;Board:  Silicon Labs EFM32TG_STK3300&#xA;Device: EFM32G840F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/touch/SimplicityStudio/STK3300_touch.slsproj,../app/mcu_example/EFM32TG_STK3300/touch/arm/touch.uvprojx,../app/mcu_example/EFM32TG_STK3300/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/touchdemo.c"/>
  </descriptors>
  <descriptors label="STK3300_userpage" description="&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS  and demonstrates the programming of&#xA;the user page in flash. The page can be used for data such as keys, serial&#xA;numbers and other information that should not be deleted by a device erase.&#xA;&#xA;PB0 increases the main counter.&#xA;PB1 saves the main counter value to the user page and displays how many Flash writes&#xA;have been issued.&#xA;&#xA;Board:  Silicon Labs EFM32-TG-STK3300 Development Kit&#xA;Device: EFM32TG840QF32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/userpage/SimplicityStudio/STK3300_userpage.slsproj,../app/mcu_example/EFM32TG_STK3300/userpage/arm/userpage.uvprojx,../app/mcu_example/EFM32TG_STK3300/userpage/iar/userpage.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/userpage.c"/>
  </descriptors>
  <descriptors label="STK3300_weatherstation" description="&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the EFM32TG-STK3300.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the LCD display on the EFM32TG_STK3300 kit. In addition, it&#xA;demonstrates the use of Silabs I2C based sensors on the expansion board&#xA;header.&#xA;&#xA;You must have a Silabs Sensor add-on board to make use of this demo.&#xA;Once the demo is started, hold your hand over the gesture sensor. Once&#xA;the sensor detects your hand the display will become active.&#xA;&#xA;Swipe left and right over the sensor to scroll through temperature, humidity&#xA;and UV index. On the temperature screen, you can swipe up or down to change&#xA;between Fahrenheit or Celcius.&#xA;&#xA;Note: Due to the size of this example, you might need to enable compiler &#xA;optimizations to be able to fit the entire binary in the 32k of flash!&#xA;&#xA;Board:  Silicon Labs EFM32TG-STK3300 Development Kit and Sensor Add-on board&#xA;Device: EFM32TG840F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Tiny Gecko 3300 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32TG_STK3300/weatherstation/SimplicityStudio/STK3300_weatherstation.slsproj,../app/mcu_example/EFM32TG_STK3300/weatherstation/arm/weatherstation.uvprojx,../app/mcu_example/EFM32TG_STK3300/weatherstation/iar/weatherstation.eww"/>
    <properties key="core.boardCompatibility" value="brd2100a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/weatherstation.c"/>
  </descriptors>
  <descriptors label="STK3800_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/blink/SimplicityStudio/STK3800_blink.slsproj,../app/mcu_example/EFM32WG_STK3800/blink/arm/blink.uvprojx,../app/mcu_example/EFM32WG_STK3800/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="STK3800_burtc" description="&lt;h1&gt;&lt;b&gt;Backup power domain RTC example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrate use of the backup power domain and the&#xD;&#xA;backup real time clock (BURTC).&#xD;&#xA;&#xD;&#xA;Start the example with the Power Source Selector switch in the &quot;DBG&quot; position.&#xD;&#xA;When the clock is running you can adjust time by pressing pushbuttons&#xD;&#xA;PB0 and PB1.&#xD;&#xA;When you move the Power Source Selector switch to the &quot;USB&quot; position, the&#xD;&#xA;EFM is turned off and the BURTC peripheral runs on power from the BU capacitor.&#xD;&#xA;(See User manual for EFM32WG-STK3800 starter kit for details on the hardware).&#xD;&#xA;When you move the Power Source Selector switch back to the &quot;DBG&quot; position, you&#xD;&#xA;can verify that time has been recorded correctly.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/burtc/SimplicityStudio/STK3800_burtc.slsproj,../app/mcu_example/EFM32WG_STK3800/burtc/arm/burtc.uvprojx,../app/mcu_example/EFM32WG_STK3800/burtc/iar/burtc.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_clock" description="&lt;h1&gt;&lt;b&gt;Wall Clock example using the segment LCD.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS  and demonstrates  the use of&#xD;&#xA;the LCD controller, RTC (real time counter), VCMP, GPIO and various&#xD;&#xA;Energy Modes (EM).&#xD;&#xA;&#xD;&#xA;The RTC is set up to wake the EFM32 from EM2 every minute. During this&#xD;&#xA;interval, the LCD is updated to reflect the current time. The animation&#xD;&#xA;feature is used to show the seconds. This is done by using the frame&#xD;&#xA;event counter to drive the animation feature every second.&#xD;&#xA;&#xD;&#xA;Time is set with pushbuttons PB0 and PB1.&#xD;&#xA; - Pushing PB0 increments minute count.&#xD;&#xA; - Pushing PB1 increments hour count.&#xD;&#xA;&#xD;&#xA;The VCMP is used to measure the input voltage on every wakeup. If the&#xD;&#xA;voltage drops too low, voltage boost is enabled on the LCD. This makes&#xD;&#xA;the LCD clear and readable even when running on low batteries.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/clock/SimplicityStudio/STK3800_clock.slsproj,../app/mcu_example/EFM32WG_STK3800/clock/arm/clock.uvprojx,../app/mcu_example/EFM32WG_STK3800/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/clock.c"/>
  </descriptors>
  <descriptors label="STK3800_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xD;&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xD;&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xD;&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xD;&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xD;&#xA; &#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit and CPT007B Evaluation Board&#xD;&#xA;Device: EFM32WG990F256&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/cpt007b/SimplicityStudio/STK3800_cpt007b_demo.slsproj,../app/mcu_example/EFM32WG_STK3800/cpt007b/arm/cpt007b_demo.uvprojx,../app/mcu_example/EFM32WG_STK3800/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="STK3800_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the capacitive sensing firmware library to sample&#xD;&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xD;&#xA;qualification status, and other state variables can be displayed and examined&#xD;&#xA;in the Capacitive Sensing Profiler tool.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/cslib/SimplicityStudio/STK3800_cslib.slsproj,../app/mcu_example/EFM32WG_STK3800/cslib/arm/cslib.uvprojx,../app/mcu_example/EFM32WG_STK3800/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with segment LCD example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LCD controller, RTC (real time counter), GPIO and&#xD;&#xA;various Energy Modes (EM) on the starter kit.&#xD;&#xA;&#xD;&#xA;EM2 is used for delays in between refreshing the LCD display, and a lot of&#xD;&#xA;&quot;eye candy&quot; are present to show off the MCU module's LCD display.&#xD;&#xA;&#xD;&#xA;The LCD controller drives the display down to EM2. In the demo, EM2 is used&#xD;&#xA;for &quot;most&quot; delays to show off this feature. The user can press PB0 or PB1 to&#xD;&#xA;activate EM3 and EM4. EM4 requires a system reset, while PB0 again will wake&#xD;&#xA;up the system  from Energy Mode 3.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32STG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/emlcd/SimplicityStudio/STK3800_emlcd.slsproj,../app/mcu_example/EFM32WG_STK3800/emlcd/arm/emlcd.uvprojx,../app/mcu_example/EFM32WG_STK3800/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="STK3800_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 EMLIB and demonstrates the use of&#xD;&#xA;the LCD controller, RTC (real time counter), GPIO and various Energy&#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;The user can press the push buttons PB0 and PB1 to select which energy&#xD;&#xA;mode to demonstrate.&#xD;&#xA;&#xD;&#xA;This demo application has been made to give a quick demo of the&#xD;&#xA;Energy Profiler from Silicon Labs and to reproduce the different &#xD;&#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/emode/SimplicityStudio/STK3800_emode.slsproj,../app/mcu_example/EFM32WG_STK3800/emode/arm/emode.uvprojx,../app/mcu_example/EFM32WG_STK3800/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of&#xD;&#xA;using FreeRTOS on a Silicon Labs MCU. The configuration uses the tickless mode&#xD;&#xA;of FreeRTOS in order to enter low energy mode when idle.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/freertos_blink/SimplicityStudio/STK3800_freertos_blink.slsproj,../app/mcu_example/EFM32WG_STK3800/freertos_blink/arm/freertos_blink.uvprojx,../app/mcu_example/EFM32WG_STK3800/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_gpiointerrupt" description="&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show&#xD;&#xA;how to handle multiple GPIO interrupts. Buttons pressing toggles LEDs.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/gpiointerrupt/SimplicityStudio/STK3800_gpiointerrupt.slsproj,../app/mcu_example/EFM32WG_STK3800/gpiointerrupt/arm/gpiointerrupt.uvprojx,../app/mcu_example/EFM32WG_STK3800/gpiointerrupt/iar/gpiointerrupt.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and EMLIB to demonstrate&#xD;&#xA;the usage of the internal temperature sensor on EFM32 Wonder Gecko&#xD;&#xA;devices.&#xD;&#xA;&#xD;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xD;&#xA;temperatures due to a sensor calibration bug.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/inttemp/SimplicityStudio/STK3800_inttemp.slsproj,../app/mcu_example/EFM32WG_STK3800/inttemp/arm/inttemp.uvprojx,../app/mcu_example/EFM32WG_STK3800/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="STK3800_lcd" description="&lt;h1&gt;&lt;b&gt;Segment LCD controller example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and EMLIB peripheral library and&#xD;&#xA;demonstrates the use of the segment LCD controller.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/lcd/SimplicityStudio/STK3800_lcd.slsproj,../app/mcu_example/EFM32WG_STK3800/lcd/arm/lcd.uvprojx,../app/mcu_example/EFM32WG_STK3800/lcd/iar/lcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lcd.c"/>
  </descriptors>
  <descriptors label="STK3800_lcsense" description="&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xD;&#xA;the LESENSE peripheral on the board.&#xD;&#xA;&#xD;&#xA;This demo has two different modes.&#xD;&#xA;To change between them, press PB1. In Mode0 (default). The LESENSE&#xD;&#xA;module will wake up whenever a metal object is passed above the LC&#xD;&#xA;sensor in the bottom right of the STK. In Mode 1, the EFM32 will only&#xD;&#xA;wake up every fifth time the metal object is passed over the sensor.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/lcsense/SimplicityStudio/STK3800_lcsense.slsproj,../app/mcu_example/EFM32WG_STK3800/lcsense/arm/lcsense.uvprojx,../app/mcu_example/EFM32WG_STK3800/lcsense/iar/lcsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lcsense.c"/>
  </descriptors>
  <descriptors label="STK3800_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project reads and sends the data back to terminal using LEUART&#xD;&#xA;while staying in EM2.&#xD;&#xA;&#xD;&#xA;It uses the EFM32 CMSIS and EMLIB, to demonstrate the&#xD;&#xA;use of LEUART communication using DMA under the EM2 on the &#xD;&#xA;EFM32WG_STK3800 Starter Kit.&#xD;&#xA;&#xD;&#xA;The LEUART is configured to be used with DMA under EM2.&#xD;&#xA;The terminal configuration is 9600-8-N-1.&#xD;&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xD;&#xA;&#xD;&#xA;Testing:&#xD;&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xD;&#xA;2. Pin Configuration:&#xD;&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xD;&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xD;&#xA;	2.3. Pin-1 Gnd&#xD;&#xA;&#xD;&#xA;3. Configure terminal to 9600-8-N-1.&#xD;&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xD;&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/leuart/SimplicityStudio/STK3800_leuart.slsproj,../app/mcu_example/EFM32WG_STK3800/leuart/arm/leuart.uvprojx,../app/mcu_example/EFM32WG_STK3800/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_lightsense" description="&lt;h1&gt;&lt;b&gt;Lightsensor example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS&#xD;&#xA;and demonstrates the use of the LESENSE peripheral on the board.&#xD;&#xA;&#xD;&#xA;This demo has two different modes.&#xD;&#xA;To change between them, press PB0. In Mode0 (default). The LESENSE&#xD;&#xA;module will wake up whenever a &quot;dark&quot; event is detected by the light sensor&#xD;&#xA;below the &quot;EFM32&quot; sign on the right from the LCD on the STK. In Mode 1,&#xD;&#xA;EFM32 will only wake up on every fifth &quot;dark&quot; event.&#xD;&#xA;&#xD;&#xA;Board: Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/lightsense/SimplicityStudio/STK3800_lightsense.slsproj,../app/mcu_example/EFM32WG_STK3800/lightsense/arm/lightsense.uvprojx,../app/mcu_example/EFM32WG_STK3800/lightsense/iar/lightsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/lightsense.c"/>
  </descriptors>
  <descriptors label="STK3800_mpu" description="&lt;h1&gt;&lt;b&gt;Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including STK BSP (board&#xD;&#xA;support package).&#xD;&#xA;&#xD;&#xA;It sets up the MPU to demonstrate usage of MPU to catch memory access&#xD;&#xA;violations. STK pushbuttons are used generate MPU faults.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/mpu/SimplicityStudio/STK3800_mpu.slsproj,../app/mcu_example/EFM32WG_STK3800/mpu/arm/mpu.uvprojx,../app/mcu_example/EFM32WG_STK3800/mpu/iar/mpu.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/mpu.c"/>
  </descriptors>
  <descriptors label="STK3800_nandflash" description="&lt;h1&gt;&lt;b&gt;Nandflash example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates use of the NANDFLASH driver.&#xD;&#xA;&#xD;&#xA;Connect a terminal to the TTL-level serialport (115200-N-8-1). Here EXP port pin 1 &#xD;&#xA;is ground, EXP port pin 4 is transmitter and EXP port pin 6 is reciever.&#xD;&#xA;&#xD;&#xA;Operations on the flash are initiated by issuing commands on the terminal.&#xD;&#xA;Command &quot;h&quot; will print a help screen on the terminal :&#xD;&#xA;&#xD;&#xA;    Available commands:&#xD;&#xA;        fi         : Show NAND flash device information&#xD;&#xA;        h          : Show this help&#xD;&#xA;        rp n       : Read page n&#xD;&#xA;        bp n       : Blankcheck page n&#xD;&#xA;        bd         : Blankcheck entire device&#xD;&#xA;        bb         : Check bad-block info&#xD;&#xA;        mb n       : Mark block n as bad&#xD;&#xA;        wp n       : Write page n&#xD;&#xA;        eb n       : Erase block n&#xD;&#xA;        ecc n      : Check ECC algorithm, uses page n and n+1&#xD;&#xA;        cp m n     : Copy page m to page n&#xD;&#xA;&#xD;&#xA;Note that the nandflash device used on this kit has 32 pages per block, so&#xD;&#xA;pages 0-31 belongs to block 0.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/nandflash/SimplicityStudio/STK3800_nandflash.slsproj,../app/mcu_example/EFM32WG_STK3800/nandflash/arm/nandflash.uvprojx,../app/mcu_example/EFM32WG_STK3800/nandflash/iar/nandflash.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32WG990F256. When running this example, the Energy Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each&#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/powertest/SimplicityStudio/STK3800_powertest.slsproj,../app/mcu_example/EFM32WG_STK3800/powertest/arm/powertest.uvprojx,../app/mcu_example/EFM32WG_STK3800/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_touch" description="&lt;h1&gt;&lt;b&gt;Capactive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates the capacitive touch capability of the EFM32 and the&#xD;&#xA;Tiny Gecko STK. This is a port of the EFM32_G8xx_STK capacitive touch demo.&#xD;&#xA;&#xD;&#xA;It demonstrates the use of LESENSE, ACMP, VCMP, LCD, and EMU.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/touch/SimplicityStudio/STK3800_touch.slsproj,../app/mcu_example/EFM32WG_STK3800/touch/arm/touch.uvprojx,../app/mcu_example/EFM32WG_STK3800/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/touchdemo.c"/>
  </descriptors>
  <descriptors label="STK3800_usbdcomposite" description="&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a composite USB device with tree functions:&#xD;&#xA;&#xD;&#xA; - Mass storage class device (MSD) implementing a disk in internal flash memory.&#xD;&#xA; - Communication device class (CDC) implementing a USB to UART bridge&#xD;&#xA; - Vendor Unique Device similar to the usbdvud example (control STK leds).&#xD;&#xA;&#xD;&#xA;As the CDC function has two interface, the CDC function use an Interface&#xD;&#xA;Association Descriptor (IAD). A composite device which use IAD's must be&#xD;&#xA;implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The vendor unique function (VUD).&#xD;&#xA;=================================&#xD;&#xA;Toggles user LED's 0 and 1 when receiving vendor unique class setup commands.&#xD;&#xA;Intended to be used together with the &quot;libusb&quot; device driver, and host&#xD;&#xA;application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud&#xD;&#xA;example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud&#xD;&#xA;example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00&#xD;&#xA;are specified.&#xD;&#xA;&#xD;&#xA;The CDC COM port function.&#xD;&#xA;==========================&#xD;&#xA;Implements an USB CDC based virtual COM port. USART1 on the STK is used as the&#xD;&#xA;physical COM port. Any data sent to the virtual CDC COM port is transmitted on&#xD;&#xA;USART1. Any data received on USART1 is transmitted to the virtual port.&#xD;&#xA;USART1 is available on the STK EXT port. EXT pin 4 is Tx, pin 6 is Rx.&#xD;&#xA;NOTE: This is a TTL level USART, DO NOT CONNECT DIRECTLY TO RS232 PORTS !&#xD;&#xA;&#xD;&#xA;USB Mass Storage Device function.&#xD;&#xA;=================================&#xD;&#xA;Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Windows driver installation.&#xD;&#xA;============================&#xD;&#xA;The first time the composite USB device is connected to the host, Windows must&#xD;&#xA;install drivers for the VUD and CDC functions.&#xD;&#xA;&#xD;&#xA;To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;&#xD;&#xA;device driver. Manually direct Windows to look for this driver in the &quot;host&quot;&#xD;&#xA;folder of the usbdvud example.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on one of functions&#xD;&#xA;of the new composite device (marked with yellow exclamation mark) and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;After libusb is installed you can start EFM32-LedApp.exe to control leds on&#xD;&#xA;the STK.&#xD;&#xA;&#xD;&#xA;Similarly for the CDC function, direct Windows to look for a driver in the&#xD;&#xA;folder where you have your copy of the &quot;EFM32-Cdc.inf&quot; file (same folder as&#xD;&#xA;this readme file, unzip the Silabs-CDC_Install.zip).&#xD;&#xA;Note how the .inf file specifies interface number 2, VID_10C4&amp;PID_0008&amp;MI_02.&#xD;&#xA;When the serial port driver is succesfully installed, the device will be listed&#xD;&#xA;as a &quot;Ports&quot; device in Device Manager, double-click it, select the&#xD;&#xA;&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port&#xD;&#xA;properties.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/usbdcomposite/SimplicityStudio/STK3800_usbdcomposite.slsproj,../app/mcu_example/EFM32WG_STK3800/usbdcomposite/arm/usbdcomposite.uvprojx,../app/mcu_example/EFM32WG_STK3800/usbdcomposite/iar/usbdcomposite.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_usbdhidkbd" description="&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB HID class keyboard device (one button !).&#xD;&#xA;&#xD;&#xA;PB0 is the keyboard button. Pressing this button will succesively write&#xD;&#xA;&quot;Silicon Labs - &quot;.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/usbdhidkbd/SimplicityStudio/STK3800_usbdhidkbd.slsproj,../app/mcu_example/EFM32WG_STK3800/usbdhidkbd/arm/usbdhidkbd.uvprojx,../app/mcu_example/EFM32WG_STK3800/usbdhidkbd/iar/usbdhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_usbdmsd" description="&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;to implement a device Mass Storage Class device (MSD).&#xD;&#xA;&#xD;&#xA;The example provides two different MSD types.&#xD;&#xA;&#xD;&#xA; - A 96KByte &quot;disk&quot; in internal SRAM (on devices with 128 kByte or larger SRAM)&#xD;&#xA; - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)&#xD;&#xA;&#xD;&#xA;Select mediatype in msddmedia.h (#define MSD_MEDIA)&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/usbdmsd/SimplicityStudio/STK3800_usbdmsd.slsproj,../app/mcu_example/EFM32WG_STK3800/usbdmsd/arm/usbdmsd.uvprojx,../app/mcu_example/EFM32WG_STK3800/usbdmsd/iar/usbdmsd.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_usbdvud" description="&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use the EFM32 USB Device protocol stack&#xD;&#xA;and implements an USB Vendor Unique Device.&#xD;&#xA;&#xD;&#xA;The example will toggle LED's 0 and 1 when receiving vendor unique class&#xD;&#xA;setup commands.&#xD;&#xA;&#xD;&#xA;This example is intended to be used together with the &quot;libusb&quot; device driver,&#xD;&#xA;and host application EFM32-LedApp.exe (a Windows application).&#xD;&#xA;&#xD;&#xA;The first time the USB device is connected to the host, you must tell the host&#xD;&#xA;OS to install the &quot;libusb&quot; device driver.&#xD;&#xA;&#xD;&#xA;On Windows, you can follow this procedure:&#xD;&#xA;Insert the device, and manually direct Windows to look for drivers in the&#xD;&#xA;directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.&#xD;&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xD;&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xD;&#xA;select &quot;Update Driver Software...&quot;.&#xD;&#xA;&#xD;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xD;&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xD;&#xA;Win7:&#xD;&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xD;&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xD;&#xA;Win10:&#xD;&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xD;&#xA;When computer has restarted into the options menu, select:&#xD;&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xD;&#xA;You should now be able to install an unsigned driver.&#xD;&#xA;&#xD;&#xA;After libusb is installed, start EFM32-LedApp.exe.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/usbdvud/SimplicityStudio/STK3800_usbdvud.slsproj,../app/mcu_example/EFM32WG_STK3800/usbdvud/arm/usbdvud.uvprojx,../app/mcu_example/EFM32WG_STK3800/usbdvud/iar/usbdvud.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_usbhenum" description="&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the USB host stack to implement&#xD;&#xA;a simple device enumerator. When a device is attached its descriptors are read&#xD;&#xA;and the vendor and product id's (VID/PID) are displayed on the LCD.&#xD;&#xA;The device attached will not be configured.&#xD;&#xA;&#xD;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xD;&#xA;when attached.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG-STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/usbhenum/SimplicityStudio/STK3800_usbhenum.slsproj,../app/mcu_example/EFM32WG_STK3800/usbhenum/arm/usbhenum.uvprojx,../app/mcu_example/EFM32WG_STK3800/usbhenum/iar/usbhenum.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_usbxpress_echo" description="&lt;h1&gt;&lt;b&gt;USBXpress Echo example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xD;&#xA;It echoes all received data back to the host that sent it.&#xD;&#xA;&#xD;&#xA;The host-side application is the usbxpress_echo.py Python script found in the&#xD;&#xA;USBXpress SDK at Examples/Echo/Host. The USBXpress SDK is available for download&#xD;&#xA;at www.silabs.com/products/mcu/Pages/USBXpress.aspx.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/usbxpress_echo/SimplicityStudio/STK3800_usbxpress_echo.slsproj,../app/mcu_example/EFM32WG_STK3800/usbxpress_echo/arm/usbxpress_echo.uvprojx,../app/mcu_example/EFM32WG_STK3800/usbxpress_echo/iar/usbxpress_echo.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_usbxpress_test_panel" description="&lt;h1&gt;&lt;b&gt;USBXpress Test Panel example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xD;&#xA;It communicates with the TestPanel host application to send and receive data.&#xD;&#xA;TestPanel is included in the USBXpress SDK, available for download at:&#xD;&#xA;&#xD;&#xA;https://www.silabs.com/products/mcu/Pages/USBXpress.aspx&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/usbxpress_test_panel/SimplicityStudio/STK3800_usbxpress_test_panel.slsproj,../app/mcu_example/EFM32WG_STK3800/usbxpress_test_panel/arm/usbxpress_test_panel.uvprojx,../app/mcu_example/EFM32WG_STK3800/usbxpress_test_panel/iar/usbxpress_test_panel.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3800_userpage" description="&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS  and demonstrates the programming of&#xD;&#xA;the user page in flash. The page can be used for data such as keys, serial&#xD;&#xA;numbers and other information that should not be deleted by a device erase.&#xD;&#xA;&#xD;&#xA;PB0 increases the main counter.&#xD;&#xA;PB1 saves the main counter value to the user page and displays how many Flash writes&#xD;&#xA;have been issued.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Development Kit&#xD;&#xA;Device: EFM32WG990F256&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/userpage/SimplicityStudio/STK3800_userpage.slsproj,../app/mcu_example/EFM32WG_STK3800/userpage/arm/userpage.uvprojx,../app/mcu_example/EFM32WG_STK3800/userpage/iar/userpage.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/userpage.c"/>
  </descriptors>
  <descriptors label="STK3800_biometric" description="&lt;h1&gt;&lt;b&gt;Biometric Demo using the Biometric Sensor add-on board for the EFM32WG STK3800.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the LCD display on the EFM32WG_STK3800 kit. In addition, it demonstrates the &#xA;use of Silicon Labs I2C based sensors on the expansion board header.&#xA;&#xA;You must have a Silicon Labs Biometric Sensor add-on board to make use of this demo.&#xA;Once the demo is started, push button PB0 to change what is displayed. While&#xA;on the heart rate monitor display hold your finger on the proximity sensor to &#xA;measure heart rate.&#xA;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit and Sensor Add-on board&#xA;Device: EFM32WG990F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/biometric/SimplicityStudio/STK3800_biometric.slsproj,../app/mcu_example/EFM32WG_STK3800/biometric/arm/biometric.uvprojx,../app/mcu_example/EFM32WG_STK3800/biometric/iar/biometric.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/biometric_demo.c"/>
  </descriptors>
  <descriptors label="STK3800_lightsensefft_softfloat" description="&lt;h1&gt;&lt;b&gt;Lightsensor example with FFT transform.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and ARM's DSP lib to demonstrate&#xA;floating point FFT and sinc interpolation.&#xA;&#xA;Connect the light sensor output to the ADC input by shorting pins&#xA;15 and 14 on the EXP_HEADER of the STK.&#xA;Direct various light sources to the light sensor. Expect no specific&#xA;frequency from daylight or from a flashlight. Mains powered incandescent bulbs&#xA;should give twice the mains frequency. Using another STK running the&#xA;&quot;blink&quot; example modified to various blink rates is an excellent signal source.&#xA;The frequency bandwidth is approximately 10-500 Hz.&#xA;The frequency shows in the 4 digit numerical display upper right on&#xA;the LCD. The LCD also displays the number of cpu cycles used to do&#xA;the FFT transform.&#xA;&#xA;You can of course run this example without connecting the light sensor to&#xA;the ADC, you will still be able to measure the cpu cycle count used to do&#xA;the FFT transform.&#xA;&#xA;Experiment using hard and soft floating point math and see the difference&#xA;in cpu cycle count.&#xA;&#xA;Board: Silicon Labs EFM32WG_STK3800 Development Kit&#xA;Device: EFM32WG990F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/lightsensefft/SimplicityStudio/STK3800_lightsensefft_hardfloat.slsproj,../app/mcu_example/EFM32WG_STK3800/lightsensefft/arm/lightsensefft_hardfloat.uvprojx,../app/mcu_example/EFM32WG_STK3800/lightsensefft/arm/lightsensefft_softfloat.uvprojx,../app/mcu_example/EFM32WG_STK3800/lightsensefft/iar/lightsensefft.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/lightsensefft.c"/>
  </descriptors>
  <descriptors label="STK3800_lightsensefft_hardfloat" description="&lt;h1&gt;&lt;b&gt;Lightsensor example with FFT transform.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and ARM's DSP lib to demonstrate&#xA;floating point FFT and sinc interpolation.&#xA;&#xA;Connect the light sensor output to the ADC input by shorting pins&#xA;15 and 14 on the EXP_HEADER of the STK.&#xA;Direct various light sources to the light sensor. Expect no specific&#xA;frequency from daylight or from a flashlight. Mains powered incandescent bulbs&#xA;should give twice the mains frequency. Using another STK running the&#xA;&quot;blink&quot; example modified to various blink rates is an excellent signal source.&#xA;The frequency bandwidth is approximately 10-500 Hz.&#xA;The frequency shows in the 4 digit numerical display upper right on&#xA;the LCD. The LCD also displays the number of cpu cycles used to do&#xA;the FFT transform.&#xA;&#xA;You can of course run this example without connecting the light sensor to&#xA;the ADC, you will still be able to measure the cpu cycle count used to do&#xA;the FFT transform.&#xA;&#xA;Experiment using hard and soft floating point math and see the difference&#xA;in cpu cycle count.&#xA;&#xA;Board: Silicon Labs EFM32WG_STK3800 Development Kit&#xA;Device: EFM32WG990F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/lightsensefft/SimplicityStudio/STK3800_lightsensefft_hardfloat.slsproj,../app/mcu_example/EFM32WG_STK3800/lightsensefft/arm/lightsensefft_hardfloat.uvprojx,../app/mcu_example/EFM32WG_STK3800/lightsensefft/arm/lightsensefft_softfloat.uvprojx,../app/mcu_example/EFM32WG_STK3800/lightsensefft/iar/lightsensefft.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/lightsensefft.c"/>
  </descriptors>
  <descriptors label="STK3800_rs232_isolated" description="&lt;h1&gt;&lt;b&gt;RS232 Isolated Example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This is an example for the EFM32WG_STK3800 Wonder Gecko Starter Kit attached&#xA;to the Isolated-RS-EXP. It uses the UART port to communicate over isolation to&#xA;an RS232 tranciever. The buttons send characters and the screen shows &#xA;receieved characters. Use a terminal program like putty at 115200 baud to send&#xA;and recieve characters. Lower case characters are converted to upper case before&#xA;being printed to the screen. Alternatively, use 2 Isolated-RS-EXPs to &#xA;communicate between each other. On the Isolated-RS-EXP, all the jumpers on J1 &#xA;and J2 need to be populated except the SH jumper. If there is not a 2nd device &#xA;or host to read the RS232 messages, populating JP1 and JP2 will cause the &#xA;messages to return to the Starter Kit to be read.&#xA;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xA;Device: EFM32WG990F256&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/rs232_isolated/SimplicityStudio/STK3800_rs232_isolated.slsproj,../app/mcu_example/EFM32WG_STK3800/rs232_isolated/arm/rs232_isolated.uvprojx,../app/mcu_example/EFM32WG_STK3800/rs232_isolated/iar/rs232_isolated.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rs232_isolated.c"/>
  </descriptors>
  <descriptors label="STK3800_rs485_isolated" description="&lt;h1&gt;&lt;b&gt;RS485 Isolated Example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This is an example for the EFM32WG_STK3800 Wonder Gecko Starter Kit attached &#xA;to the Isolated-RS-EXP. It uses the LEUART port to communicate over isolation&#xA;to an RS485 tranciever. The push buttons send characters over the isolation &#xA;barrier.  The screen will update with received characters. Lower case &#xA;characters are converted to upper case before being printed on the screen. &#xA;Connect the EXP boards to an RS485 host at 9600 baud. Alternatively connect 2 &#xA;Isolated-RS-EXPs together and communicate between the two. On the &#xA;Isolated-RS-EXP, all the jumpers on J3 and J4 need to be populated except the &#xA;SH jumper.&#xA;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xA;Device: EFM32WG990F256&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/rs485_isolated/SimplicityStudio/STK3800_rs485_isolated.slsproj,../app/mcu_example/EFM32WG_STK3800/rs485_isolated/arm/rs485_isolated.uvprojx,../app/mcu_example/EFM32WG_STK3800/rs485_isolated/iar/rs485_isolated.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/rs485_isolated.c"/>
  </descriptors>
  <descriptors label="STK3800_usb_isolated" description="&lt;h1&gt;&lt;b&gt;RS232 Isolated Example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This is an example for the EFM32WG_STK3800 Wonder Gecko Starter Kit attached to&#xA;the Isolated-USB-EXP. It uses the LEUART port to communicate over isolation to &#xA;a USB-UART bridge. Program the EFM32 WG STK with this demo. Unplug the STK and &#xA;connect the Isolated-USB-EXP to the EFM32 WG STK.  Then, connect the USB cable &#xA;to the EXP board, open a com port to it at 115200 baud. You can enter messages to &#xA;the kit and after pressing &quot;enter&quot; the kit will return your message. On the &#xA;Isolated-USB-EXP, all the jumpers on J2 and J3 need to be populated except the &#xA;SH jumper. If there is no USB host to read the messages, pupolating JP2 will &#xA;send the messages back to the Starter Kit.&#xA;&#xA;Board:  Silicon Labs EFM32WG_STK3800 Starter Kit&#xA;Device: EFM32WG990F256&lt;/pre&gt;">
    <properties key="template.category" value="Wonder Gecko 3800 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32WG_STK3800/usb_isolated/SimplicityStudio/STK3800_usb_isolated.slsproj,../app/mcu_example/EFM32WG_STK3800/usb_isolated/arm/usb_isolated.uvprojx,../app/mcu_example/EFM32WG_STK3800/usb_isolated/iar/usb_isolated.eww"/>
    <properties key="core.boardCompatibility" value="brd2400a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/usb_isolated.c"/>
  </descriptors>
  <descriptors label="STK3200_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xA;a skeleton for new projects.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/blink/SimplicityStudio/STK3200_blink.slsproj,../app/mcu_example/EFM32ZG_STK3200/blink/arm/blink.uvprojx,../app/mcu_example/EFM32ZG_STK3200/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="STK3200_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the EFM32ZG_STK3200.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display on the EFM32ZG_STK3200 kit.&#xA;&#xA;The user can switch between analog and digital clock modes by pushing&#xA;the PB0 button.&#xA;&#xA;The user can increment the second count by pushing the PB1 button.&#xA;The minute count can be incremented by pushing the PB1 button for more&#xA;than 2 seconds.&#xA;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xA;and second pointers on the background which is a bitmap in flash memory.&#xA;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xA;only) of the textdisplay driver.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Development Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/clock/SimplicityStudio/STK3200_clock.slsproj,../app/mcu_example/EFM32ZG_STK3200/clock/arm/clock.uvprojx,../app/mcu_example/EFM32ZG_STK3200/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xA; &#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit and CPT007B Evaluation Board&#xA;Device: EFM32ZG222F32&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/cpt007b/SimplicityStudio/STK3200_cpt007b_demo.slsproj,../app/mcu_example/EFM32ZG_STK3200/cpt007b/arm/cpt007b_demo.uvprojx,../app/mcu_example/EFM32ZG_STK3200/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="STK3200_cpt112s_demo" description="&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This demo demonstrates the capacitive button function of CPT112S fixed&#xA;function board. This demo runs on the EFM32 STK,and communicates with&#xA;CPT112S through the SMBUS pins on the EXP header. Virtual buttons on&#xA;STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S&#xA;are pressed or released.&#xA; &#xA;This demo supports 11 buttons on the CPT112S device.(The CS11 button is&#xA;disabled in the default configuration of the board to enable the buzzer)&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit and CPT112S Evaluation Board&#xA;Device: EFM32ZG222F32&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/cpt112s/SimplicityStudio/STK3200_cpt112s_demo.slsproj,../app/mcu_example/EFM32ZG_STK3200/cpt112s/arm/cpt112s_demo.uvprojx,../app/mcu_example/EFM32ZG_STK3200/cpt112s/iar/cpt112s_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt112s_demo.c"/>
  </descriptors>
  <descriptors label="STK3200_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the capacitive sensing firmware library to sample&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xA;qualification status, and other state variables can be displayed and examined&#xA;in the Capacitive Sensing Profiler tool.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/cslib/SimplicityStudio/STK3200_cslib.slsproj,../app/mcu_example/EFM32ZG_STK3200/cslib/arm/cslib.uvprojx,../app/mcu_example/EFM32ZG_STK3200/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with LCD display example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xA;demonstrate the use of the LCD, RTC (real time counter), GPIO and&#xA;various Energy Modes on the starter kit.&#xA;&#xA;The example will cycle through Energy Mode EM0-EM3, staying one second in&#xA;each mode. PB0 can be pressed anytime to enter EM4.&#xA;Wakeup from EM4 is either by reset pushbutton or by GPIO pin (port C bit 9)&#xA;connected to pushbutton PB1.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Development Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/emlcd/SimplicityStudio/STK3200_emlcd.slsproj,../app/mcu_example/EFM32ZG_STK3200/emlcd/arm/emlcd.uvprojx,../app/mcu_example/EFM32ZG_STK3200/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="STK3200_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 EMLIB and demonstrates the use of&#xA;the LCD display, RTC (real time counter), GPIO and various Energy&#xA;Modes (EM).&#xA;&#xA;Use PB1 to cycle through the energy mode tests available.&#xA;Press PB0 to start selected test.&#xA;&#xA;This demo application has been made to give a quick demo of the&#xA;Energy Profiler from Silicon Labs and to reproduce the different &#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Development Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/emode/SimplicityStudio/STK3200_emode.slsproj,../app/mcu_example/EFM32ZG_STK3200/emode/arm/emode.uvprojx,../app/mcu_example/EFM32ZG_STK3200/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of&#xA;using FreeRTOS on a Silicon Labs MCU. The configuration uses the tickless mode&#xA;of FreeRTOS in order to enter low energy mode when idle.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/freertos_blink/SimplicityStudio/STK3200_freertos_blink.slsproj,../app/mcu_example/EFM32ZG_STK3200/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_glib" description="&lt;h1&gt;&lt;b&gt;GLIB example using the Sharp Memory LCD on the EFM32ZG_STK3200.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the GLIB library and the DISPLAY device driver&#xA;together with EFM32 CMSIS including EMLIB and board support package support&#xA;functions/drivers to demonstrate driving the Sharp Memory LCD display on&#xA;the EFM32ZG_STK3200 kit.&#xA;&#xA;The user can switch trough different GLIB example screens by pushing the PB1 button.&#xA;The user can reset the demo by pushing the PB0 button.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Development Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/glib/SimplicityStudio/STK3200_glib.slsproj,../app/mcu_example/EFM32ZG_STK3200/glib/arm/glib.uvprojx,../app/mcu_example/EFM32ZG_STK3200/glib/iar/glib.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and EMLIB to demonstrate&#xA;the usage of the internal temperature sensor on EFM32 Zero Gecko devices.&#xA;&#xA;Measurement results are presented on the LCD display, hit PB0 to display&#xA;values in Celsius (default) or PB1 for Fahrenheit.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/inttemp/SimplicityStudio/STK3200_inttemp.slsproj,../app/mcu_example/EFM32ZG_STK3200/inttemp/arm/inttemp.uvprojx,../app/mcu_example/EFM32ZG_STK3200/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project reads and sends the data back to terminal using LEUART&#xA;while staying in EM2.&#xA;&#xA;It uses the EFM32 CMSIS and EMLIB, to demonstrate the&#xA;use of LEUART communication using DMA under the EM2 on the &#xA;EFM32ZG_STK3200 Starter Kit.&#xA;&#xA;The LEUART is configured to be used with DMA under EM2.&#xA;The terminal configuration is 9600-8-N-1.&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xA;&#xA;Testing:&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xA;2. Pin Configuration:&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xA;	2.3. Pin-1 Gnd&#xA;&#xA;3. Configure terminal to 9600-8-N-1.&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/leuart/SimplicityStudio/STK3200_leuart.slsproj,../app/mcu_example/EFM32ZG_STK3200/leuart/arm/leuart.uvprojx,../app/mcu_example/EFM32ZG_STK3200/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library&#xA;to demonstrate the use of the various Energy Modes available on the&#xA;EFM32ZG222F32. When running this example, the Energy Profiler tool&#xA;in Simplicity Studio can be used to show the power consumption of each&#xA;energy mode.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/powertest/SimplicityStudio/STK3200_powertest.slsproj,../app/mcu_example/EFM32ZG_STK3200/powertest/arm/powertest.uvprojx,../app/mcu_example/EFM32ZG_STK3200/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_spaceinvaders" description="&lt;h1&gt;&lt;b&gt;Space Invaders game using the Memory LCD on the EFM32ZG_STK3200.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display on the EFM32ZG_STK3200 kit.&#xA;&#xA;Game instructions are displayed on the startup screen.&#xA;&#xA;For debug builds the game may run slow because they are not optimized&#xA;for speed. The user should build and run the release builds for&#xA;optimized performance.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Development Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/spaceinvaders/SimplicityStudio/STK3200_spaceinvaders.slsproj,../app/mcu_example/EFM32ZG_STK3200/spaceinvaders/arm/spaceinvaders.uvprojx,../app/mcu_example/EFM32ZG_STK3200/spaceinvaders/iar/spaceinvaders.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_textdisplay" description="&lt;h1&gt;&lt;b&gt;Printf output on Sharp Memory LCD LS013B7DH03.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display on the EFM32 Zero Gecko. In this case the&#xA;display is used as output from a regular printf in the application, as&#xA;an alternative to the RS232 port.&#xA;&#xA;The user can customize the behaviour of the DISPLAY driver by changing&#xA;configuration macros in displayconfigapp.h.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Development Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/textdisplay/SimplicityStudio/STK3200_textdisplay.slsproj,../app/mcu_example/EFM32ZG_STK3200/textdisplay/arm/textdisplay.uvprojx,../app/mcu_example/EFM32ZG_STK3200/textdisplay/iar/textdisplay.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_touch" description="&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example demonstrates the capacitive touch capability&#xA;of the EFM32 Zero Gecko Starter Kit.&#xA;&#xA;It demonstrates the use of CAPSENSE and DISPLAY drivers.&#xA;Pressing T1/T2 touch pads will decrease/increase the counter shown on the LCD.&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/touch/SimplicityStudio/STK3200_touch.slsproj,../app/mcu_example/EFM32ZG_STK3200/touch/arm/touch.uvprojx,../app/mcu_example/EFM32ZG_STK3200/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STK3200_weatherstation" description="&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the EFM32ZG_STK3200.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display on the EFM32ZG_STK3200 kit. In addition, it&#xA;demonstrates the use of Silabs I2C based sensors on the expansion board&#xA;header.&#xA;&#xA;You must have a Silabs Sensor add-on board to make use of this demo.&#xA;Once the demo is started, hold your hand over the gesture sensor. Once&#xA;the sensor detects your hand the display will become active.&#xA;&#xA;Swipe left and right over the sensor to scroll through temperature, humidity&#xA;and UV index. On the temperature screen, you can swipe up or down to change&#xA;between Fahrenheit or Celcius.&#xA;&#xA;Note: Due to the size of this example, you might need to enable compiler&#xA;optimizations to be able to fit the entire binary in the 32k of flash!&#xA;&#xA;Board:  Silicon Labs EFM32ZG_STK3200 Development Kit and Sensor Add-on board&#xA;Device: EFM32ZG222F32&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Zero Gecko 3200 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32ZG_STK3200/weatherstation/SimplicityStudio/STK3200_weatherstation.slsproj,../app/mcu_example/EFM32ZG_STK3200/weatherstation/arm/weatherstation.uvprojx,../app/mcu_example/EFM32ZG_STK3200/weatherstation/iar/weatherstation.eww"/>
    <properties key="core.boardCompatibility" value="brd2010a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/weatherstation.c"/>
  </descriptors>
  <descriptors label="STKXXX_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and demonstrates  the use of &#xA;the LEDs on the board. This example is intended as a skeleton for new &#xA;projects.&#xA;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xA;Device: EFM32G890F128&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/blink/SimplicityStudio/STKXXX_blink.slsproj,../app/mcu_example/EFM32_Gxxx_STK/blink/arm/blink.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="STKXXX_clock" description="&lt;h1&gt;&lt;b&gt;Simple Digital Clock using the LCD and EM2.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of&#xA;the LCD controller, RTC (real time counter), VCMP, GPIO and various &#xA;Energy Modes (EM).&#xA;&#xA;The RTC is set up to wake the EFM32 from EM2 every minute. During this &#xA;interval, the LCD is updated to reflect the current time. The animation&#xA;feature is used to show the seconds. This is done by using the frame&#xA;event counter to drive the animation feature every second.&#xA;&#xA;The VCMP is used to measure the input voltage on every wakeup. If the &#xA;voltage drops too low, voltage boost is enabled on the LCD. This makes the &#xA;LCD clear and readable even when running on low batteries.&#xA;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xA;Device: EFM32G890F128 with LCD &#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/clock/SimplicityStudio/STKXXX_clock.slsproj,../app/mcu_example/EFM32_Gxxx_STK/clock/arm/clock.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="root/clock.c"/>
  </descriptors>
  <descriptors label="STKXXX_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xA; &#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit and CPT007B Evaluation Board&#xA;Device: EFM32G890F128&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/cpt007b/SimplicityStudio/STKXXX_cpt007b_demo.slsproj,../app/mcu_example/EFM32_Gxxx_STK/cpt007b/arm/cpt007b_demo.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="STKXXX_cpt112s_demo" description="&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This demo demonstrates the capacitive button function of CPT112S fixed&#xA;function board. This demo runs on the EFM32 STK,and communicates with&#xA;CPT112S through the SMBUS pins on the EXP header. Virtual buttons on&#xA;STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S&#xA;are pressed or released.&#xA; &#xA;This demo supports 11 buttons on the CPT112S device.(The CS11 button is&#xA;disabled in the default configuration of the board to enable the buzzer)&#xA;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit and CPT112S Evaluation Board&#xA;Device: EFM32G890F128&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/cpt112s/SimplicityStudio/STKXXX_cpt112s_demo.slsproj,../app/mcu_example/EFM32_Gxxx_STK/cpt112s/arm/cpt112s_demo.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/cpt112s/iar/cpt112s_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt112s_demo.c"/>
  </descriptors>
  <descriptors label="STKXXX_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with segment LCD example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xA;the LCD controller, RTC (real time counter), GPIO and various Energy &#xA;Modes (EM).&#xA;&#xA;EM2 is used for delays in between refreshing the LCD display, and a lot&#xA;of &quot;eye candy&quot; are present to show off the MCU module's LCD display.&#xA;&#xA;The LCD controller drives the display down to EM2. In the demo, EM2 is &#xA;used for &quot;most&quot; delays to show off this feature. The user can press PB0&#xA;or PB1 to activate EM3 and EM4. EM4 requires a system reset, while PB0 &#xA;again will wake up the system from Energy Mode 3.&#xA;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xA;Device: EFM32G890F128 with LCD &#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/emlcd/SimplicityStudio/STKXXX_emlcd.slsproj,../app/mcu_example/EFM32_Gxxx_STK/emlcd/arm/emlcd.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="STKXXX_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 EMLIB and demonstrates the use of &#xA;the LCD controller, RTC (real time counter), GPIO and various Energy &#xA;Modes (EM).&#xA;&#xA;The user can press the pushbuttons PB0 and PB1 to select which energy &#xA;mode to demonstrate.&#xA;&#xA;This demo application has been made to give a quick demo of the &#xA;Energy Profiler from Silicon Labs and to reproduce the different &#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xA;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xA;Device: EFM32G890F128 with LCD &#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/emode/SimplicityStudio/STKXXX_emode.slsproj,../app/mcu_example/EFM32_Gxxx_STK/emode/arm/emode.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STKXXX_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of&#xA;using FreeRTOS on a Silicon Labs MCU. The configuration uses the tickless mode&#xA;of FreeRTOS in order to enter low energy mode when idle.&#xA;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xA;Device: EFM32G890F128&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/freertos_blink/SimplicityStudio/STKXXX_freertos_blink.slsproj,../app/mcu_example/EFM32_Gxxx_STK/freertos_blink/arm/freertos_blink.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STKXXX_gpiointerrupt" description="&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show&#xA;how to handle multiple GPIO interrupts. Buttons pressing toggles LED0 and LED1.&#xA;&#xA;Board:  Silicon Labs EFM32_Gxxx_STK Starter Kit&#xA;Device: &quot;EFM32G890F128&quot;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/gpiointerrupt/SimplicityStudio/STKXXX_gpiointerrupt.slsproj,../app/mcu_example/EFM32_Gxxx_STK/gpiointerrupt/arm/gpiointerrupt.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/gpiointerrupt/iar/gpiointerrupt.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STKXXX_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and EMLIB to demonstrate&#xA;the usage of the internal temperature sensor on rev.C EFM32 Gecko&#xA;devices.&#xA;&#xA;Note: EFM32 devices with production ID lower than 18 may measure inaccurate&#xA;temperatures due to a sensor calibration bug.&#xA;&#xA;Board:  Silicon Labs EFM32-G8xx-STK Starter Kit&#xA;Device: EFM32G890F128&#xA;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/inttemp/SimplicityStudio/STKXXX_inttemp.slsproj,../app/mcu_example/EFM32_Gxxx_STK/inttemp/arm/inttemp.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="STKXXX_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project reads and sends the data back to terminal using LEUART&#xA;while staying in EM2.&#xA;&#xA;It uses the EFM32 CMSIS and EMLIB, to demonstrate the&#xA;use of LEUART communication using DMA under the EM2 on the &#xA;EFM32_Gxxx_STK Starter Kit.&#xA;&#xA;The LEUART is configured to be used with DMA under EM2.&#xA;The terminal configuration is 9600-8-N-1.&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xA;&#xA;Testing:&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xA;2. Pin Configuration:&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xA;	2.3. Pin-1 Gnd&#xA;&#xA;3. Configure terminal to 9600-8-N-1.&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xA;&#xA;Board:  Silicon Labs EFM32_Gxxx_STK Starter Kit&#xA;Device: EFM32G890F128&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/leuart/SimplicityStudio/STKXXX_leuart.slsproj,../app/mcu_example/EFM32_Gxxx_STK/leuart/arm/leuart.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STKXXX_mpu" description="&lt;h1&gt;&lt;b&gt;Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including the STK BSP (board support&#xA;package). It sets up the MPU to demonstrate usage of the MPU to catch memory&#xA;access violations. The STK push-buttons (PB0 and PB1) are used to generate MPU&#xA;faults.&#xA;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xA;Device: EFM32G890F128&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/mpu/SimplicityStudio/STKXXX_mpu.slsproj,../app/mcu_example/EFM32_Gxxx_STK/mpu/arm/mpu.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/mpu/iar/mpu.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/mpu.c"/>
  </descriptors>
  <descriptors label="STKXXX_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library&#xA;to demonstrate the use of the various Energy Modes available on the&#xA;EFM32G890F128. When running this example, the Energy Profiler tool&#xA;in Simplicity Studio can be used to show the power consumption of each &#xA;energy mode.&#xA;&#xA;Board:  Silicon Labs EFM32_Gxxx_STK Starter Kit&#xA;Device: EFM32G890F128&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/powertest/SimplicityStudio/STKXXX_powertest.slsproj,../app/mcu_example/EFM32_Gxxx_STK/powertest/arm/powertest.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="STKXXX_touch" description="&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example demonstrates the capacitive touch capability&#xA;of the EFM32 and the STK Starter Kit.&#xA;&#xA;It demonstrates the use of TIMER, ACMP, VCMP, LCD, and EMU.&#xA;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xA;Device: EFM32G890F128&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/touch/SimplicityStudio/STKXXX_touch.slsproj,../app/mcu_example/EFM32_Gxxx_STK/touch/arm/touch.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/touchdemo.c"/>
  </descriptors>
  <descriptors label="STKXXX_userpage" description="&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS  and demonstrates the programming of&#xA;the user page in flash. The page can be used for data such as keys, serial&#xA;numbers and other information that should not be deleted by a device erase.&#xA;&#xA;PB0 increases the main counter.&#xA;PB1 saves the main counter value to the user page and displays how many Flash writes&#xA;have been issued.&#xA;&#xA;Board:  Silicon Labs EFM32-Gxxx-STK Development Kit&#xA;Device: EFM32G890F128&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/EFM32_Gxxx_STK/userpage/SimplicityStudio/STKXXX_userpage.slsproj,../app/mcu_example/EFM32_Gxxx_STK/userpage/arm/userpage.uvprojx,../app/mcu_example/EFM32_Gxxx_STK/userpage/iar/userpage.eww"/>
    <properties key="core.boardCompatibility" value="brd2001a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <properties key="template.initiallyOpenedResource" value="src/userpage.c"/>
  </descriptors>
  <descriptors label="SLSENSORPUCK_sensor_puck" description="&lt;h1&gt;&lt;b&gt;Sensor puck example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xA;demonstrate the use of the Sensor Puck kit. This example is intended as&#xA;a skeleton for new projects.&#xA;&#xA;Refer to SENSOR PUCK USER’S GUIDE in Simplicity Studio for more information.&#xA;(Kit Documentation-&gt;EFM32G)&#xA;&#xA;Board:  Silicon Labs SLSENSORPUCK_EFM32G Kit&#xA;Device: EFM32G210F128&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Environmental and Biometric Sensor Puck"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSENSORPUCK_EFM32G/sensor_puck/SimplicityStudio/SLSENSORPUCK_sensor_puck.slsproj,../app/mcu_example/SLSENSORPUCK_EFM32G/sensor_puck/arm/sensor_puck.uvprojx,../app/mcu_example/SLSENSORPUCK_EFM32G/sensor_puck/iar/sensor_puck.eww"/>
    <properties key="core.boardCompatibility" value="slsensorpuck.efm32g"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.g.*"/>
    <properties key="template.initiallyOpenedResource" value="src/sensor_puck.c"/>
  </descriptors>
  <descriptors label="SLSTK3301A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xA;a skeleton for new projects.&#xA;&#xA;Board:  Silicon Labs SLSTK3301A_EFM32TG11 Starter Kit&#xA;Device: EFM32TG11B520F128GM80&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32TG11 Tiny Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3301A_EFM32TG11/blink/SimplicityStudio/SLSTK3301A_blink.slsproj,../app/mcu_example/SLSTK3301A_EFM32TG11/blink/arm/blink.uvprojx,../app/mcu_example/SLSTK3301A_EFM32TG11/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2102a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLSTK3301A_can_board" description="&lt;h1&gt;&lt;b&gt;CAN bus example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 EMLIB peripheral library to demonstrate &#xA;the use of CAN bus. This demo requires CAN expansion board ISO-CAN-EXP REV 1.0 &#xA;This example uses SegmentLCD to show the CAN actions on the display.&#xA;GPIO interrupt are implemented in order to make use of the buttons. &#xA;BTN0 and BTN1 are used to send a message using CAN bus and LEDs will be toggled. &#xA;On the display number of receptions of the messages and number of&#xA;transmissions are shown. To test this example properly, the kit&#xA;needs to be connected with the CAN tranceivers and another CAN devices.&#xA;This example is intended as a skeleton for new projects. &#xA;&#xA;Board: Silicon Labs SLSTK3301A_EFM32TG11 Starter Kit&#xA;&#xA;Device: EFM32TG11B520F128GM80, ISO-CAN-EXP REV 1.0&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32TG11 Tiny Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3301A_EFM32TG11/can_board/SimplicityStudio/SLSTK3301A_can_board.slsproj,../app/mcu_example/SLSTK3301A_EFM32TG11/can_board/arm/can_board.uvprojx,../app/mcu_example/SLSTK3301A_EFM32TG11/can_board/iar/can_board.eww"/>
    <properties key="core.boardCompatibility" value="brd2102a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <properties key="template.initiallyOpenedResource" value="Main/can_demo.c"/>
  </descriptors>
  <descriptors label="SLSTK3301A_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the capacitive sensing firmware library to sample&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xA;qualification status, and other state variables can be displayed and examined&#xA;in the Capacitive Sensing Profiler tool.&#xA;&#xA;Board:  Silicon Labs SLSTK3301A Starter Kit&#xA;Device: EFM32TG11B520F128GM80&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32TG11 Tiny Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3301A_EFM32TG11/cslib/SimplicityStudio/SLSTK3301A_cslib.slsproj,../app/mcu_example/SLSTK3301A_EFM32TG11/cslib/arm/cslib.uvprojx,../app/mcu_example/SLSTK3301A_EFM32TG11/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2102a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3301A_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of&#xA;the LCD display, RTCC, GPIO and various Energy Modes (EM).&#xA;&#xA;&#xA;1. Use BTN1 to cycle through the available energy mode tests.&#xA;&#xA;Display :&#xA;  upper row: frequency (kHz)&#xA;  lower row: Test Mode ==&gt; &#xA;    - Energy mode &#xA;    - Clock source (X: HFXO/LFXO, R: HFRCO/LFRCO/ULFRCO) &#xA;    - Operation (i.e. While loop, Prime, Coremark, RTCC, CRYO, None), with/without DC/DC converter&#xA;    &#xA;See the file lcd_setup.c for more information about the different modes.&#xA;&#xA;2. Press BTN0 to start selected test.&#xA;&#xA;This demo application has been made to give a quick demo of the&#xA;Energy Profiler from Silicon Labs, including EFM32 energy modes.&#xA;&#xA;Board:  Silicon Labs EFM32TG11_STK3301A Starter Kit&#xA;Device: EFM32TG11B520F128GM80&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32TG11 Tiny Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3301A_EFM32TG11/emode/SimplicityStudio/SLSTK3301A_emode.slsproj,../app/mcu_example/SLSTK3301A_EFM32TG11/emode/arm/emode.uvprojx,../app/mcu_example/SLSTK3301A_EFM32TG11/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2102a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3301A_helges_demo" description="&lt;h1&gt;&lt;b&gt;This example project demonstrates a wide range of features of the EFM32TG11 MCU and the SLSTK3301A Starter Kit.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;Browse different app screens and interact with them using the push buttons BTN0 and BTN1.&#xA;- press the push button BTN0 to change screen&#xA;- some of the app screens will show Gecko symbol in the upper right corner of the screen.&#xA;  To trigger the actions for this app, press the push button BTN1.&#xA;&#xA;IMPORTANT: The touch slider is calibrated during startup, ie. when the kit is powered,&#xA;reset or recovering from a backup event. To ensure that the calibration is successful&#xA;and that the touch slider will work as expected, it is important that the user does not&#xA;touch the slider while the calibration is in progress. The calibration process is&#xA;completed when data is visible on the display.&#xA;&#xA;The available app screens include:&#xA;- Elapsed time app&#xA;  The runtime since last reset is shown in the upper part of the screen.&#xA;  &#xA;- Si7210 Hall-Effect Sensor app&#xA;  This app shows the magnitude and polarity of the magnetic field measured by the Si7210&#xA;  hall-effect sensor on the STK3301A.&#xA;  &#xA;- Si7021 Relative Humidity and Temperature Sensor app&#xA;  This app shows the temperature and relative humidity measured by the Si7021 relative&#xA;  humidity and temperature sensor on the STK3301A. Press the push button BTN1 to toggle&#xA;  Centigrade or Fahrenheit scale for the temperature.&#xA;  &#xA;- Capacitive Touch app&#xA;  This app shows the position and force the user is applying to the touch slider.&#xA;  &#xA;- Low Energy Inductive Sense (LC Sense) and True Random Number Generator (TRNG) app&#xA;  This app counts the number of times the inductive sense element connected to the&#xA;  EFM32TG11's LESENSE peripheral has been triggered. The sensor is triggered when a&#xA;  metallic object comes close to the LC Sense inductor. The counter and LEDs are active&#xA;  even when the LC Sense app is not shown on the screen. Press the push button BTN1 to&#xA;  reset the counter.&#xA;  &#xA;  This app also demonstrates the EFM32TG11's NIST-certified true random number generator&#xA;  (TRNG). The TRNG generates a 128-bit random number every time the LC sensor is triggered,&#xA;  and this number is used to display random pattern on the upper left LCD array.&#xA;  &#xA;- Backup Power Domain (BU Power) app&#xA;  This app demonstrates the EFM32TG11s ability to use a backup power source when its main&#xA;  power source is unavailable. The BU Power app screen displays the following metrics:&#xA;  - Voltage of the backup capacitor on the STK3301A (BUVDD)&#xA;  - Charge and discharge status&#xA;  - Voltage of the main power supply (AVDD)&#xA;  With a properly charged backup capacitor, the EFM32TG11 will retain the selected app,&#xA;  as well as keep the runtime timer running even when the main power supply is removed.&#xA;  To charge the backup capacitor, press the push button BTN1. The capacitor will keep on&#xA;  charging even if the user changes to another app.&#xA;  Press the push button BTN1 once more to stop charging.&#xA;  The user can now disconnect the main power supply for 10-30 minutes, depending on the&#xA;  charge level of the backup capacitor, without losing the app settings. Note, however, that&#xA;  to properly recover from a power outage, the user should supply power using the &quot;BAT&quot;&#xA;  setting on the power switch, since the STK3301A board controller might issue a device reset&#xA;  when re-connecting a power supply using the &quot;AEM&quot; or &quot;USB&quot; settings on the power switch.&#xA;  &#xA;  If the user desires to discharge the capacitor, press the push button BTN1 once more.&#xA;  Allow 30-60 seconds to fully discharge the capacitor, depending on the charge level of the capacitor.&#xA;  The BUVDD voltage will read 0 Volts when discharging, regardless of the actual&#xA;  voltage of the backup capacitor. Press the push button BTN1 once more to stop the&#xA;  discharge process.&#xA;&#xA;Board:  Silicon Labs SLSTK3301A Starter Kit&#xA;Device: EFM32TG11B520F128GM80&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32TG11 Tiny Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3301A_EFM32TG11/helges_demo/SimplicityStudio/SLSTK3301A_helges_demo.slsproj,../app/mcu_example/SLSTK3301A_EFM32TG11/helges_demo/arm/helges_demo.uvprojx,../app/mcu_example/SLSTK3301A_EFM32TG11/helges_demo/iar/helges_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2102a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3301A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board Si7021 sensor on the SLSTK3301A_EFM32TG11 kit.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the segment LCD display and the Si7021 humidity and temperature sensor on the&#xA;SLSTK3301A_EFM32TG11 kit.&#xA;&#xA;Board:  Silicon Labs SLSTK3301A_EFM32TG11 kit Starter Kit.&#xA;Device: EFM32TG11B520F128GM80&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32TG11 Tiny Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3301A_EFM32TG11/humitemp/SimplicityStudio/SLSTK3301A_humitemp.slsproj,../app/mcu_example/SLSTK3301A_EFM32TG11/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLSTK3301A_EFM32TG11/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2102a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLSTK3301A_lcd" description="&lt;h1&gt;&lt;b&gt;Segment LCD controller example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and EMLIB peripheral library and&#xA;demonstrates the use of the segment LCD controller with EM2. The demo&#xA;stays in EM2 when the segment is not updated.&#xA;This example uses the EFM32 Segment LCD Display driver which is provided &#xA;by the Silicon Labs MCU SDK. &#xA;&#xA;BTN0 is used to enable/disable dynamic charge redistribution.&#xA;Dynamic charge redistribution is enabled if the Gecko symbol&#xA;is displayed on the right upper corner of LCD. Dynamic&#xA;charge redistribution feature can be used to reduce current&#xA;consumption.&#xA;&#xA;BTN1 is used to stop/continue the animation.&#xA;&#xA;Board:  Silicon Labs SLSTK3301A_EFM32TG11 Starter Kit&#xA;Device: EFM32TG11B520F128GM80&lt;/pre&gt;">
    <properties key="template.category" value="EFM32TG11 Tiny Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3301A_EFM32TG11/lcd/SimplicityStudio/SLSTK3301A_lcd.slsproj,../app/mcu_example/SLSTK3301A_EFM32TG11/lcd/arm/lcd.uvprojx,../app/mcu_example/SLSTK3301A_EFM32TG11/lcd/iar/lcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2102a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/lcd.c"/>
  </descriptors>
  <descriptors label="SLSTK3301A_micriumos_blink" description="&lt;h1&gt;&lt;b&gt;Micrium OS Blink example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to initialize and run MicriumOS on the kit. The &#xA;application will start a single task which is blinking LED 0 at a regular &#xA;interval. This examples is a good starting point for applications that want &#xA;to use MicriumOS.&#xA;&#xA;Board:  Silicon Labs SLSTK3301A Starter Kit&#xA;Device: EFM32TG11B520F128GM80&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32TG11 Tiny Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3301A_EFM32TG11/micriumos_blink/SimplicityStudio/SLSTK3301A_micriumos_blink.slsproj,../app/mcu_example/SLSTK3301A_EFM32TG11/micriumos_blink/arm/micriumos_blink.uvprojx,../app/mcu_example/SLSTK3301A_EFM32TG11/micriumos_blink/iar/micriumos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2102a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/ex_main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xD;&#xA;a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/blink/SimplicityStudio/SLSTK3400A_blink.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/blink/arm/blink.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLSTK3400A_EFM32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLSTK3400A_EFM32HG kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers on the background which is a bitmap in flash memory.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/clock/SimplicityStudio/SLSTK3400A_clock.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/clock/arm/clock.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xD;&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xD;&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xD;&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xD;&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xD;&#xA; &#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit and CPT007B Evaluation Board&#xD;&#xA;Device: EFM32HG322F64&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/cpt007b/SimplicityStudio/SLSTK3400A_cpt007b_demo.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/cpt007b/arm/cpt007b_demo.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_cpt112s_demo" description="&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT112S fixed&#xD;&#xA;function board. This demo runs on the EFM32 STK,and communicates with&#xD;&#xA;CPT112S through the SMBUS pins on the EXP header. Virtual buttons on&#xD;&#xA;STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S&#xD;&#xA;are pressed or released.&#xD;&#xA; &#xD;&#xA;This demo supports 11 buttons on the CPT112S device.(The CS11 button is&#xD;&#xA;disabled in the default configuration of the board to enable the buzzer)&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit and CPT112S Evaluation Board&#xD;&#xA;Device: EFM32HG322F64&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/cpt112s/SimplicityStudio/SLSTK3400A_cpt112s_demo.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/cpt112s/arm/cpt112s_demo.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/cpt112s/iar/cpt112s_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt112s_demo.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the capacitive sensing firmware library to sample&#xD;&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xD;&#xA;qualification status, and other state variables can be displayed and examined&#xD;&#xA;in the Capacitive Sensing Profiler tool.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/cslib/SimplicityStudio/SLSTK3400A_cslib.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/cslib/arm/cslib.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with LCD display example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LCD, RTC (real time counter), GPIO and&#xD;&#xA;various Energy Modes on the starter kit.&#xD;&#xA;&#xD;&#xA;The example will cycle through Energy Mode EM0-EM3, staying one second in&#xD;&#xA;each mode. PB0 can be pressed anytime to enter EM4.&#xD;&#xA;Wakeup from EM4 is either by reset pushbutton or by GPIO pin (port C bit 9)&#xD;&#xA;connected to pushbutton PB1.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/emlcd/SimplicityStudio/SLSTK3400A_emlcd.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/emlcd/arm/emlcd.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 EMLIB and demonstrates the use of&#xD;&#xA;the LCD display, RTC (real time counter), GPIO and various Energy&#xD;&#xA;Modes (EM).&#xD;&#xA;&#xD;&#xA;Use PB1 to cycle through the energy mode tests available.&#xD;&#xA;Press PB0 to start selected test.&#xD;&#xA;&#xD;&#xA;This demo application has been made to give a quick demo of the&#xD;&#xA;Energy Profiler from Silicon Labs and to reproduce the different &#xD;&#xA;energy modes seen in the EFM32 datasheet current consumption table. &#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/emode/SimplicityStudio/SLSTK3400A_emode.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/emode/arm/emode.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of&#xD;&#xA;using FreeRTOS on a Silicon Labs MCU. The configuration uses the tickless mode&#xD;&#xA;of FreeRTOS in order to enter low energy mode when idle.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/freertos_blink/SimplicityStudio/SLSTK3400A_freertos_blink.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_glib" description="&lt;h1&gt;&lt;b&gt;GLIB example using the Sharp Memory LCD on the SLSTK3400A_EFM32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the GLIB library and the DISPLAY device driver&#xD;&#xA;together with EFM32 CMSIS including EMLIB and board support package support&#xD;&#xA;functions/drivers to demonstrate driving the Sharp Memory LCD display on&#xD;&#xA;the SLSTK3400A_EFM32HG kit.&#xD;&#xA;&#xD;&#xA;The user can switch trough different GLIB example screens by pushing the PB1 button.&#xD;&#xA;The user can reset the demo by pushing the PB0 button.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/glib/SimplicityStudio/SLSTK3400A_glib.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/glib/arm/glib.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/glib/iar/glib.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_inttemp" description="&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and EMLIB to demonstrate&#xD;&#xA;the usage of the internal temperature sensor on EFM32 Happy Gecko devices.&#xD;&#xA;&#xD;&#xA;Measurement results are presented on the LCD display, hit PB0 to display&#xD;&#xA;values in Celsius (default) or PB1 for Fahrenheit.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/inttemp/SimplicityStudio/SLSTK3400A_inttemp.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/inttemp/arm/inttemp.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project reads and sends the data back to terminal using LEUART&#xD;&#xA;while staying in EM2.&#xD;&#xA;&#xD;&#xA;It uses the EFM32 CMSIS and EMLIB, to demonstrate the&#xD;&#xA;use of LEUART communication using DMA under the EM2 on the &#xD;&#xA;SLSTK3400A_EFM32HG Starter Kit.&#xD;&#xA;&#xD;&#xA;The LEUART is configured to be used with DMA under EM2.&#xD;&#xA;The terminal configuration is 9600-8-N-1.&#xD;&#xA;The DMA is configured to handle read and write data bytes from LEUART under EM2.&#xD;&#xA;&#xD;&#xA;Testing:&#xD;&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xD;&#xA;2. Pin Configuration:&#xD;&#xA;	2.1. Pin-12 (PD4) LEUART0_TX&#xD;&#xA;	2.2. Pin-14 (PD5) LEUART0_RX&#xD;&#xA;	2.3. Pin-1 Gnd&#xD;&#xA;&#xD;&#xA;3. Configure terminal to 9600-8-N-1.&#xD;&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xD;&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/leuart/SimplicityStudio/SLSTK3400A_leuart.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/leuart/arm/leuart.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32HG322F64. When running this example, the Energy Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each&#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/powertest/SimplicityStudio/SLSTK3400A_powertest.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/powertest/arm/powertest.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_spaceinvaders" description="&lt;h1&gt;&lt;b&gt;Space Invaders game using the Memory LCD on the SLSTK3400A_EFM32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLSTK3400A_EFM32HG kit.&#xD;&#xA;&#xD;&#xA;Game instructions are displayed on the startup screen.&#xD;&#xA;&#xD;&#xA;For debug builds the game may run slow because they are not optimized&#xD;&#xA;for speed. The user should build and run the release builds for&#xD;&#xA;optimized performance.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/spaceinvaders/SimplicityStudio/SLSTK3400A_spaceinvaders.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/spaceinvaders/arm/spaceinvaders.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/spaceinvaders/iar/spaceinvaders.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_spi_display" description="&lt;h1&gt;&lt;b&gt;Toggle all pixels on the LCD display every 500ms with low energy peripherals.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses EFM32 CMSIS and the EMLIB peripheral library to &#xD;&#xA;demonstrate driving the Sharp Memory LCD display on the STK3200 kit while &#xD;&#xA;staying in low energy modes.&#xD;&#xA;&#xD;&#xA;A DMA channel is used to transfer frame buffers to the LCD display with the &#xD;&#xA;SPI protocol, staying in EM1 during the data transfer and in EM3 while&#xD;&#xA;waiting for the next frame update. An RTC interrupt toggles the EXTCOM pin &#xD;&#xA;60 times per second as required by the display.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs STK3200 Starter Kit&#xD;&#xA;Device: EFM32HG322F64&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/spi_display/SimplicityStudio/SLSTK3400A_spi_display.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/spi_display/arm/spi_display.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/spi_display/iar/spi_display.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_textdisplay" description="&lt;h1&gt;&lt;b&gt;Printf output on Sharp Memory LCD LS013B7DH03.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the EFM32 Happy Gecko. In this case the&#xD;&#xA;display is used as output from a regular printf in the application, as&#xD;&#xA;an alternative to the RS232 port.&#xD;&#xA;&#xD;&#xA;The user can customize the behaviour of the DISPLAY driver by changing&#xD;&#xA;configuration macros in displayconfigapp.h.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/textdisplay/SimplicityStudio/SLSTK3400A_textdisplay.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/textdisplay/arm/textdisplay.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/textdisplay/iar/textdisplay.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_touch" description="&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates the capacitive touch capability&#xD;&#xA;of the EFM32 Happy Gecko Starter Kit.&#xD;&#xA;&#xD;&#xA;It demonstrates the use of CAPSENSE and DISPLAY drivers.&#xD;&#xA;Pressing T1/T2 touch pads will decrease/increase the counter shown on the LCD.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/touch/SimplicityStudio/SLSTK3400A_touch.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/touch/arm/touch.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_weatherstation" description="&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the SLSTK3400A_EFM32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLSTK3400A_EFM32HG kit. In addition, it&#xD;&#xA;demonstrates the use of Silabs I2C based sensors on the expansion board&#xD;&#xA;header.&#xD;&#xA;&#xD;&#xA;You must have a Silabs Sensor add-on board to make use of this demo.&#xD;&#xA;Once the demo is started, hold your hand over the gesture sensor. Once&#xD;&#xA;the sensor detects your hand the display will become active.&#xD;&#xA;&#xD;&#xA;Swipe left and right over the sensor to scroll through temperature, humidity&#xD;&#xA;and UV index. On the temperature screen, you can swipe up or down to change&#xD;&#xA;between Fahrenheit or Celcius.&#xD;&#xA;&#xD;&#xA;Note: Due to the size of this example, you might need to enable compiler&#xD;&#xA;optimizations to be able to fit the entire binary in the 32k of flash!&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit and Sensor Add-on board&#xD;&#xA;Device: EFM32HG322F64&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/weatherstation/SimplicityStudio/SLSTK3400A_weatherstation.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/weatherstation/arm/weatherstation.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/weatherstation/iar/weatherstation.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/weatherstation.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_gterm" description="&lt;h1&gt;&lt;b&gt;Gterm - an asynchronous termianl example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example demonstrates how to use the display and a uart to make a simple asynchronous terminal&#xA;by utilizing the textdisplay and uartdrv drivers.&#xA;&#xA;The uartdrv driver is configured to use vcom and stdout is configured to print to the display&#xA;through textdisplay.&#xA;&#xA;Received data is displayed on the screen, while pressing B0 or B1 will transmit some predefined&#xA;strings.&#xA;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit&#xA;Device: EFM32HG322F64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/gterm/SimplicityStudio/SLSTK3400A_gterm.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/gterm/arm/gterm.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/gterm/iar/gterm.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the SLSTK3400A_EFM32HG board.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the &#xA;SLSTK3400A_EFM32HG board.&#xA;&#xA;Board:  Silicon Labs SLSTK3400A_EFM32HG starter kit.&#xA;Device: EFM32HG322F64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/humitemp/SimplicityStudio/SLSTK3400A_humitemp.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_si72xx_wheeldemo" description="&lt;h1&gt;&lt;b&gt;Hall effect demo code for the Si72xx-WD-Kit using a Silicon Labs&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLSTK3400A-EFM32HG Starter Kit.&#xA;&#xA;You must have the Hall Effect Evaluation kit, Si72xx-WD-Kit, to make use of&#xA;this demo. The Si72xx-WD-Kit includes two Si7210 sensors mounted on an &#xA;expansion board (Si72xx-EXP) plus each of the six base part types mounted on &#xA;small postage-stamp-sized (PS) boards. You must use the Silicon Labs &#xA;SLSTK3400A-EFM32HG Starter Kit which is included in the Si72xx-WD-Kit.&#xA;&#xA;This example includes eight demos, two for the Si72xx-EXP and one for each of &#xA;the PS-boards. Individual files are included to measure and convert the sensor &#xA;outputs into magnetic field readings for the Si7211-EB, Si7212-EB and Si7213-EB&#xA;boards. The Si72xx-EXP and Si7210-EB boards use the Silicon Labs Hall Effect &#xA;Sensor driver to demonstrate the sensor's features by communicating over I2C. &#xA;&#xA;Note: For a complete list of the demos and their descriptions, please reference&#xA;the Si72xx-WD-Kit User's Guide, UG288.&#xA;&#xA;Add-on boards&#xA;Device: EFM32HG322F64&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/si72xx_wheeldemo/SimplicityStudio/SLSTK3400A_si72xx_wheeldemo.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/si72xx_wheeldemo/arm/si72xx_wheeldemo.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/si72xx_wheeldemo/iar/si72xx_wheeldemo.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/wheel.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbdcdc" description="&lt;h1&gt;&lt;b&gt;USB CDC virtual COM port example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use the EFM32 USB Device protocol stack&#xA;and implements an USB CDC based virtual COM port.&#xA;&#xA;USART1 on the STK is used as the physical COM port.&#xA;Any data sent to the virtual CDC COM port is transmitted on USART1.&#xA;Any data received on USART1 is transmitted to the virtial port.&#xA;Connect a terminal to the TTL-level serialport (115200-N-8-1) on EXP port pins&#xA;3 (Tx)  and 5 (Rx).&#xA;&#xA;When connecting the mcu plugin boards USB port to a Windows host PC,&#xA;the new hardware &quot;Wizard&quot; may or may not prompt you to provide a driver&#xA;installation file (.inf file) depending on your Windows version.&#xA;&#xA;Manually direct Windows to look for drivers in the directory where you have&#xA;unpacked your copy of the Silabs-CDC_Install.zip driver file.&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xA;select &quot;Update Driver Software...&quot;.&#xA;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xA;Win7:&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xA;Win10:&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xA;When computer has restarted into the options menu, select:&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xA;You should now be able to install an unsigned driver.&#xA;&#xA;When a driver is succesfully installed, the device will be listed as a &quot;Ports&quot;&#xA;device in Device Manager, double-click it, select the &quot;Port Settings&quot; tab and&#xA;maybe the &quot;Advanced...&quot; button to set serial port properties.&#xA;&#xA;Board:  Silicon Labs SLSTK3400A Starter Kit&#xA;Device: EFM32HG322F64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbdcdc/SimplicityStudio/SLSTK3400A_usbdcdc.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/usbdcdc/arm/usbdcdc.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/usbdcdc/iar/usbdcdc.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbdcomposite" description="&lt;h1&gt;&lt;b&gt;USB Composite Device example, HID + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use the EFM32 USB Device protocol stack&#xA;to implement a composite USB device with tree functions:&#xA;&#xA; - Human Interface Device (HID) keyboard device, implementing a one button kbd.&#xA; - Communication device class (CDC) implementing a USB to UART bridge&#xA; - Vendor Unique Device similar to the usbdvud example (control STK leds).&#xA;&#xA;As the CDC function has two interface, the CDC function use an Interface&#xA;Association Descriptor (IAD). A composite device which use IAD's must be&#xA;implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.&#xA;&#xA;&#xA;The vendor unique function (VUD).&#xA;=================================&#xA;Toggles user LED's 0 and 1 when receiving vendor unique class setup commands.&#xA;Intended to be used together with the &quot;libusb&quot; device driver, and host&#xA;application EFM32-LedApp.exe (a Windows application).&#xA;You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud&#xA;example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud&#xA;example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00&#xA;are specified.&#xA;&#xA;The CDC COM port function.&#xA;==========================&#xA;Implements an USB CDC based virtual COM port. USART1 on the DK is used as the&#xA;physical COM port. Any data sent to the virtual CDC COM port is transmitted on&#xA;USART1. Any data received on USART1 is transmitted to the virtual port.&#xA;USART1 is available on the STK EXP port. EXP pin 3 is Tx, pin 5 is Rx.&#xA;NOTE: This is a TTL level USART, DO NOT CONNECT DIRECTLY TO RS232 PORTS !&#xA;&#xA;The HID keyboard function.&#xA;=================================&#xA;Implements a single button keyboard with pushbutton PB0.&#xA;Will transmit the string &quot;Silicon Labs -&quot;, one char for each button push.&#xA;&#xA;&#xA;Windows driver installation.&#xA;============================&#xA;The first time the composite USB device is connected to the host, Windows must&#xA;install drivers for the VUD and CDC functions.&#xA;&#xA;To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;&#xA;device driver. Manually direct Windows to look for this driver in the &quot;host&quot;&#xA;folder of the usbdvud example.&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on one of functions&#xA;of the new composite device (marked with yellow exclamation mark) and&#xA;select &quot;Update Driver Software...&quot;.&#xA;After libusb is installed you can start EFM32-LedApp.exe to control leds on&#xA;the DK.&#xA;&#xA;Similarly for the CDC function, direct Windows to look for a driver in the&#xA;folder where you have your copy of the &quot;EFM32-Cdc.inf&quot; file (same folder as&#xA;this readme file, unzip the Silabs-CDC_Install.zip).&#xA;Note how the .inf file specifies interface number 2, VID_10C4&amp;PID_000A&amp;MI_02.&#xA;When the serial port driver is succesfully installed, the device will be listed&#xA;as a &quot;Ports&quot; device in Device Manager, double-click it, select the&#xA;&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port&#xA;properties.&#xA;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xA;Win7:&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xA;Win10:&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xA;When computer has restarted into the options menu, select:&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xA;You should now be able to install an unsigned driver.&#xA;&#xA;Board:  Silicon Labs SLSTK3400A Starter Kit&#xA;Device: EFM32HG322F64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbdcomposite/SimplicityStudio/SLSTK3400A_usbdcomposite.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/usbdcomposite/arm/usbdcomposite.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/usbdcomposite/iar/usbdcomposite.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbdhidkbd" description="&lt;h1&gt;&lt;b&gt;USB LEUSB HID keyboard example. (Extends original HID keyboard example)&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 USB Device protocol stack&#xA;and implements an USB HID class keyboard device (one button !).&#xA;&#xA;The HID device enumerates and immediately disables the Low Energy USB features&#xA;(which are enabled by default in the USB protocol stack), allowing observation&#xA;of &quot;normal&quot; power consumption on VBUS.&#xA;&#xA;PB0 is the keyboard button. Pressing this button will succesively write&#xA;&quot;Silicon Labs / &quot;.&#xA;&#xA;PB1 is the toggle button for Low Energy Mode (LEM).  Pressing this button will&#xA;alternate between LEM enabled/disabled.  The graphic displayed on the STK LCD&#xA;will update to reflect this state (reads &quot;HID keyboard Device&quot; in normal mode,&#xA;or &quot;Low-Energy USB&quot; when LEM is enabled).&#xA;&#xA;The example is power optimized when LEM is enabled.  With the STK power switch in&#xA;&quot;USB&quot; position (board power is drawn from USB host via VBUS), when USB cable is plugged&#xA;in and USB is active the current drawn from VBUS is ~8.3 mA in normal mode, or ~5.8 mA&#xA;when LEM is enabled, of which only ~460 uA is consumed by the USB PHY.  When the cable&#xA;is disconnected or the device is suspended, the current is less than 5 uA.&#xA;&#xA;&#xA;Board:  Silicon Labs SLSTK3400A Starter Kit&#xA;Device: EFM32HG322F64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbdhidkbd/SimplicityStudio/SLSTK3400A_usbdhidkbd.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/usbdhidkbd/arm/usbdhidkbd.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/usbdhidkbd/iar/usbdhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbdmsd" description="&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use the EFM32 USB Device protocol stack&#xA;to implement a device Mass Storage Class device (MSD).&#xA;&#xA;The example implements a small 32KByte &quot;disk&quot; using internal FLASH memory.&#xA;&#xA;Led 0 will flash when there is traffic on the USB bus, led 1 will be on when&#xA;the device is connected to an USB host.&#xA;&#xA;NOTE: The example does not check if the code segment extends into the&#xA;32KByte &quot;disk&quot; part of flash memory. Take care when adding code to the example !&#xA;&#xA;Board:  Silicon Labs SLSTK3400A Starter Kit&#xA;Device: EFM32HG322F64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbdmsd/SimplicityStudio/SLSTK3400A_usbdmsd.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/usbdmsd/arm/usbdmsd.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/usbdmsd/iar/usbdmsd.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbdvud" description="&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use the EFM32 USB Device protocol stack&#xA;and implements an USB Vendor Unique Device.&#xA;&#xA;The example will toggle LED's 0 and 1 when receiving vendor unique class&#xA;setup commands.&#xA;&#xA;This example is intended to be used together with the &quot;libusb&quot; device driver,&#xA;and host application EFM32-LedApp.exe (a Windows application).&#xA;&#xA;The first time the USB device is connected to the host, you must tell the host&#xA;OS to install the &quot;libusb&quot; device driver.&#xA;&#xA;On Windows, you can follow this procedure:&#xA;Insert the device, and manually direct Windows to look for drivers in the&#xA;directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xA;select &quot;Update Driver Software...&quot;.&#xA;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xA;Win7:&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xA;Win10:&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xA;When computer has restarted into the options menu, select:&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xA;You should now be able to install an unsigned driver.&#xA;&#xA;After libusb is installed, start EFM32-LedApp.exe.&#xA;&#xA;This example will output some info on the VCOM serial port.&#xA;&#xA;Board:  Silicon Labs SLSTK3400A Starter Kit&#xA;Device: EFM32HG322F64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbdvud/SimplicityStudio/SLSTK3400A_usbdvud.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/usbdvud/arm/usbdvud.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/usbdvud/iar/usbdvud.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbxpress_echo" description="&lt;h1&gt;&lt;b&gt;USBXpress Echo example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xA;It echoes all received data back to the host that sent it.&#xA;&#xA;The host-side application is the usbxpress_echo.py Python script found in the&#xA;USBXpress SDK at Examples/Echo/Host. The USBXpress SDK is available for download&#xA;at www.silabs.com/products/mcu/Pages/USBXpress.aspx.&#xA;&#xA;Board:  Silicon Labs SLSTK3400A Starter Kit&#xA;Device: EFM32HG322F64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbxpress_echo/SimplicityStudio/SLSTK3400A_usbxpress_echo.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/usbxpress_echo/arm/usbxpress_echo.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/usbxpress_echo/iar/usbxpress_echo.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3400A_usbxpress_test_panel" description="&lt;h1&gt;&lt;b&gt;USBXpress Test Panel example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project demonstrates the EFM32 USBXpress firmware library.&#xA;It communicates with the TestPanel host application to send and receive data.&#xA;TestPanel is included in the USBXpress SDK, available for download at:&#xA;&#xA;https://www.silabs.com/products/mcu/Pages/USBXpress.aspx&#xA;&#xA;Board:  Silicon Labs SLSTK3400A Development Kit&#xA;Device: EFM32HG322F64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Happy Gecko 3400 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbxpress_test_panel/SimplicityStudio/SLSTK3400A_usbxpress_test_panel.slsproj,../app/mcu_example/SLSTK3400A_EFM32HG/usbxpress_test_panel/arm/usbxpress_test_panel.uvprojx,../app/mcu_example/SLSTK3400A_EFM32HG/usbxpress_test_panel/iar/usbxpress_test_panel.eww"/>
    <properties key="core.boardCompatibility" value="brd2012a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library&#xA;to demonstrate the use of the LED on the SLSTK3401A kit.&#xA;This example is intended as a skeleton for new projects.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/blink/SimplicityStudio/SLSTK3401A_blink.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/blink/arm/blink.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLSTK3401A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display on the SLSTK3401A kit.&#xA;&#xA;The user can switch between analog and digital clock modes by pushing&#xA;the PB0 button.&#xA;&#xA;The user can increment the second count by pushing the PB1 button.&#xA;The minute count can be incremented by pushing the PB1 button for more&#xA;than 2 seconds.&#xA;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xA;and second pointers.&#xA;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xA;only) of the textdisplay driver.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/clock/SimplicityStudio/SLSTK3401A_clock.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/clock/arm/clock.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xA; &#xA;Board:  Silicon Labs SLSTK3401A Starter Kit and CPT007B Evaluation Board&#xA;Device: EFM32PG1B200F256&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/cpt007b/SimplicityStudio/SLSTK3401A_cpt007b_demo.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/cpt007b/arm/cpt007b_demo.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_cpt112s_demo" description="&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This demo demonstrates the capacitive button function of CPT112S fixed&#xA;function board. This demo runs on the EFM32 STK,and communicates with&#xA;CPT112S through the SMBUS pins on the EXP header. Virtual buttons on&#xA;STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S&#xA;are pressed or released.&#xA; &#xA;This demo supports 11 buttons on the CPT112S device.(The CS11 button is&#xA;disabled in the default configuration of the board to enable the buzzer)&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit and CPT112S Evaluation Board&#xA;Device: EFM32PG1B200F256&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/cpt112s/SimplicityStudio/SLSTK3401A_cpt112s_demo.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/cpt112s/arm/cpt112s_demo.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/cpt112s/iar/cpt112s_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt112s_demo.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the capacitive sensing firmware library to sample&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xA;qualification status, and other state variables can be displayed and examined&#xA;in the Capacitive Sensing Profiler tool.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/cslib/SimplicityStudio/SLSTK3401A_cslib.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/cslib/arm/cslib.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with LCD display example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xA;demonstrate the use of the LCD, RTCC, GPIO and various Energy Modes&#xA;on the starter kit.&#xA;&#xA;The example will cycle through Energy Mode EM0-EM3, staying one second in&#xA;each mode. PB0 can be pressed anytime to enter EM4.&#xA;Wakeup from EM4 is either by reset pushbutton or by GPIO pin (port F pin 7)&#xA;connected to pushbutton PB1.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/emlcd/SimplicityStudio/SLSTK3401A_emlcd.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/emlcd/arm/emlcd.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of&#xA;the LCD display, RTCC, GPIO and various Energy Modes (EM).&#xA;&#xA;Use PB1 to cycle through the energy mode tests available.&#xA;Press PB0 to start selected test.&#xA;&#xA;Note: The EMU power configuration register can only be written once after a&#xA;      power-on reset and may be locked to a different configuration. For the&#xA;      emode demo to function properly, a power-on reset may be required to&#xA;      configure the DCDC properly.&#xA;&#xA;This demo application has been made to give a quick demo of the&#xA;Energy Profiler from Silicon Labs, including EFM32 energy modes.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/emode/SimplicityStudio/SLSTK3401A_emode.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/emode/arm/emode.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of&#xA;using FreeRTOS on a Silicon Labs MCU. The configuration uses the tickless mode&#xA;of FreeRTOS in order to enter low energy mode when idle.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/freertos_blink/SimplicityStudio/SLSTK3401A_freertos_blink.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/freertos_blink/arm/freertos_blink.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_glib" description="&lt;h1&gt;&lt;b&gt;GLIB example using the Sharp Memory LCD on the SLSTK3401A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the GLIB library and the DISPLAY device driver&#xA;together with EFM32 CMSIS including EMLIB and board support package support&#xA;functions/drivers to demonstrate driving the Sharp Memory LCD display on&#xA;the SLSTK3401A kit.&#xA;&#xA;The user can switch trough different GLIB example screens by pushing the PB1 button.&#xA;The user can reset the demo by pushing the PB0 button.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/glib/SimplicityStudio/SLSTK3401A_glib.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/glib/arm/glib.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/glib/iar/glib.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board Si7021 sensor on the SLSTK3401A board.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display and the Si7021 humidity and temperature sensor on the &#xA;SLSTK3401A board.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit.&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/humitemp/SimplicityStudio/SLSTK3401A_humitemp.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_inttemp" description="&lt;h1&gt;&lt;b&gt;ADC temperature sensor demo using the SLSTK3401A_EFM32PG board.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the &#xA;board support package support functions/drivers to demonstrate how &#xA;to read the ADC temperature sensor. The temperature is sampled and &#xA;displayed on the Sharp Memory LCD display every second.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A_EFM32PG starter kit&#xA;Device: EFM32PG1B200F256GM48&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/inttemp/SimplicityStudio/SLSTK3401A_inttemp.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/inttemp/arm/inttemp.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/LDMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project reads and sends data byte back to terminal using LEUART&#xA;while staying in EM2.&#xA;&#xA;It uses the EFM32 CMSIS and EMLIB, to demonstrate the&#xA;use of LEUART communication using LDMA under the EM2 on the &#xA;SLSTK3401A Starter Kit.&#xA;&#xA;The LEUART is configured to be used with LDMA under EM2.&#xA;The terminal configuration is 9600-8-N-1.&#xA;The LDMA is configured to handle read and write data bytes from LEUART under EM2.&#xA;&#xA;Testing:&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xA;2. Pin Configuration:&#xA;	2.1. Pin-12 (PA0) LEUART0_TX&#xA;	2.2. Pin-14 (PA1) LEUART0_RX&#xA;	2.3. Pin-1 Gnd&#xA;&#xA;3. Configure terminal to 9600-8-N-1.&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256GM48&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/leuart/SimplicityStudio/SLSTK3401A_leuart.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/leuart/arm/leuart.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_aescrypt" description="&lt;h1&gt;&lt;b&gt;mbedTLS AES example using the CRYPTO module in the EFM32PG to&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;accelerate the AES encryption and SHA hash functions of mbedTLS.&#xA;&#xA;This example project uses the EFM32 CMSIS including EMLIB to run&#xA;mbedTLS libraries on the EFM32PG.&#xA;&#xA;The example redirects standard io to the VCOM virtual serial port of the&#xA;SLSTK3401A_EFM32PG kit. By default the serial port setting is 115200-8-N-1.&#xA;&#xA;The user should connect a terminal emulator program, and follow the&#xA;instructions shown on the console.&#xA;&#xA;The user can select encryption or decryption of a message which should be sent&#xA;via the VCOM serial interface.&#xA;&#xA;A hardcoded 256-bit key is used for encryption and decryption.&#xA;&#xA;In ecryption mode, the example will ask the user for a short phrase to&#xA;generate an initial vector used in the AES encryption process. The user may type&#xA;any phrase ended by newline or limited to a maximum of 16 bytes. After the short&#xA;phrase, the user should start typing in the message to be encrypted, followed by&#xA;a newline to mark the end of the message. The message length is limited to&#xA;the #define MAX_MESSAGE_SIZE_ENCRYPTION. Then the program will encrypt the&#xA;message (plaintext), and print out the ciphertext, preceded with the initial&#xA;vector of 16 bytes and followed by a message digest tag of 32 bytes. All data&#xA;is converted to hexadecimal readable text format before sent to the serial port.&#xA;The format is:&#xA;Initial Vector(16 bytes) | Ciphertext | Message Digest Tag (32 bytes)&#xA;&#xA;The user can copy the output and feed it back to the program for decryption&#xA;later. The user need to reset the kit in order to run decryption mode.&#xA;&#xA;In decryption mode, the example will expect to receive a decrypted message&#xA;in the same format as generated by the encryption (as shown above).&#xA;&#xA;The example has been instrumented with code to count the number of clock&#xA;cycles spent in the encryption and decryption loops. To observe the&#xA;performance gain of CRYPTO acceleration, the user can switch off&#xA;CRYPTO hardware acceleration by compiling with -DNO_CRYPTO_ACCELERATION&#xA;in the compiler command line.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/mbedtls_aescrypt/SimplicityStudio/SLSTK3401A_aescrypt.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/mbedtls_aescrypt/arm/aescrypt.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/mbedtls_aescrypt/iar/aescrypt.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="test/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_ecdh" description="&lt;h1&gt;&lt;b&gt;mbedTLS ECDH example using the CRYPTO module in the EFM32PG to&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;accelerate the ECDH API functions of mbedTLS.&#xA;&#xA;This example project uses the EFM32 CMSIS including EMLIB to run&#xA;mbedTLS libraries on the EFM32PG.&#xA;&#xA;The example use the CTR-DRBG, a pseudo random number generator (PRNG)&#xA;included in mbedTLS to generate random private keys for both peers&#xA;(client and server) that will share the ECDH secret. If the example is&#xA;running on a device including a TRNG hw module (True Random Number Generator)&#xA;the TRNG will be used as entropy source to seed the CTR-DRBG. If the device&#xA;does not incorporate a TRNG, the example will use dummy data to seed the&#xA;CTR-DRBG. The entropy accumulator of mbedTLS will use SHA256 to hash the&#xA;the entropy data pool which is filled with data from the entropy sources.&#xA;&#xA;The CTR-DRBG involve use of AES which is accelerated by the CRYPTO AES&#xA;accelerator.&#xA;&#xA;The entropy accumulator of mbedTLS is setup to use SHA-256 which is&#xA;accelerated by the CRYPTO SHA-256 accelerator.&#xA;&#xA;The example redirects standard I/O to the VCOM virtual serial port of the&#xA;SLSTK3401A_EFM32PG kit. The user can use a terminal emulator program to&#xA;connect to the serial port with the default settings of 115200-8-N-1.&#xA;&#xA;The example has been instrumented with code to count the number of clock&#xA;cycles spent inside the ecdh api calls, mbedtls_ecdh_gen_public and&#xA;mbedtls_ecdh_compute_shared. The results are printed to stdout, i.e.&#xA;the VCOM serial port console.&#xA;&#xA;To check the performance gain of CRYPTO acceleration, the user&#xA;can switch off CRYPTO hardware acceleration by compiling with&#xA;-DNO_CRYPTO_ACCELERATION in the compiler command line.&#xA;&#xA;The user can change the specific ECC curve used in the example&#xA;by modifying the MBEDTLS_ECC_ID macro definition. Available curves with&#xA;CRYPTO acceleration support are:&#xA;MBEDTLS_ECP_DP_SECP256R1&#xA;MBEDTLS_ECP_DP_SECP224R1&#xA;MBEDTLS_ECP_DP_SECP192R1&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/mbedtls_ecdh/SimplicityStudio/SLSTK3401A_ecdh.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/mbedtls_ecdh/iar/ecdh.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="test/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_ecdsa" description="&lt;h1&gt;&lt;b&gt;mbedTLS ECDSA example using the CRYPTO module in the EFM32PG to&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;accelerate the ECDSA API functions of mbedTLS.&#xA;&#xA;This example project uses the EFM32 CMSIS including EMLIB to run&#xA;mbedTLS libraries on the EFM32PG.&#xA;&#xA;The example redirects standard I/O to the VCOM virtual serial port of the&#xA;SLSTK3401A_EFM32PG kit. The user can use a terminal emulator program to&#xA;connect to the serial port with the default settings of 115200-8-N-1.&#xA;&#xA;The example has been instrumented with code to count the number of clock&#xA;cycles spent inside the ecdsa api calls, mbedtls_ecdsa_genkey,&#xA;mbedtls_ecdsa_write_signature and mbedtls_ecdsa_read_signature.&#xA;The results are printed to stdout, i.e. the VCOM serial port console.&#xA;To check the performance gain of CRYPTO acceleration, the user&#xA;can switch off CRYPTO hardware acceleration by compiling with&#xA;-DNO_CRYPTO_ACCELERATION in the compiler command line.&#xA;&#xA;The user can change the specific ECC curve used in the example&#xA;by modifying the ECPARAMS macro definition. Available curves with&#xA;CRYPTO acceleration support are:&#xA;MBEDTLS_ECP_DP_SECP256R1&#xA;MBEDTLS_ECP_DP_SECP224R1&#xA;MBEDTLS_ECP_DP_SECP192R1&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/mbedtls_ecdsa/SimplicityStudio/SLSTK3401A_ecdsa.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/mbedtls_ecdsa/iar/ecdsa.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="test/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_micriumos_blink" description="&lt;h1&gt;&lt;b&gt;MicriumOS Blink example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to initialize and run MicriumOS on the kit. The &#xA;application will start a single task which is blinking LED 0 at a regular &#xA;interval. This examples is a good starting point for applications that want &#xA;to use MicriumOS.&#xA;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is enabled by default and can be disabled by changing the &#xA;OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used&#xA;to inspect the runtime behaviour of this example, it will give a nice overview&#xA;of the tasks and interrupts in the application. SystemView can be downloaded &#xA;from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/micriumos_blink/SimplicityStudio/SLSTK3401A_micriumos_blink.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/micriumos_blink/arm/micriumos_blink.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/micriumos_blink/iar/micriumos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/ex_main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_micriumos_dynamic" description="&lt;h1&gt;&lt;b&gt;Micrium OS Dynamic Tick example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to initialize and run MicriumOS on the kit. The &#xA;application will start a single task which is blinking LED 0 at a regular &#xA;interval. This example is using the dynamic tick feature of Micrium OS &#xA;to be able to enter EM2 whenever the application is idle. This examples &#xA;is a good starting point for applications that want to use Micrium OS &#xA;while using EM2.&#xA;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is disabled by default in this example, but can be enabled by &#xA;changing the OS_CFG_TRACE_EN configuration inside the os_cfg.h file. &#xA;SystemView can be used to inspect the runtime behaviour of this example, it &#xA;will give a nice overview of the tasks and interrupts in the application. &#xA;SystemView can be downloaded from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/micriumos_dynamic/SimplicityStudio/SLSTK3401A_micriumos_dynamic.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/micriumos_dynamic/arm/micriumos_dynamic.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/micriumos_dynamic/iar/micriumos_dynamic.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_micriumos_wifi_whiteboard" description="&lt;h1&gt;&lt;b&gt;Wireless Whiteboard Demo: Micrium OS + WiFi + Graphics LCD&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;In this demo you get to draw something on your smart phone and watch the&#xA;drawing being displayed in the board's LCD. &#xA;&#xA;Hardware Requirements&#xA;---------------------&#xA;&#xA;This demo requires the three boards illustrated in the following diagram:&#xA;&#xA; +---------------------------------------+  +----------------------------+&#xA; | EFM32 Pearl Gecko                     |  | Wireless Expansion Board   |&#xA; | SLSTK3401A                            |--| PCB8016                    |&#xA; | PCB2500                               |--|           +--------------+ |&#xA; |                                       |--|           | Wizard Gecko | |&#xA; |                                       |--|           | WGM110       | |&#xA; |                                       |--|           | PCB4320      | |&#xA; |                                       |--|           |              | |&#xA; |                                       |--|           |              | |&#xA; |                                       |--|           +--------------+ |&#xA; |    SWITCH                             |--|   SWITCH                   |&#xA; |  BAT  [AEM]                           |  |  3V  [5V]                  |&#xA; +---------------------------------------+  +----------------------------+&#xA;                                        20-pin&#xA;                                       Exp. Hdr.&#xA;&#xA;Configuration&#xA;-------------&#xA;&#xA;1. Connect the boards as illustrated in the diagram above.&#xA;&#xA;2. Configure the board switches as illustrated in the previous diagram:&#xA;&#xA;   a. AEM&#xA;   b. 5V&#xA;&#xA;3. Enter your WiFi access point's SSID and Password in the file app_wifi_cfg.h&#xA;&#xA;4. Build the project.&#xA;&#xA;Execution&#xA;---------&#xA;&#xA;1. Execute the application by launching a debug session and wait for the&#xA;   board to connect to the TCP server at demo.silabs.com&#xA;&#xA;   The application will display a series of messages to show you the progress&#xA;   as follows:&#xA;&#xA;   a. Connecting to [Your SSID]&#xA;   b. Connecting to [demo.silabs.com resolved IP address]&#xA;   c. MAC Address: [Your MAC address]&#xA;&#xA;2. Open your favorite browser, go to the web page at http://demo.silabs.com&#xA;   and select the Wireless Whiteboard demo for the Pearl Gecko.&#xA;&#xA;3. Enter your board's MAC address in the web page and start drawing.&#xA;&#xA;4. Press the buttons to switch between screens.&#xA;&#xA;Tools&#xA;-----&#xA;&#xA;This demo features two development tools; uC/Probe and SystemView.&#xA;&#xA;To learn more about these tools take the following steps:&#xA;&#xA;1. uC/Probe:&#xA;&#xA;   Click the button uC/Probe on the toolbar of Simplicity Studio.&#xA;&#xA;2. SystemView:&#xA;&#xA;   a. Install SystemView from https://www.segger.com/systemview.html&#xA;   &#xA;   b. Enable kernel tracing by setting OS_CFG_TRACE_EN to DEF_ENABLED&#xA;      in os_cfg.h&#xA;   &#xA;   c. Rebuild the project.&#xA; &#xA;   d. Launch a debugging session.&#xA;   &#xA;   e. Open SystemView and press the F5 key or select Target from the&#xA;      Options Menu and click Start Recording.&#xA;&#xA;Board: Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256GM48&#xA;Expansion Board: PCB8016&#xA;WiFi Module: Wizard Gecko WGM110 PCB4320&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/micriumos_wifi_whiteboard/SimplicityStudio/SLSTK3401A_micriumos_wifi_whiteboard.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/micriumos_wifi_whiteboard/iar/micriumos_wifi_whiteboard.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library&#xA;to demonstrate the use of the various Energy Modes available on the&#xA;EFM32PG1B200F256. When running this example, the Energy Profiler tool&#xA;in Simplicity Studio can be used to show the power consumption of each&#xA;energy mode.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/powertest/SimplicityStudio/SLSTK3401A_powertest.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/powertest/arm/powertest.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_prs" description="&lt;h1&gt;&lt;b&gt;PRS example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library&#xA;to demonstrate the use of the Peripheral Reflex System (PRS) on the &#xA;SLSTK3401A kit. The LETIMER0 toggles LED1 via PRS channel 0 at every 250ms.&#xA;Button BTN0 toggles LED0 at every 5th press via PCNT0 and PRS channel 2.&#xA;This example operates in EM2.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/prs/SimplicityStudio/SLSTK3401A_prs.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/prs/arm/prs.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/prs/iar/prs.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/prs.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_spaceinvaders" description="&lt;h1&gt;&lt;b&gt;Space Invaders game using the Memory LCD on the SLSTK3401A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display on the SLSTK3401A Starter Kit.&#xA;&#xA;Game instructions are displayed on the startup screen.&#xA;(On kits with slider instead of touch pads, use outermost segments to move tank).&#xA;&#xA;For debug builds the game may run slow because they are not optimized&#xA;for speed. The user should build and run the release builds for&#xA;optimized performance.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256GM48&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/spaceinvaders/SimplicityStudio/SLSTK3401A_spaceinvaders.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/spaceinvaders/arm/spaceinvaders.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/spaceinvaders/iar/spaceinvaders.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_tempdrv" description="&lt;h1&gt;&lt;b&gt;Display temperature range in Energy Mode 3 using SLSTK3401A_EFM32PG board.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;In this example project temperature is being sampled and the correct&#xA;temperature range will be displayed on the LCD.&#xA;Following messages will be displayed on the LCD based on the temperature&#xA;reading:&#xA;  1. Below 0 degC&#xA;  2. Above 30 degC&#xA;  3. Above 85 degC&#xA;  4. Between 0 &amp; 30 degC&#xA;&#xA;The example project uses temperature driver(tmpdrv) to monitor &#xA;temperature and a display module to display the correct &#xA;temperature range on the LCD. tempdrv allows us to specify &#xA;the temperature level and register a callback if &#xA;the temperature increases or decreases from the specified threshold.&#xA;Moreover, after displaying the right message on the LCD the board goes&#xA;to Energy mode 3 to preserve the power consumption.  &#xA;&#xA;The project uses the EFM32 CMSIS including EMLIB, the board support and &#xA;the package support functions/drivers to demonstrate the use of &#xA;tempdrv and the LCD display.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A_EFM32PG starter kit&#xA;Device: EFM32PG1B200F256GM48&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/tempdrv/SimplicityStudio/SLSTK3401A_tempdrv.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/tempdrv/arm/tempdrv.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/tempdrv/iar/tempdrv.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_textdisplay" description="&lt;h1&gt;&lt;b&gt;Printf output on Sharp Memory LCD LS013B7DH03.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display on the EFM32 Pearl Gecko. In this case the&#xA;display is used as output from a regular printf in the application, as&#xA;an alternative to using LEUART or UART for text output.&#xA;&#xA;The user can customize the behaviour of the DISPLAY driver by changing&#xA;configuration macros in displayconfigapp.h.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/textdisplay/SimplicityStudio/SLSTK3401A_textdisplay.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/textdisplay/arm/textdisplay.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/textdisplay/iar/textdisplay.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_touch" description="&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example demonstrates the capacitive touch capability&#xA;of the SLSTK3401A Starter Kit.&#xA;&#xA;It demonstrates the use of CAPSENSE and DISPLAY drivers.&#xA;Pressing T1/T2 touch pads will decrease/increase the counter shown on the LCD.&#xA;(On kits with slider instead of touch pads, use outermost segments).&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/touch/SimplicityStudio/SLSTK3401A_touch.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/touch/arm/touch.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_vcom" description="&lt;h1&gt;&lt;b&gt;VCOM communication example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and EMLIB to demonstrates the&#xA;use of USART and LEUART communication on the SLSTK3401A Starter Kit &#xA;using the virtual COM port.&#xA;&#xA;Virtual COM port through USB is used in by default this example. Undefine &#xA;&quot;RETARGET_VCOM&quot; in the project to use UART on EXP header pins. For EXP header &#xA;UART communication, serial configuration 115200-8-N-1 is used on EXP pin 1 is GND, &#xA;EXP pin 12 is USART0 Tx and EXP pin 14 is USART0 Rx.&#xA;&#xA;If LEUART mode is configured by defining &quot;RETARGET_LEUART0&quot; as a build option,&#xA;terminal configuration is 9600-8-N-1 if &quot;RETARGET_VCOM&quot; is not defined, and&#xA;115200-8-N-1 if &quot;RETARGET_VCOM&quot; is defined.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit&#xA;Device: EFM32PG1B200F256GM48&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/vcom/SimplicityStudio/SLSTK3401A_vcom.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/vcom/arm/vcom.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/vcom/iar/vcom.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3401A_weatherstation" description="&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the SLSTK3401A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display on the SLSTK3401A kit. In addition, it&#xA;demonstrates the use of Silicon Labs I2C based sensors on the expansion&#xA;board header.&#xA;&#xA;You must have a Silicon Labs Sensor add-on board to make use of this demo.&#xA;Once the demo is started, hold your hand over the gesture sensor. Once&#xA;the sensor detects your hand the display will become active.&#xA;&#xA;Swipe left and right over the sensor to scroll through temperature, humidity&#xA;and UV index. On the temperature screen, you can swipe up or down to change&#xA;between Fahrenheit or Celcius.&#xA;&#xA;Board:  Silicon Labs SLSTK3401A Starter Kit and Sensor Add-on board&#xA;Device: EFM32PG1B200F256GM48&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3401 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3401A_EFM32PG/weatherstation/SimplicityStudio/SLSTK3401A_weatherstation.slsproj,../app/mcu_example/SLSTK3401A_EFM32PG/weatherstation/arm/weatherstation.uvprojx,../app/mcu_example/SLSTK3401A_EFM32PG/weatherstation/iar/weatherstation.eww"/>
    <properties key="core.boardCompatibility" value="brd2500a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <properties key="template.initiallyOpenedResource" value="src/weatherstation.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library&#xD;&#xA;to demonstrate the use of the LED on the SLSTK3402A kit.&#xD;&#xA;This example is intended as a skeleton for new projects.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/blink/SimplicityStudio/SLSTK3402A_blink.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/blink/arm/blink.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLSTK3402A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLSTK3402A kit.&#xD;&#xA;&#xD;&#xA;The user can switch between analog and digital clock modes by pushing&#xD;&#xA;the PB0 button.&#xD;&#xA;&#xD;&#xA;The user can increment the second count by pushing the PB1 button.&#xD;&#xA;The minute count can be incremented by pushing the PB1 button for more&#xD;&#xA;than 2 seconds.&#xD;&#xA;&#xD;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xD;&#xA;and second pointers.&#xD;&#xA;&#xD;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xD;&#xA;only) of the textdisplay driver.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/clock/SimplicityStudio/SLSTK3402A_clock.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/clock/arm/clock.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_cpt007b_demo" description="&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT007B fixed function&#xD;&#xA;board. This demo runs on the EFM32 STK, and communicates with CPT007B through&#xD;&#xA;the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate&#xD;&#xA;whether the capacitive sensing buttons on CPT007B are pressed or released.&#xD;&#xA;This demo supports up to 7 capacitive buttons on CPT007B&#xD;&#xA; &#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit and CPT007B Evaluation Board&#xD;&#xA;Device: EFM32PG12B500F1024GL125&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/cpt007b/SimplicityStudio/SLSTK3402A_cpt007b_demo.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/cpt007b/arm/cpt007b_demo.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/cpt007b/iar/cpt007b_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt007b_demo.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_cpt112s_demo" description="&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This demo demonstrates the capacitive button function of CPT112S fixed&#xD;&#xA;function board. This demo runs on the EFM32 STK,and communicates with&#xD;&#xA;CPT112S through the SMBUS pins on the EXP header. Virtual buttons on&#xD;&#xA;STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S&#xD;&#xA;are pressed or released.&#xD;&#xA; &#xD;&#xA;This demo supports 11 buttons on the CPT112S device.(The CS11 button is&#xD;&#xA;disabled in the default configuration of the board to enable the buzzer)&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit and CPT112S Evaluation Board&#xD;&#xA;Device: EFM32PG12B500F1024GL125&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/cpt112s/SimplicityStudio/SLSTK3402A_cpt112s_demo.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/cpt112s/arm/cpt112s_demo.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/cpt112s/iar/cpt112s_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/cpt112s_demo.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_emlcd" description="&lt;h1&gt;&lt;b&gt;Energy Modes with LCD display example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xD;&#xA;demonstrate the use of the LCD, RTCC, GPIO and various Energy Modes&#xD;&#xA;on the starter kit.&#xD;&#xA;&#xD;&#xA;The example will cycle through Energy Mode EM0-EM3, staying one second in&#xD;&#xA;each mode. PB0 can be pressed anytime to enter EM4.&#xD;&#xA;Wakeup from EM4 is either by reset pushbutton or by GPIO pin (port F pin 7)&#xD;&#xA;connected to pushbutton PB1.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/emlcd/SimplicityStudio/SLSTK3402A_emlcd.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/emlcd/arm/emlcd.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/emlcd/iar/emlcd.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/emlcd.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of&#xD;&#xA;the LCD display, RTCC, GPIO and various Energy Modes (EM).&#xD;&#xA;&#xD;&#xA;Use PB1 to cycle through the energy mode tests available.&#xD;&#xA;Press PB0 to start selected test.&#xD;&#xA;&#xD;&#xA;Note: The EMU power configuration register can only be written once after a&#xD;&#xA;      power-on reset and may be locked to a different configuration. For the&#xD;&#xA;      emode demo to function properly, a power-on reset may be required to&#xD;&#xA;      configure the DCDC properly.&#xD;&#xA;&#xD;&#xA;This demo application has been made to give a quick demo of the&#xD;&#xA;Energy Profiler from Silicon Labs, including EFM32 energy modes.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/emode/SimplicityStudio/SLSTK3402A_emode.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/emode/arm/emode.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of&#xD;&#xA;using FreeRTOS on a Silicon Labs MCU. The configuration uses the tickless mode&#xD;&#xA;of FreeRTOS in order to enter low energy mode when idle.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/freertos_blink/SimplicityStudio/SLSTK3402A_freertos_blink.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/freertos_blink/arm/freertos_blink.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_glib" description="&lt;h1&gt;&lt;b&gt;GLIB example using the Sharp Memory LCD on the SLSTK3402A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the GLIB library and the DISPLAY device driver&#xD;&#xA;together with EFM32 CMSIS including EMLIB and board support package support&#xD;&#xA;functions/drivers to demonstrate driving the Sharp Memory LCD display on&#xD;&#xA;the SLSTK3402A kit.&#xD;&#xA;&#xD;&#xA;The user can switch trough different GLIB example screens by pushing the PB1 button.&#xD;&#xA;The user can reset the demo by pushing the PB0 button.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/glib/SimplicityStudio/SLSTK3402A_glib.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/glib/arm/glib.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/glib/iar/glib.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board Si7021 sensor on the SLSTK3402A board.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display and the Si7021 humidity and temperature sensor on the &#xD;&#xA;SLSTK3402A board.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit.&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/humitemp/SimplicityStudio/SLSTK3402A_humitemp.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_inttemp" description="&lt;h1&gt;&lt;b&gt;ADC temperature sensor demo using the SLSTK3402A_EFM32PG board.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the &#xD;&#xA;board support package support functions/drivers to demonstrate how &#xD;&#xA;to read the ADC temperature sensor. The temperature is sampled and &#xD;&#xA;displayed on the Sharp Memory LCD display every second.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A_EFM32PG starter kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/inttemp/SimplicityStudio/SLSTK3402A_inttemp.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/inttemp/arm/inttemp.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/inttemp/iar/inttemp.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/inttemp.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_leuart" description="&lt;h1&gt;&lt;b&gt;LEUART/LDMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project reads and sends data byte back to terminal using LEUART&#xD;&#xA;while staying in EM2.&#xD;&#xA;&#xD;&#xA;It uses the EFM32 CMSIS and EMLIB, to demonstrate the&#xD;&#xA;use of LEUART communication using LDMA under the EM2 on the &#xD;&#xA;SLSTK3402A Starter Kit.&#xD;&#xA;&#xD;&#xA;The LEUART is configured to be used with LDMA under EM2.&#xD;&#xA;The terminal configuration is 9600-8-N-1.&#xD;&#xA;The LDMA is configured to handle read and write data bytes from LEUART under EM2.&#xD;&#xA;&#xD;&#xA;Testing:&#xD;&#xA;1. Use the expansion header to connect the LEUART to your PC.&#xD;&#xA;2. Pin Configuration:&#xD;&#xA;	2.1. Pin-12 (PA0) LEUART0_TX&#xD;&#xA;	2.2. Pin-14 (PA1) LEUART0_RX&#xD;&#xA;	2.3. Pin-1 Gnd&#xD;&#xA;&#xD;&#xA;3. Configure terminal to 9600-8-N-1.&#xD;&#xA;4. Enter characters from your keyboard and see if you receive the echo on the terminal.&#xD;&#xA;5. Check the average current consumption is equal to EM2 on Energy Profiler.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/leuart/SimplicityStudio/SLSTK3402A_leuart.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/leuart/arm/leuart.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/leuart/iar/leuart.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_aescrypt" description="&lt;h1&gt;&lt;b&gt;mbedTLS AES example using the CRYPTO module in the EFM32PG to&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;accelerate the AES encryption and SHA hash functions of mbedTLS.&#xD;&#xA;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB to run&#xD;&#xA;mbedTLS libraries on the EFM32PG.&#xD;&#xA;&#xD;&#xA;The example redirects standard io to the VCOM virtual serial port of the&#xD;&#xA;SLSTK3402A_EFM32PG kit. By default the serial port setting is 115200-8-N-1.&#xD;&#xA;&#xD;&#xA;The user should connect a terminal emulator program, and follow the&#xD;&#xA;instructions shown on the console.&#xD;&#xA;&#xD;&#xA;The user can select encryption or decryption of a message which should be sent&#xD;&#xA;via the VCOM serial interface.&#xD;&#xA;&#xD;&#xA;A hardcoded 256-bit key is used for encryption and decryption.&#xD;&#xA;&#xD;&#xA;In ecryption mode, the example will ask the user for a short phrase to&#xD;&#xA;generate an initial vector used in the AES encryption process. The user may type&#xD;&#xA;any phrase ended by newline or limited to a maximum of 16 bytes. After the short&#xD;&#xA;phrase, the user should start typing in the message to be encrypted, followed by&#xD;&#xA;a newline to mark the end of the message. The message length is limited to&#xD;&#xA;the #define MAX_MESSAGE_SIZE_ENCRYPTION. Then the program will encrypt the&#xD;&#xA;message (plaintext), and print out the ciphertext, preceded with the initial&#xD;&#xA;vector of 16 bytes and followed by a message digest tag of 32 bytes. All data&#xD;&#xA;is converted to hexadecimal readable text format before sent to the serial port.&#xD;&#xA;The format is:&#xD;&#xA;Initial Vector(16 bytes) | Ciphertext | Message Digest Tag (32 bytes)&#xD;&#xA;&#xD;&#xA;The user can copy the output and feed it back to the program for decryption&#xD;&#xA;later. The user need to reset the kit in order to run decryption mode.&#xD;&#xA;&#xD;&#xA;In decryption mode, the example will expect to receive a decrypted message&#xD;&#xA;in the same format as generated by the encryption (as shown above).&#xD;&#xA;&#xD;&#xA;The example has been instrumented with code to count the number of clock&#xD;&#xA;cycles spent in the encryption and decryption loops. To observe the&#xD;&#xA;performance gain of CRYPTO acceleration, the user can switch off&#xD;&#xA;CRYPTO hardware acceleration by compiling with -DNO_CRYPTO_ACCELERATION&#xD;&#xA;in the compiler command line.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/mbedtls_aescrypt/SimplicityStudio/SLSTK3402A_aescrypt.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/mbedtls_aescrypt/arm/aescrypt.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/mbedtls_aescrypt/iar/aescrypt.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="test/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_ecdh" description="&lt;h1&gt;&lt;b&gt;mbedTLS ECDH example using the CRYPTO module in the EFM32PG to&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;accelerate the ECDH API functions of mbedTLS.&#xD;&#xA;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB to run&#xD;&#xA;mbedTLS libraries on the EFM32PG.&#xD;&#xA;&#xD;&#xA;The example use the CTR-DRBG, a pseudo random number generator (PRNG)&#xD;&#xA;included in mbedTLS to generate random private keys for both peers&#xD;&#xA;(client and server) that will share the ECDH secret. If the example is&#xD;&#xA;running on a device including a TRNG hw module (True Random Number Generator)&#xD;&#xA;the TRNG will be used as entropy source to seed the CTR-DRBG. If the device&#xD;&#xA;does not incorporate a TRNG, the example will use dummy data to seed the&#xD;&#xA;CTR-DRBG. The entropy accumulator of mbedTLS will use SHA256 to hash the&#xD;&#xA;the entropy data pool which is filled with data from the entropy sources.&#xD;&#xA;&#xD;&#xA;The CTR-DRBG involve use of AES which is accelerated by the CRYPTO AES&#xD;&#xA;accelerator.&#xD;&#xA;&#xD;&#xA;The entropy accumulator of mbedTLS is setup to use SHA-256 which is&#xD;&#xA;accelerated by the CRYPTO SHA-256 accelerator.&#xD;&#xA;&#xD;&#xA;The example redirects standard I/O to the VCOM virtual serial port of the&#xD;&#xA;SLSTK3402A_EFM32PG kit. The user can use a terminal emulator program to&#xD;&#xA;connect to the serial port with the default settings of 115200-8-N-1.&#xD;&#xA;&#xD;&#xA;The example has been instrumented with code to count the number of clock&#xD;&#xA;cycles spent inside the ecdh api calls, mbedtls_ecdh_gen_public and&#xD;&#xA;mbedtls_ecdh_compute_shared. The results are printed to stdout, i.e.&#xD;&#xA;the VCOM serial port console.&#xD;&#xA;&#xD;&#xA;To check the performance gain of CRYPTO acceleration, the user&#xD;&#xA;can switch off CRYPTO hardware acceleration by compiling with&#xD;&#xA;-DNO_CRYPTO_ACCELERATION in the compiler command line.&#xD;&#xA;&#xD;&#xA;The user can change the specific ECC curve used in the example&#xD;&#xA;by modifying the MBEDTLS_ECC_ID macro definition. Available curves with&#xD;&#xA;CRYPTO acceleration support are:&#xD;&#xA;MBEDTLS_ECP_DP_SECP256R1&#xD;&#xA;MBEDTLS_ECP_DP_SECP224R1&#xD;&#xA;MBEDTLS_ECP_DP_SECP192R1&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/mbedtls_ecdh/SimplicityStudio/SLSTK3402A_ecdh.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/mbedtls_ecdh/iar/ecdh.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="test/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_ecdsa" description="&lt;h1&gt;&lt;b&gt;mbedTLS ECDSA example using the CRYPTO module in the EFM32PG to&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;accelerate the ECDSA API functions of mbedTLS.&#xD;&#xA;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB to run&#xD;&#xA;mbedTLS libraries on the EFM32PG.&#xD;&#xA;&#xD;&#xA;The example redirects standard I/O to the VCOM virtual serial port of the&#xD;&#xA;SLSTK3402A_EFM32PG kit. The user can use a terminal emulator program to&#xD;&#xA;connect to the serial port with the default settings of 115200-8-N-1.&#xD;&#xA;&#xD;&#xA;The example has been instrumented with code to count the number of clock&#xD;&#xA;cycles spent inside the ecdsa api calls, mbedtls_ecdsa_genkey,&#xD;&#xA;mbedtls_ecdsa_write_signature and mbedtls_ecdsa_read_signature.&#xD;&#xA;The results are printed to stdout, i.e. the VCOM serial port console.&#xD;&#xA;To check the performance gain of CRYPTO acceleration, the user&#xD;&#xA;can switch off CRYPTO hardware acceleration by compiling with&#xD;&#xA;-DNO_CRYPTO_ACCELERATION in the compiler command line.&#xD;&#xA;&#xD;&#xA;The user can change the specific ECC curve used in the example&#xD;&#xA;by modifying the ECPARAMS macro definition. Available curves with&#xD;&#xA;CRYPTO acceleration support are:&#xD;&#xA;MBEDTLS_ECP_DP_SECP256R1&#xD;&#xA;MBEDTLS_ECP_DP_SECP224R1&#xD;&#xA;MBEDTLS_ECP_DP_SECP192R1&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/mbedtls_ecdsa/SimplicityStudio/SLSTK3402A_ecdsa.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/mbedtls_ecdsa/iar/ecdsa.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="test/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_micriumos_blink" description="&lt;h1&gt;&lt;b&gt;MicriumOS Blink example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example shows how to initialize and run MicriumOS on the kit. The &#xD;&#xA;application will start a single task which is blinking LED 0 at a regular &#xD;&#xA;interval. This examples is a good starting point for applications that want &#xD;&#xA;to use MicriumOS.&#xD;&#xA;&#xD;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xD;&#xA;SystemView Trace is enabled by default and can be disabled by changing the &#xD;&#xA;OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used&#xD;&#xA;to inspect the runtime behaviour of this example, it will give a nice overview&#xD;&#xA;of the tasks and interrupts in the application. SystemView can be downloaded &#xD;&#xA;from https://www.segger.com/systemview.html&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/micriumos_blink/SimplicityStudio/SLSTK3402A_micriumos_blink.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/micriumos_blink/arm/micriumos_blink.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/micriumos_blink/iar/micriumos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/ex_main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_micriumos_dynamic" description="&lt;h1&gt;&lt;b&gt;Micrium OS Dynamic Tick example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example shows how to initialize and run MicriumOS on the kit. The &#xD;&#xA;application will start a single task which is blinking LED 0 at a regular &#xD;&#xA;interval. This example is using the dynamic tick feature of Micrium OS &#xD;&#xA;to be able to enter EM2 whenever the application is idle. This examples &#xD;&#xA;is a good starting point for applications that want to use Micrium OS &#xD;&#xA;while using EM2.&#xD;&#xA;&#xD;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xD;&#xA;SystemView Trace is disabled by default in this example, but can be enabled by &#xD;&#xA;changing the OS_CFG_TRACE_EN configuration inside the os_cfg.h file. &#xD;&#xA;SystemView can be used to inspect the runtime behaviour of this example, it &#xD;&#xA;will give a nice overview of the tasks and interrupts in the application. &#xD;&#xA;SystemView can be downloaded from https://www.segger.com/systemview.html&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/micriumos_dynamic/SimplicityStudio/SLSTK3402A_micriumos_dynamic.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/micriumos_dynamic/arm/micriumos_dynamic.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/micriumos_dynamic/iar/micriumos_dynamic.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_powertest" description="&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library&#xD;&#xA;to demonstrate the use of the various Energy Modes available on the&#xD;&#xA;EFM32PG12B500F1024GL125. When running this example, the Energy Profiler tool&#xD;&#xA;in Simplicity Studio can be used to show the power consumption of each&#xD;&#xA;energy mode.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/powertest/SimplicityStudio/SLSTK3402A_powertest.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/powertest/arm/powertest.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/powertest/iar/powertest.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_prs" description="&lt;h1&gt;&lt;b&gt;PRS example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library&#xD;&#xA;to demonstrate the use of the Peripheral Reflex System (PRS) on the &#xD;&#xA;SLSTK3402A kit. The LETIMER0 toggles LED1 via PRS channel 0 at every 250ms.&#xD;&#xA;Button BTN0 toggles LED0 at every 5th press via PCNT0 and PRS channel 2.&#xD;&#xA;This example operates in EM2.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/prs/SimplicityStudio/SLSTK3402A_prs.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/prs/arm/prs.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/prs/iar/prs.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/prs.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_spaceinvaders" description="&lt;h1&gt;&lt;b&gt;Space Invaders game using the Memory LCD on the SLSTK3402A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLSTK3402A Starter Kit.&#xD;&#xA;&#xD;&#xA;Game instructions are displayed on the startup screen.&#xD;&#xA;(On kits with slider instead of touch pads, use outermost segments to move tank).&#xD;&#xA;&#xD;&#xA;For debug builds the game may run slow because they are not optimized&#xD;&#xA;for speed. The user should build and run the release builds for&#xD;&#xA;optimized performance.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/spaceinvaders/SimplicityStudio/SLSTK3402A_spaceinvaders.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/spaceinvaders/arm/spaceinvaders.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/spaceinvaders/iar/spaceinvaders.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_tempdrv" description="&lt;h1&gt;&lt;b&gt;Display temperature range in Energy Mode 3 using SLSTK3402A_EFM32PG board.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;In this example project temperature is being sampled and the correct&#xD;&#xA;temperature range will be displayed on the LCD.&#xD;&#xA;Following messages will be displayed on the LCD based on the temperature&#xD;&#xA;reading:&#xD;&#xA;  1. Below 0 degC&#xD;&#xA;  2. Above 30 degC&#xD;&#xA;  3. Above 85 degC&#xD;&#xA;  4. Between 0 &amp; 30 degC&#xD;&#xA;&#xD;&#xA;The example project uses temperature driver(tmpdrv) to monitor &#xD;&#xA;temperature and a display module to display the correct &#xD;&#xA;temperature range on the LCD. tempdrv allows us to specify &#xD;&#xA;the temperature level and register a callback if &#xD;&#xA;the temperature increases or decreases from the specified threshold.&#xD;&#xA;Moreover, after displaying the right message on the LCD the board goes&#xD;&#xA;to Energy mode 3 to preserve the power consumption.  &#xD;&#xA;&#xD;&#xA;The project uses the EFM32 CMSIS including EMLIB, the board support and &#xD;&#xA;the package support functions/drivers to demonstrate the use of &#xD;&#xA;tempdrv and the LCD display.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A_EFM32PG starter kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/tempdrv/SimplicityStudio/SLSTK3402A_tempdrv.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/tempdrv/arm/tempdrv.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/tempdrv/iar/tempdrv.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_textdisplay" description="&lt;h1&gt;&lt;b&gt;Printf output on Sharp Memory LCD LS013B7DH03.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the EFM32 Pearl Gecko. In this case the&#xD;&#xA;display is used as output from a regular printf in the application, as&#xD;&#xA;an alternative to using LEUART or UART for text output.&#xD;&#xA;&#xD;&#xA;The user can customize the behaviour of the DISPLAY driver by changing&#xD;&#xA;configuration macros in displayconfigapp.h.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/textdisplay/SimplicityStudio/SLSTK3402A_textdisplay.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/textdisplay/arm/textdisplay.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/textdisplay/iar/textdisplay.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_touch" description="&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example demonstrates the capacitive touch capability&#xD;&#xA;of the SLSTK3402A Starter Kit.&#xD;&#xA;&#xD;&#xA;It demonstrates the use of CAPSENSE and DISPLAY drivers.&#xD;&#xA;Pressing T1/T2 touch pads will decrease/increase the counter shown on the LCD.&#xD;&#xA;(On kits with slider instead of touch pads, use outermost segments).&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/touch/SimplicityStudio/SLSTK3402A_touch.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/touch/arm/touch.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/touch/iar/touch.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_vcom" description="&lt;h1&gt;&lt;b&gt;VCOM communication example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS and EMLIB to demonstrates the&#xD;&#xA;use of USART and LEUART communication on the SLSTK3402A Starter Kit &#xD;&#xA;using the virtual COM port.&#xD;&#xA;&#xD;&#xA;Virtual COM port through USB is used in by default this example. Undefine &#xD;&#xA;&quot;RETARGET_VCOM&quot; in the project to use UART on EXP header pins. For EXP header &#xD;&#xA;UART communication, serial configuration 115200-8-N-1 is used on EXP pin 1 is GND, &#xD;&#xA;EXP pin 12 is USART0 Tx and EXP pin 14 is USART0 Rx.&#xD;&#xA;&#xD;&#xA;If LEUART mode is configured by defining &quot;RETARGET_LEUART0&quot; as a build option,&#xD;&#xA;terminal configuration is 9600-8-N-1 if &quot;RETARGET_VCOM&quot; is not defined, and&#xD;&#xA;115200-8-N-1 if &quot;RETARGET_VCOM&quot; is defined.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/vcom/SimplicityStudio/SLSTK3402A_vcom.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/vcom/arm/vcom.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/vcom/iar/vcom.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_weatherstation" description="&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the SLSTK3402A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the Sharp Memory LCD display on the SLSTK3402A kit. In addition, it&#xD;&#xA;demonstrates the use of Silicon Labs I2C based sensors on the expansion&#xD;&#xA;board header.&#xD;&#xA;&#xD;&#xA;You must have a Silicon Labs Sensor add-on board to make use of this demo.&#xD;&#xA;Once the demo is started, hold your hand over the gesture sensor. Once&#xD;&#xA;the sensor detects your hand the display will become active.&#xD;&#xA;&#xD;&#xA;Swipe left and right over the sensor to scroll through temperature, humidity&#xD;&#xA;and UV index. On the temperature screen, you can swipe up or down to change&#xD;&#xA;between Fahrenheit or Celcius.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit and Sensor Add-on board&#xD;&#xA;Device: EFM32PG12B500F1024GL125&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/weatherstation/SimplicityStudio/SLSTK3402A_weatherstation.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/weatherstation/arm/weatherstation.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/weatherstation/iar/weatherstation.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/weatherstation.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the capacitive sensing firmware library to sample&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xA;qualification status, and other state variables can be displayed and examined&#xA;in the Capacitive Sensing Profiler tool.&#xA;&#xA;Board:  Silicon Labs SLSTK3402A Starter Kit&#xA;Device: EFM32PG12B500F1024GL125&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/cslib/SimplicityStudio/SLSTK3402A_cslib.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/cslib/arm/cslib.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_lcsense" description="&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and demonstrates the use of &#xA;the LESENSE peripheral on the board.&#xA;&#xA;This demo has two modes. To change between them, press BTN0. In &#xA;Single Mode (default) the EFM32 wakes up whenever a metal object is &#xA;passed above the LC sensor in th bottom right hand corner of the STK. &#xA;In 5x Mode, the EFM32 only wakes up every fifth time the metal object &#xA;is passed over the sensor.&#xA;&#xA;The VDAC is set up to drive the LC sensor voltage to half of VDD.&#xA;LESENSE is set up to periodically drive the low side of the LC sensor&#xA;low for a short time. This makes the LC sensor voltage oscillate&#xA;around the VDAC voltage. This oscillation dampens faster if there is&#xA;metal close to the sensor.&#xA;&#xA;The ACMP is set up to compare the oscillating LC sensor voltage&#xA;against a threshold which is set just above the VDAC voltage. The&#xA;output from the ACMP will pulse high whenever the oscillations go&#xA;above the threshold voltage. When metal is close to the sensor, the&#xA;oscillation dampens faster and there will be fewer pulses on the ACMP&#xA;output. Each time after LESENSE drives the LC sensor pin low, it&#xA;counts how many pulses it receives from the ACMP and compares this&#xA;count against a threshold to determine if there is metal close to the&#xA;LC sensor or not.&#xA;&#xA;LESENSE controls both the VDAC and the ACMP and turns these on only&#xA;when needed to measure the sensor to save power.&#xA;&#xA;In Single Mode LESENSE is set up to give an interrupt whenever the&#xA;ACMP pulse count value is below the counter threshold.&#xA;&#xA;In 5x Mode LESENSE does not wake the EFM32 up, but instead generates a&#xA;PRS pulse every time the counter threshold is breached. Each pulse on&#xA;this PRS channel will then cause the PCNT to increase its count value&#xA;until it reaches it's compare value (5) and wakes up the EFM32.&#xA;&#xA;Board: Silicon Labs SLSTK3402A_EFM32PG12 Starter Kit&#xA;Device: EFM32PG12B500F1024GL125&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/lcsense/SimplicityStudio/SLSTK3402A_lcsense.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/lcsense/arm/lcsense.uvprojx,../app/mcu_example/SLSTK3402A_EFM32PG12/lcsense/iar/lcsense.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/lcsense.c"/>
  </descriptors>
  <descriptors label="SLSTK3402A_micriumos_wifi_whiteboard" description="&lt;h1&gt;&lt;b&gt;Wireless Whiteboard Demo: Micrium OS + WiFi + Graphics LCD&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;In this demo you get to draw something on your smart phone and watch the&#xA;drawing being displayed in the board's LCD. &#xA;&#xA;Hardware Requirements&#xA;---------------------&#xA;&#xA;This demo requires the three boards illustrated in the following diagram:&#xA;&#xA; +---------------------------------------+  +----------------------------+&#xA; | EFM32 Pearl Gecko                     |  | Wireless Expansion Board   |&#xA; | SLSTK3402A                            |--| PCB8016                    |&#xA; | PCB2501                               |--|           +--------------+ |&#xA; |                                       |--|           | Wizard Gecko | |&#xA; |                                       |--|           | WGM110       | |&#xA; |                                       |--|           | PCB4320      | |&#xA; |                                       |--|           |              | |&#xA; |                                       |--|           |              | |&#xA; |                                       |--|           +--------------+ |&#xA; |    SWITCH                             |--|   SWITCH                   |&#xA; |  BAT  [AEM]                           |  |  3V  [5V]                  |&#xA; +---------------------------------------+  +----------------------------+&#xA;                                        20-pin&#xA;                                       Exp. Hdr.&#xA;&#xA;Configuration&#xA;-------------&#xA;&#xA;1. Connect the boards as illustrated in the diagram above.&#xA;&#xA;2. Configure the board switches as illustrated in the previous diagram:&#xA;&#xA;   a. AEM&#xA;   b. 5V&#xA;&#xA;3. Enter your WiFi access point's SSID and Password in the file app_wifi_cfg.h&#xA;&#xA;4. Build the project.&#xA;&#xA;Execution&#xA;---------&#xA;&#xA;1. Execute the application by launching a debug session and wait for the&#xA;   board to connect to the TCP server at demo.silabs.com&#xA;&#xA;   The application will display a series of messages to show you the progress&#xA;   as follows:&#xA;&#xA;   a. Connecting to [Your SSID]&#xA;   b. Connecting to [demo.silabs.com resolved IP address]&#xA;   c. MAC Address: [Your MAC address]&#xA;&#xA;2. Open your favorite browser, go to the web page at http://demo.silabs.com&#xA;   and select the Wireless Whiteboard demo for the Pearl Gecko.&#xA;&#xA;3. Enter your board's MAC address in the web page and start drawing.&#xA;&#xA;4. Press the buttons to switch between screens.&#xA;&#xA;Tools&#xA;-----&#xA;&#xA;This demo features two development tools; uC/Probe and SystemView.&#xA;&#xA;To learn more about these tools take the following steps:&#xA;&#xA;1. uC/Probe:&#xA;&#xA;   Click the button uC/Probe on the toolbar of Simplicity Studio.&#xA;&#xA;2. SystemView:&#xA;&#xA;   a. Install SystemView from https://www.segger.com/systemview.html&#xA;   &#xA;   b. Enable kernel tracing by setting OS_CFG_TRACE_EN to DEF_ENABLED&#xA;      in os_cfg.h&#xA;   &#xA;   c. Rebuild the project.&#xA; &#xA;   d. Launch a debugging session.&#xA;   &#xA;   e. Open SystemView and press the F5 key or select Target from the&#xA;      Options Menu and click Start Recording.&#xA;&#xA;Board: Silicon Labs SLSTK3402A_EFM32PG12 Starter Kit&#xA;Device: EFM32PG12B500F1024GL125&#xA;Expansion Board: PCB8016&#xA;WiFi Module: Wizard Gecko WGM110 PCB4320&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Pearl Gecko 3402 Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3402A_EFM32PG12/micriumos_wifi_whiteboard/SimplicityStudio/SLSTK3402A_micriumos_wifi_whiteboard.slsproj,../app/mcu_example/SLSTK3402A_EFM32PG12/micriumos_wifi_whiteboard/iar/micriumos_wifi_whiteboard.eww"/>
    <properties key="core.boardCompatibility" value="brd2501a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xA;a skeleton for new projects.&#xA;&#xA;Board:  Silicon Labs EFM32GG11_STK3701 Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/blink/SimplicityStudio/SLSTK3701A_blink.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/blink/arm/blink.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_can_board" description="&lt;h1&gt;&lt;b&gt;CAN bus example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 EMLIB peripheral library to demonstrate &#xA;the use of CAN bus. This demo requires CAN expansion board ISO-CAN-EXP REV 1.0&#xA;This example uses glib example to show the CAN actions on the display. &#xA;GPIO interrupt are implemented in order to make use of the buttons. &#xA;BTN0 is used to send a message using CAN0 and LED0 will be turned on. &#xA;BTN1 is used to send a message using CAN1 and LED1 will be turned on.&#xA;On the display number of receptions of the messages and number of&#xA;transmissions are shown for each CAN peripherals. As well as the id of the&#xA;arrived message and the content. To test this example properly, the kit&#xA;needs to be connected with the CAN tranceivers and another CAN devices.&#xA;This example is intended as a skeleton for new projects. &#xA;&#xA;Board: Silicon Labs EFM32GG11_STK3701 Starter Kit&#xA;&#xA;Device: EFM32GG11B820F2048GL192, ISO-CAN-EXP REV 1.0&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/can_board/SimplicityStudio/SLSTK3701A_can_board.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/can_board/arm/can_board.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/can_board/iar/can_board.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/can_demo.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_cslib" description="&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the capacitive sensing firmware library to sample&#xA;capacitive sensing buttons on the STK.  Real-time sample information, touch&#xA;qualification status, and other state variables can be displayed and examined&#xA;in the Capacitive Sensing Profiler tool.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/cslib/SimplicityStudio/SLSTK3701A_cslib.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/cslib/arm/cslib.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/cslib/iar/cslib.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_emode" description="&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFR32 CMSIS and demonstrates the use of&#xA;the LCD display, RTCC, GPIO and various Energy Modes (EM).&#xA;&#xA;Use PB1 to cycle through the energy mode tests available.&#xA;Press PB0 to start selected test.&#xA;&#xA;Note: The EMU power configuration register can only be written once after a&#xA;      power-on reset and may be locked to a different configuration. For the&#xA;      emode demo to function properly, a power-on reset may be required to&#xA;      configure the DCDC properly.&#xA;&#xA;This demo application has been made to give a quick demo of the&#xA;Energy Profiler from Silicon Labs, including EFM32 energy modes.&#xA;&#xA;Board:  Silicon Labs EFM32GG11_STK3701 Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/emode/SimplicityStudio/SLSTK3701A_emode.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/emode/arm/emode.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/emode/iar/emode.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_freertos_blink" description="&lt;h1&gt;&lt;b&gt;FreeRTOS example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the FreeRTOS, and gives a basic demonstration of&#xA;using FreeRTOS on a Silicon Labs MCU. The configuration uses the tickless mode&#xA;of FreeRTOS in order to enter low energy mode when idle.&#xA;&#xA;Board:  Silicon Labs EFM32GG11_STK3701 Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/freertos_blink/SimplicityStudio/SLSTK3701A_freertos_blink.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/freertos_blink/arm/freertos_blink.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/freertos_blink/iar/freertos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_glib" description="&lt;h1&gt;&lt;b&gt;GLIB example using the Sharp Memory LCD on the SLSTK3701A.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the GLIB library and the DISPLAY device driver&#xA;together with EFM32 CMSIS including EMLIB and board support package support&#xA;functions/drivers to demonstrate driving the 8 color Sharp Memory LCD display on&#xA;the SLSTK3701A kit.&#xA;&#xA;Included with the example is also a python script img2rgb3header.py that converts&#xA;RGB image files (PNG, BMP, JPG) to 3-bit RGB values stored in a byte array in a C &#xA;header file.&#xA;&#xA;The user can switch trough different GLIB example screens by pushing the BTN0&#xA;(forwards) or BTN1 (backwards) buttons.&#xA;&#xA;Board: Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/glib/SimplicityStudio/SLSTK3701A_glib.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/glib/arm/glib.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/glib/iar/glib.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_helges_demo" description="&lt;h1&gt;&lt;b&gt;This example project demonstrates a wide range of features of the EFM32GG11 MCU and the SLSTK3701A Starter Kit.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;Browse different app screens and interact with them using the touch slider.&#xA;- swipe the slider left or right to change screen&#xA;- some of the app screens will show virtual buttons in the lower left and/or lower&#xA;  right corner of the screen. To trigger the buttons, tap the left or right end of&#xA;  the slider, respectively. Whenever the phrase &quot;click the ACTION button&quot; is mentioned&#xA;  later in this file, it should be understood as tapping the end of the touch slider&#xA;  corresponding to the ACTION button label on the lower left or lower right corner of&#xA;  the screen.&#xA;&#xA;IMPORTANT: The touch slider is calibrated during startup, ie. when the kit is powered,&#xA;reset or recovering from a backup event. To ensure that the calibration is successful&#xA;and that the touch slider will work as expected, it is important that the user does not&#xA;touch the slider while the calibration is in progress. The calibration process is&#xA;completed when data is visible on the display.&#xA;&#xA;The runtime since last reset is shown in the top right corner of the screen of all apps.&#xA;   &#xA;The available app screens include:&#xA;- RGB LED app&#xA;  this app lets the user change the color and light intensity of each of the two RGB LEDs&#xA;  on the STK3701A. Click the &quot;Settings&quot; button to enter change settings mode. Change the&#xA;  value of the highlighted setting by swiping the slider. Click the &quot;Next&quot; button to&#xA;  cycle through the available settings. Click the &quot;Exit&quot; button to exit the settings mode.&#xA;  &#xA;- Si7210 Hall-Effect Sensor app&#xA;  This app shows the magnitude and polarity of the magnetic field measured by the Si7210&#xA;  hall-effect sensor on the STK3701A.&#xA;  &#xA;- Si7021 Relative Humidity and Temperature Sensor app&#xA;  This app shows the temperature and relative humidity measured by the Si7021 relative&#xA;  humidity and temperature sensor on the STK3701A. Click the &quot;C/F&quot; button to toggle&#xA;  Centigrade or Fahrenheit scale for the temperature.&#xA;  &#xA;- Capacitive Touch app&#xA;  This app shows the position and force the user is applying to the touch slider, as well&#xA;  as the duration of the last touch event. Click &quot;Swipe lock&quot; to prevent changing app&#xA;  screen while using the app. Click &quot;Unlock&quot; to allow changing app screen again.&#xA;  &#xA;- Low Energy Inductive Sense (LC Sense) and True Random Number Generator (TRNG) app&#xA;  This app counts the number of times the inductive sense element connected to the&#xA;  EFM32GG11's LESENSE peripheral has been triggered. The sensor is triggered when a&#xA;  metallic object comes close to the LC Sense inductor. The counter is active even when&#xA;  the LC Sense app is not shown on the screen. Click the &quot;Clr Count&quot; button to reset the&#xA;  counter.&#xA;  &#xA;  This app also demonstrates the EFM32GG11's NIST-certified true random number generator&#xA;  (TRNG). The TRNG generates a 128-bit random number every time the LC sensor is triggered,&#xA;  and this number is used to randomize the RGB LEDs' colors.&#xA;  &#xA;- Backup Power Domain (BU Power) app&#xA;  This app demonstrates the EFM32GG11s ability to use a backup power source when its main&#xA;  power source is unavailable. The BU Power app screen displays the following metrics:&#xA;  - Voltage of the backup battery on the STK3701A (BUVDD)&#xA;  - Graphical display of the BUVDD voltage over the last 90 seconds&#xA;  - Charge status&#xA;  - Voltage of the main power supply (AVDD)&#xA;  - Number of backup power (BU) events encountered&#xA;  - Duration of the last BU event&#xA;  - Total duration of all BU events&#xA;  With a properly charged backup battery, the EFM32GG11 will retain the RGB LED settings&#xA;  and the selected app, as well as keep the runtime timer running even when the main power&#xA;  supply is removed.&#xA;  To charge the battery, click the &quot;Charge On&quot; button. The battery will keep on charging&#xA;  even if the user changes to another app. Keep charging until the status reads &quot;BU Ready&quot;.&#xA;  Click the &quot;Charge On&quot; button once more to stop charging.&#xA;  The user can now disconnect the main power supply for 10-30 minutes, depending on the&#xA;  charge level of the backup battery, without losing the app settings. Note, however, that&#xA;  to properly recover from a power outage, the user should supply power using the &quot;BAT&quot;&#xA;  setting on the power switch, since the STK3701A board controller might issue a device reset&#xA;  when re-connecting a power supply using the &quot;AEM&quot; or &quot;USB&quot; settings on the power switch.&#xA;  &#xA;  If the user desires to discharge the battery, click the &quot;Discharge&quot; button. Allow 30-60&#xA;  seconds to fully discharge the battery, depending on the charge level of the battery.&#xA;  The BUVDD voltage will read 0.00 Volts when discharging, regardless of the actual&#xA;  voltage of the backup battery. Click the &quot;Discharge&quot; button once more to stop the&#xA;  discharge process. The user can also click the &quot;Charge On&quot; button when discharging to&#xA;  switch directly to recharging the backup battery.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/helges_demo/SimplicityStudio/SLSTK3701A_helges_demo.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/helges_demo/arm/helges_demo.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/helges_demo/iar/helges_demo.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_lte_xbee_device_cloud" description="&lt;h1&gt;&lt;b&gt;Digi XBee Device Cloud example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses a Digi XBee module to communicate via LTE-M. It&#xA;transmits temperature data to the Digi Device Cloud and allows a Cloud user to&#xA;modify LED's on the board.&#xA;&#xA;In order to use the Digi Device Cloud, the user must create an account on the&#xA;Digi Remote Manager (see www.digi.com/products/cloud/digi-remote-manager).&#xA;Once the user has an account on Digi Remote Manager, he should set the compiler&#xA;symbols USER to his username and PWD to his password, respectively. Next, &#xA;rebuild the example project. In Studio, these compiler symbols can be set at:&#xA;&#xA;Project Properties-&gt;GNU ARM C Compiler-&gt;Symbols.&#xA;&#xA;Note: Digi Remote Manager does not currently support controlling board LED's&#xA;remotely. In order to exercise this feature, use the included Python script&#xA;lte_xbee_device_cloud\scripts\rgb_uploader.py.&#xA;&#xA;At startup, the EFM32GG11 will attempt to communicate with the XBee module&#xA;via UART. The application assumes the XBee is configured with a baudrate of&#xA;115200 bps and its API mode set to API Mode Without Escapes. If this initial&#xA;communication fails, the behavior of the application can be controlled by&#xA;defining or not defining a symbol called XBEE_DEMO_CONFIG at the compiler&#xA;command line.&#xA;&#xA;If XBEE_DEMO_CONFIG is defined, the application will reset the XBee and then&#xA;attempt to configure it to 115200 bps/API Mode Without Escapes.&#xA;&#xA;If XBEE_DEMO_CONFIG is not defined, the application will halt execution in a&#xA;while(1) loop at the point of failure.&#xA;&#xA;If XBEE_DEMO_HOLOGRAM_SIM is defined and XBEE_DEMO_CONFIG, the application will&#xA;configure the XBee to work with the Hologram SIM card. This configuration&#xA;involves disabling NB-IoT on the modem. This is a slow process that takes over&#xA;20 seconds. Once NB-IoT has been disabled on a given XBee, that setting is&#xA;saved in non-volatile memory. So, if the user is confident that his XBee is&#xA;configured correctly for use with the Hologram SIM card, he can remove this&#xA;configuration define in the project settings and the demo will still operate&#xA;correctly.&#xA;&#xA;If XBEE_CHANGE_APN is defined, the application will configure the Access Point &#xA;Name (APN) setting of the XBee. The default value in &quot;-&quot;. In the case of the &#xA;Hologram SIM card, it is recommended to set the APN to &quot;hologram&quot;.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit attached to BRD8021A Expansion Board&#xA;Device: EFM32GG11B820F2048GL192&#xA;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/lte_xbee_device_cloud/SimplicityStudio/SLSTK3701A_lte_xbee_device_cloud.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/lte_xbee_device_cloud/arm/lte_xbee_device_cloud.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/lte_xbee_device_cloud/iar/lte_xbee_device_cloud.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_lte_xbee_sms" description="&lt;h1&gt;&lt;b&gt;Digi XBee SMS example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses a Digi XBee module to receive and send SMS text&#xA;messages via LTE-M.&#xA;&#xA;To run, build the example project, load it onto the SLSTK3701A board, and&#xA;follow the directions on the LCD.&#xA;&#xA;Note: As of August, 2018, Verizon SIM cards do not support SMS via LTE-M.&#xA;If the project is built with XBEE_DEMO_CONFIG defined, the application will&#xA;configure the XBee to connect only to AT&amp;T-compatible carriers.&#xA;&#xA;Note: When using the Hologram SIM, the incoming and outgoing phone numbers&#xA;for the XBee will be different. The outgoing phone number may be a +88 number.&#xA;Carriers have been known to block incoming +88 numbers in some instances. If&#xA;you are not receiving responses from the XBee, this may be the issue.&#xA;&#xA;At startup, the EFM32GG11 will attempt to communicate with the XBee module&#xA;via UART. The application assumes the XBee is configured with a baudrate of&#xA;115200 bps and its API mode set to API Mode Without Escapes. If this initial&#xA;communication fails, the behavior of the application can be controlled by&#xA;defining or not defining a symbol called XBEE_DEMO_CONFIG at the compiler&#xA;command line.&#xA;&#xA;If XBEE_DEMO_CONFIG is defined, the application will reset the XBee and then&#xA;attempt to configure it to 115200 bps/API Mode Without Escapes.&#xA;&#xA;If XBEE_DEMO_CONFIG is not defined, the application will halt execution in a&#xA;while(1) loop at the point of failure.&#xA;&#xA;If XBEE_DEMO_HOLOHRAM_SIM is defined, the application will not try to read the&#xA;phone number from the SIM card, because Hologram SIM cards do not store the&#xA;phone number.&#xA;&#xA;If XBEE_DEMO_HOLOGRAM_SIM is defined and XBEE_DEMO_CONFIG, the application will&#xA;configure the XBee to work with the Hologram SIM card. This configuration&#xA;involves disabling NB-IoT on the modem. This is a slow process that takes over&#xA;20 seconds. Once NB-IoT has been disabled on a given XBee, that setting is&#xA;saved in non-volatile memory. So, if the user is confident that his XBee is&#xA;configured correctly for use with the Hologram SIM card, he can remove this&#xA;configuration define in the project settings and the demo will still operate&#xA;correctly.&#xA;&#xA;If XBEE_CHANGE_APN is defined, the application will configure the Access Point &#xA;Name (APN) setting of the XBee. The default value in &quot;-&quot;. In the case of the &#xA;Hologram SIM card, it is recommended to set the APN to &quot;hologram&quot;.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit attached to BRD8021A Expansion Board&#xA;Device: EFM32GG11B820F2048GL192&#xA;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/lte_xbee_sms/SimplicityStudio/SLSTK3701A_lte_xbee_sms.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/lte_xbee_sms/arm/lte_xbee_sms.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/lte_xbee_sms/iar/lte_xbee_sms.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_lte_xbee_time_server" description="&lt;h1&gt;&lt;b&gt;Digi XBee Time Server example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses a Digi XBee module to receive the current time from&#xA;an online timer server and displays the time on the LCD.&#xA;&#xA;To run, build the example project, load it onto the SLSTK3701A board, and&#xA;look at the LCD to see the time.&#xA;&#xA;At startup, the EFM32GG11 will attempt to communicate with the XBee module&#xA;via UART. The application assumes the XBee is configured with a baudrate of&#xA;115200 bps and its API mode set to API Mode Without Escapes. If this initial&#xA;communication fails, the behavior of the application can be controlled by&#xA;defining or not defining a symbol called XBEE_DEMO_CONFIG at the compiler&#xA;command line.&#xA;&#xA;If XBEE_DEMO_CONFIG is defined, the application will reset the XBee and then&#xA;attempt to configure it to 115200 bps/API Mode Without Escapes.&#xA;&#xA;If XBEE_DEMO_CONFIG is not defined, the application will halt execution in a&#xA;while(1) loop at the point of failure.&#xA;&#xA;If XBEE_DEMO_HOLOGRAM_SIM is defined and XBEE_DEMO_CONFIG, the application will&#xA;configure the XBee to work with the Hologram SIM card. This configuration&#xA;involves disabling NB-IoT on the modem. This is a slow process that takes over&#xA;20 seconds. Once NB-IoT has been disabled on a given XBee, that setting is&#xA;saved in non-volatile memory. So, if the user is confident that his XBee is&#xA;configured correctly for use with the Hologram SIM card, he can remove this&#xA;configuration define in the project settings and the demo will still operate&#xA;correctly.&#xA;&#xA;If XBEE_CHANGE_APN is defined, the application will configure the Access Point &#xA;Name (APN) setting of the XBee. The default value in &quot;-&quot;. In the case of the &#xA;Hologram SIM card, it is recommended to set the APN to &quot;hologram&quot;.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit attached to BRD8021A Expansion Board&#xA;Device: EFM32GG11B820F2048GL192&#xA;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/lte_xbee_time_server/SimplicityStudio/SLSTK3701A_lte_xbee_time_server.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/lte_xbee_time_server/arm/lte_xbee_time_server.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/lte_xbee_time_server/iar/lte_xbee_time_server.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_lte_xbee_time_server_bypass" description="&lt;h1&gt;&lt;b&gt;Digi XBee Time Server in Bypass Mode example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses a Digi XBee module in Bypass mode to receive the&#xA;current time from an online timer server and displays the time on the LCD.&#xA;&#xA;To run, build the example project, load it onto the SLSTK3701A board, and&#xA;look at the LCD to see the time.&#xA;&#xA;At startup, the EFM32GG11 will attempt to communicate with the XBee module&#xA;via UART. The application assumes the XBee is configured with a baudrate of&#xA;9600 bps and its API mode set to Bypass Mode. If this initial communication&#xA;fails, the behavior of the application can be controlled by defining or not&#xA;defining a symbol called XBEE_DEMO_CONFIG at the compiler command line.&#xA;&#xA;If XBEE_DEMO_CONFIG is defined, the application will reset the XBee and then&#xA;attempt to configure it to 9600 bps/API Mode Without Escapes.&#xA;&#xA;If XBEE_DEMO_CONFIG is not defined, the application will halt execution in a&#xA;while(1) loop at the point of failure.&#xA;&#xA;If XBEE_DEMO_HOLOGRAM_SIM is defined and XBEE_DEMO_CONFIG, the application will&#xA;configure the XBee to work with the Hologram SIM card. This configuration&#xA;involves disabling NB-IoT on the modem. This is a slow process that takes over&#xA;20 seconds. Once NB-IoT has been disabled on a given XBee, that setting is&#xA;saved in non-volatile memory. So, if the user is confident that his XBee is&#xA;configured correctly for use with the Hologram SIM card, he can remove this&#xA;configuration define in the project settings and the demo will still operate&#xA;correctly.&#xA;&#xA;If XBEE_CHANGE_APN is defined, the application will configure the Access Point &#xA;Name (APN) setting of the XBee. The default value in &quot;-&quot;. In the case of the &#xA;Hologram SIM card, it is recommended to set the APN to &quot;hologram&quot;.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit attached to BRD8021A Expansion Board&#xA;Device: EFM32GG11B820F2048GL192&#xA;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/lte_xbee_time_server_bypass/SimplicityStudio/SLSTK3701A_lte_xbee_time_server_bypass.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/lte_xbee_time_server_bypass/arm/lte_xbee_time_server_bypass.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/lte_xbee_time_server_bypass/iar/lte_xbee_time_server_bypass.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_micriumos_blink" description="&lt;h1&gt;&lt;b&gt;MicriumOS Blink example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to initialize and run MicriumOS on the kit. The &#xA;application will start a single task which is blinking LED 0 at a regular &#xA;interval. This examples is a good starting point for applications that want &#xA;to use MicriumOS.&#xA;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is enabled by default and can be disabled by changing the &#xA;OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used&#xA;to inspect the runtime behaviour of this example, it will give a nice overview&#xA;of the tasks and interrupts in the application. SystemView can be downloaded &#xA;from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_blink/SimplicityStudio/SLSTK3701A_micriumos_blink.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_blink/arm/micriumos_blink.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_blink/iar/micriumos_blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/ex_main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_micriumos_canopen" description="&lt;h1&gt;&lt;b&gt;Micrium OS CANopen example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to use the Micrium OS CANopen stack. It uses the&#xA;EFM32GG11B starter kit's two CAN peripherals in external loopback mode. &#xA;It requires CAN expansion board ISO-CAN-EXP REV 1.0 or REV 2.0. This example &#xA;will, upon the user pressing either push buttons (BTN0, BTN1), update one entry &#xA;in the CANopen object dictionary of node 1 on the 'can0' bus with a predefined &#xA;value for each button. Upon changing the value, a PDO message will be&#xA;triggered, which will be caught by node 2 on the 'can1' bus. Node 2 will&#xA;in turn update its object dictionary with the received value. The value of&#xA;the object of both nodes is continuously displayed on the LCD.&#xA;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is enabled by default and can be disabled by changing the &#xA;OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used&#xA;to inspect the runtime behaviour of this example, it will give a nice overview&#xA;of the tasks and interrupts in the application. SystemView can be downloaded &#xA;from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_canopen/SimplicityStudio/SLSTK3701A_micriumos_canopen.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_canopen/arm/micriumos_canopen.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_canopen/iar/micriumos_canopen.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/ex_main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_micriumos_dynamic" description="&lt;h1&gt;&lt;b&gt;Micrium OS Dynamic Tick example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to initialize and run MicriumOS on the kit. The &#xA;application will start a single task which is blinking LED 0 at a regular &#xA;interval. This example is using the dynamic tick feature of Micrium OS &#xA;to be able to enter EM2 whenever the application is idle. This examples &#xA;is a good starting point for applications that want to use Micrium OS &#xA;while using EM2.&#xA;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is disabled by default in this example, but can be enabled by &#xA;changing the OS_CFG_TRACE_EN configuration inside the os_cfg.h file. &#xA;SystemView can be used to inspect the runtime behaviour of this example, it &#xA;will give a nice overview of the tasks and interrupts in the application. &#xA;SystemView can be downloaded from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_dynamic/SimplicityStudio/SLSTK3701A_micriumos_dynamic.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_dynamic/arm/micriumos_dynamic.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_dynamic/iar/micriumos_dynamic.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_micriumos_httpcloader" description="&lt;h1&gt;&lt;b&gt;MicriumOS HTTP Client Gecko Bootloader example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to use the MicriumOS network stack with the ETH&#xA;peripheral on the EFM32GG11B starter kit. This example will initialize&#xA;the RMII interface to the external PHY and set up a 100 Mbit connection.&#xA;&#xA;Once connected to the network, a command line interface will appear.&#xA;This CLI can be used to configure the URL that the MCU will connect to&#xA;in order to download the gbl file. The command line has other functionalities,&#xA;it allows you to get the current time from the network, get the current app&#xA;version, bootloader configurations (size, start address and type).&#xA;When the URL has been configure, the user must type &quot;upgrade&quot; into&#xA;the CLI and press enter, at this moment the example will send an HTTP/HTTPS&#xA;GET request to the server given by the user. If the loaded file is not a (valid)&#xA;gbl, or anything goes wrong with the HTTP protocol, the bootloader storage&#xA;space will be cleaned and the command line interface will appear once more.&#xA;LED 0 will toggle each time a new GET request is sent.&#xA;&#xA;The example will output messages and the command line on the VCOM port. The messages will give&#xA;some useful information about the reprogramming process.&#xA;&#xA;GBL files can be created using Simplicity Commander by simply running the&#xA;command:&#xA;&quot;commander gbl create myupgrade.gbl --app myapp.s37 --bootloader mybootloader.s37&quot;.&#xA;This is described in more details in UG266.&#xA;&#xA;Note:&#xA;  - If using HTTPS connection, the trusted root CA needs to be added to ssl_certificates.c&#xA;&#xA;Board:  Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_httpcloader/SimplicityStudio/SLSTK3701A_micriumos_httpcloader.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_httpcloader/arm/micriumos_httpcloader.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_httpcloader/iar/micriumos_httpcloader.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_micriumos_lwip_wfx" description="&lt;h1&gt;&lt;b&gt;Micrium OS LwIP WFX200 example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to use the WFX200 Wi-Fi device. The example uses &#xA;the WFx FMAC driver to communicate with the WFx Wi-Fi solution. The &#xA;example requires the WFX200 Wi-Fi(R) Expansion Kit (SLEXP8022A or SLEXP8023A).&#xA;Make sure the two switches on the WFX200 expansion kit are on the correct &#xA;position:&#xA;  1. &quot;On Board LDO&quot; for the power switch&#xA;  2. SPI for the bus switch&#xA;The application will use the virtual com port on the kit (VCOM) for &#xA;text input and output.&#xA;&#xA;Example usage&#xA;&#xA;Connect the board and flash it with this program.&#xA;Start a VCOM serial terminal connected to the board.&#xA;Connect with a Wi-Fi device to the &quot;silabs_softap&quot; access point (default &#xA;name). You can open a browser and go to the web page 10.10.0.1 (again &#xA;value by default).&#xA;&#xA;Micrium OS supports SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is disabled by default in this example, but can be enabled by &#xA;changing the OS_CFG_TRACE_EN configuration inside the os_cfg.h file. &#xA;SystemView can be used to inspect the runtime behaviour of this example, it &#xA;will give a nice overview of the tasks and interrupts in the application. &#xA;SystemView can be downloaded from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_lwip_wfx/SimplicityStudio/SLSTK3701A_micriumos_lwip_wfx.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_lwip_wfx/arm/micriumos_lwip_wfx.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_lwip_wfx/iar/micriumos_lwip_wfx.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/ex_main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_micriumos_net" description="&lt;h1&gt;&lt;b&gt;MicriumOS Network example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to use the MicriumOS network stack with the ETH &#xA;peripheral on the EFM32GG11B starter kit. This example will initialize &#xA;the RMII interface to the external PHY and setup a 100 Mbit connection.&#xA;&#xA;The example will output messages on the VCOM port and it will show status &#xA;on the memory lcd display on the kit. The display will show the current &#xA;link status along with the current IPv4 address and the currently &#xA;configured IPv6 addresses.&#xA;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is enabled by default and can be disabled by changing the &#xA;OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used&#xA;to inspect the runtime behaviour of this example, it will give a nice overview&#xA;of the tasks and interrupts in the application. SystemView can be downloaded &#xA;from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_net/SimplicityStudio/SLSTK3701A_micriumos_net.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_net/arm/micriumos_net.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_net/iar/micriumos_net.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/ex_main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_micriumos_shell" description="&lt;h1&gt;&lt;b&gt;Micrium OS Shell example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to use Micrium OS Shell. The application will use &#xA;the virtual com port on the kit (VCOM) for input and output. Input &#xA;is parsed and executed by Micrium OS Shell. The commands are implemented&#xA;inside the cmd_*.c file in the example.&#xA;&#xA;These are the available commands&#xA;&#xA;  help          Prints available commands and usage help.&#xA;&#xA;  init          Various initialization&#xA;    -chip       Init of chip, energy mode, dcdc, etc.&#xA;    -hfrco FREQ Set HFRCO as core clock and set frequency to FREQ&#xA;    -hfxo       Set HFXO as core clock    &#xA;    -help       Print init command help text&#xA;&#xA;  selftest      Checks interrupt vector table against memory bounds.&#xA;    -help       Print sefltest command help text&#xA;&#xA;  sleep         This command is used to enter various energy modes&#xA;    -em MODE    Enter the energy mode specified by MODE. Supported modes &#xA;                are 1, 2, 3, 4H and 4S&#xA;    -s N        Wake-up after N seconds&#xA;    -help       Print sleep command help text&#xA;&#xA;Example usage&#xA;&#xA;Connect the board and flash it with this program.&#xA;Start a VCOM serial terminal connected to the board.&#xA;When presented with a prompt, type 'init -chip'.&#xA;Now you can run commands such as 'sleep -em 2 -s 3'.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_shell/SimplicityStudio/SLSTK3701A_micriumos_shell.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_shell/arm/micriumos_shell.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_shell/iar/micriumos_shell.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_micriumos_usbdhidmouse" description="&lt;h1&gt;&lt;b&gt;Micrium OS USB device HID mouse example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to use the Micrium OS USB device stack with the&#xA;USB peripheral on the EFM32GG11B starter kit. This example will emulate&#xA;the behavior of a USB mouse and move the mouse pointer up-left and&#xA;down-right periodically when connected to a PC.&#xA;&#xA;The output from the example application can be found by connecting a &#xA;terminal to the VCOM port.&#xA;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is enabled by default and can be disabled by changing the &#xA;OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used&#xA;to inspect the runtime behavior of this example, it will give a nice overview&#xA;of the tasks and interrupts in the application. SystemView can be downloaded &#xA;from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_usbdhidmouse/SimplicityStudio/SLSTK3701A_micriumos_usbdhidmouse.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_usbdhidmouse/arm/micriumos_usbdhidmouse.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_usbdhidmouse/iar/micriumos_usbdhidmouse.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/ex_main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_micriumos_usbhmsc" description="&lt;h1&gt;&lt;b&gt;MicriumOS USB host MSC example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to use the MicriumOS USB host stack with the&#xA;USB controller on the EFM32GG11B starter kit. This example will detect&#xA;a connected USB memory and print some information about the decive.&#xA;&#xA;The output from the example application can be found by connecting a &#xA;terminal to the VCOM port.&#xA;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is enabled by default and can be disabled by changing the &#xA;OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used&#xA;to inspect the runtime behaviour of this example, it will give a nice overview&#xA;of the tasks and interrupts in the application. SystemView can be downloaded &#xA;from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_usbhmsc/SimplicityStudio/SLSTK3701A_micriumos_usbhmsc.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_usbhmsc/arm/micriumos_usbhmsc.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_usbhmsc/iar/micriumos_usbhmsc.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/ex_main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_micriumos_webmic" description="&lt;h1&gt;&lt;b&gt;Example usage of microphones and MicriumOS HTTP server&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to sample data from the microphone and also how to&#xA;stream that data on a web server using uC/HTTPs.&#xA;&#xA;The audio is sampled from on-kit microphones by using LDMA.&#xA;The sampled audio waveform is displayed on LCD. &#xA;Sampling and encoding is performed in the main os task.&#xA;Configuration can be found in common_declarations.h and config.h.&#xA;For info on encoding, see IETFs and xiphs rfc6716, rfc7845 and rfc3533.&#xA;&#xA;The encoded data is then streamed through a simple no-file-system HTTP server.&#xA;Transmission of data packets is handled by an HTTP server task by means&#xA;of unicast and chunked transfer encoding.&#xA;&#xA;To listen to the audio: connect the board via ethernet, wait for the IP to be&#xA;shown on the display and type that IP into any browser capable of&#xA;streaming opus. Because of real-time constraints, there's an upper limit of 5 clients.&#xA;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is enabled by default and can be disabled by changing the &#xA;OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used&#xA;to inspect the runtime behaviour of this example, it will give a nice overview&#xA;of the tasks and interrupts in the application. SystemView can be downloaded &#xA;from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_webmic/SimplicityStudio/SLSTK3701A_micriumos_webmic.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_webmic/arm/micriumos_webmic.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_webmic/iar/micriumos_webmic.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_micriumos_wifi_whiteboard" description="&lt;h1&gt;&lt;b&gt;Wireless Whiteboard Demo: Micrium OS + WiFi + Graphics LCD&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;In this demo you get to draw something on your smart phone and watch the&#xA;drawing being displayed in the board's LCD. &#xA;&#xA;Hardware Requirements&#xA;---------------------&#xA;&#xA;This demo requires the three boards illustrated in the following diagram:&#xA;&#xA; +---------------------------------------+  +----------------------------+&#xA; | EFM32 Giant Gecko                     |  | Wireless Expansion Board   |&#xA; | SLSTK3701A                            |--| PCB8016                    |&#xA; | BRD2204A                              |--|           +--------------+ |&#xA; |                                       |--|           | Wizard Gecko | |&#xA; |                                       |--|           | WGM110       | |&#xA; |                                       |--|           | PCB4320      | |&#xA; |                                       |--|           |              | |&#xA; |                                       |--|           |              | |&#xA; |                                       |--|           +--------------+ |&#xA; |    SWITCH                             |--|   SWITCH                   |&#xA; |  BAT  [AEM]                           |  |  3V  [5V]                  |&#xA; +---------------------------------------+  +----------------------------+&#xA;                                        20-pin&#xA;                                       Exp. Hdr.&#xA;&#xA;Configuration&#xA;-------------&#xA;&#xA;1. Connect the boards as illustrated in the diagram above.&#xA;&#xA;2. Configure the board switches as illustrated in the previous diagram:&#xA;&#xA;   a. AEM&#xA;   b. 5V&#xA;&#xA;3. Enter your WiFi access point's SSID and Password in the file app_wifi_cfg.h&#xA;&#xA;4. Build the project.&#xA;&#xA;Execution&#xA;---------&#xA;&#xA;1. Execute the application by launching a debug session and wait for the&#xA;   board to connect to the TCP server at demo.silabs.com&#xA;&#xA;   The application will display a series of messages to show you the progress&#xA;   as follows:&#xA;&#xA;   a. Connecting to [Your SSID]&#xA;   b. Connecting to [demo.silabs.com resolved IP address]&#xA;   c. MAC Address: [Your MAC address]&#xA;&#xA;2. Open your favorite browser, go to the web page at http://demo.silabs.com&#xA;   and select the Wireless Whiteboard demo for the Giant Gecko.&#xA;&#xA;3. Enter your board's MAC address in the web page and start drawing.&#xA;&#xA;4. Press the buttons to switch between screens.&#xA;&#xA;Tools&#xA;-----&#xA;&#xA;This demo features two development tools; uC/Probe and SystemView.&#xA;&#xA;To learn more about these tools take the following steps:&#xA;&#xA;1. uC/Probe:&#xA;&#xA;   Click the button uC/Probe on the toolbar of Simplicity Studio.&#xA;&#xA;2. SystemView:&#xA;&#xA;   a. Install SystemView from https://www.segger.com/systemview.html&#xA;   &#xA;   b. Enable kernel tracing by setting OS_CFG_TRACE_EN to DEF_ENABLED&#xA;      in os_cfg.h&#xA;   &#xA;   c. Rebuild the project.&#xA; &#xA;   d. Launch a debugging session.&#xA;   &#xA;   e. Open SystemView and press the F5 key or select Target from the&#xA;      Options Menu and click Start Recording.&#xA;&#xA;Board: Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;Expansion Board: PCB8016&#xA;WiFi Module: Wizard Gecko WGM110 PCB4320&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_wifi_whiteboard/SimplicityStudio/SLSTK3701A_micriumos_wifi_whiteboard.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_wifi_whiteboard/arm/micriumos_wifi_whiteboard.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_wifi_whiteboard/iar/micriumos_wifi_whiteboard.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_persistent_trng" description="&lt;h1&gt;&lt;b&gt;This project demonstrates use of NVM3 and mbedTLS Random Number Generator.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the mbedTLS Random Number Generator API (TRNG accelerated)&#xA;to generate random object data stored in NVM3. The random data is read back from NVM3&#xA;and displayed every 2 sec. Use the AEM/BAT switch or reset button on the STK to&#xA;interrupt the application. The application should boot up and display the most recent and&#xA;successfully stored data from NVM3. Both LEDs will be set to on if an error is detected.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/persistent_trng/SimplicityStudio/SLSTK3701A_persistent_trng.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/persistent_trng/iar/persistent_trng.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_qspi_direct" description="&lt;h1&gt;&lt;b&gt;QSPI Direct example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example demonstrates how to use QSPI direct mode for talking to an &#xA;external QSPI flash device. The flash device used is an MX25R3235F. &#xA;For highest throughput PHY mode is used at a clockrate of 32 MHz.&#xA;The flash is conected to the MCU at &quot;slow&quot; location.&#xA;&#xA;To use the example, connect the kit to a computer. Find the &#xA;virtual COM port and access it (for example with PuTTY).&#xA;configure the COM for 8N1, 115200 baudrate. Press reset on the bord. &#xA;&#xA;When the example starts it erases the external flash and writes&#xA;a test pattern to the whole flash. This process may take a couple of&#xA;minutes. After this pattern is written to the flash the example will&#xA;continously run through a set of test functions to measure performance&#xA;of various ways of reading from the QSPI flash.&#xA;&#xA;Board:  Silicon Labs EFM32GG11_SLSTK3701 Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/qspi_direct/SimplicityStudio/SLSTK3701A_qspi_direct.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/qspi_direct/arm/qspi_direct.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/qspi_direct/iar/qspi_direct.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_qspi_indirect" description="&lt;h1&gt;&lt;b&gt;QSPI Indirect example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example demonstrates how to use the indirect mode of the QSPI to write to and &#xA;read from an external flash device. The implementation adds all calls to indirect&#xA;reads and writes to two arrays such that all operations are executed and none are&#xA;rejected. The maximum number of indirect read and write operations are given by the&#xA;size of the two arrays in qspi.c. By uncommenting the various tests in main.c the &#xA;user can verify that it works as expected.&#xA;&#xA;Note: The sectors of the external flash to write to have to be erased before &#xA;writing to them. The QSPI hardware will prioritize indirect write operations&#xA;before indirect read operations. All indirect read and writes should be a multiple&#xA;of 32 bits and be word aligned.&#xA;&#xA;Board:  Silicon Labs EFM32GG11_SLSTK3701 Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/qspi_indirect/SimplicityStudio/SLSTK3701A_qspi_indirect.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/qspi_indirect/arm/qspi_indirect.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/qspi_indirect/iar/qspi_indirect.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_spectrum_analyzer" description="&lt;h1&gt;&lt;b&gt;Spectrum Analyzer Example&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example demonstrates a real-time audio spectrum analyzer with a&#xA;waterfall spectrogram display. The example uses the STK's color LCD to display&#xA;frequency data obtained from either the ADC (connected to Pin PB11/Expansion&#xA;Header Pin 11) or the microphones present on the STK. Cortex-M4 and &#xA;CMSIS DSP_Lib capabilities are demonstrated in this example.&#xA;&#xA;The example will display the frequency content of any time varying signal&#xA;present at the input source. The top portion of the screen displays the most&#xA;recently calculated frequency response (around 15 milliseconds of time domain&#xA;data), and the bottom portion displays a waterfall spectrogram that provides&#xA;a running history of color-coded past frequency responses. The scale at the&#xA;top right of the screen shows how the color corresponds to magnitude. Each &#xA;pixel width on the display corresponds to a 66Hz wide frequency bin.&#xA;&#xA;The ADC input mode uses a 5V reference voltage, so the ideal range input would&#xA;be a +/-2.5V signal with a +2.5V DC offset. &#xA;&#xA;Also note that the sampling frequency is 34133 Hz, and content at frequencies&#xA;greater than ~17Khz will be aliased.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;Pin PB11 (Expansion Header Pin 11) - ADC0 input&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/spectrum_analyzer/SimplicityStudio/SLSTK3701A_spectrum_analyzer.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/spectrum_analyzer/arm/spectrum_analyzer.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/spectrum_analyzer/iar/spectrum_analyzer.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_textdisplay" description="&lt;h1&gt;&lt;b&gt;Printf output on Sharp Memory LCD LS013B7DH06.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display on the EFM32 Giant Gecko 11B. In this case the&#xA;display is used as output from a regular printf in the application, as&#xA;an alternative to using LEUART or UART for text output.&#xA;&#xA;The user can customize the behaviour of the DISPLAY driver by changing&#xA;configuration macros in displayconfigapp.h.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B810F2048&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/textdisplay/SimplicityStudio/SLSTK3701A_textdisplay.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/textdisplay/arm/textdisplay.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/textdisplay/iar/textdisplay.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_usbdloader" description="&lt;h1&gt;&lt;b&gt;USB Device Mass Storage Device GBL (Gecko Bootloader) loader example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use the USB device protocol stack&#xA;to implement a Mass Storage Class device (MSD).&#xA;Once the STK is connected to a PC via USB, it appears&#xA;as a MSD with a FAT12 formatted disk. MSD is used to&#xA;store a gbl file used for bootloader upgrade. When a&#xA;valid gbl file is dragged and dropped into the disk,&#xA;the application waits for the file to be completely transferred.&#xA;As soon as the transfer is completed, the flash memory allocated&#xA;for the bootloader storage is reprogrammed with the gbl file.&#xA;Right after the bootloader storage is reprogrammed,&#xA;the bootloader upgrade procedure starts and a software reset is performed.&#xA;&#xA;GBL files can be created using Simplicity Commander by simply running the&#xA;command:&#xA;&quot;commander gbl create myupgrade.gbl --app myapp.s37 --bootloader mybootloader.s37&quot;.&#xA;This is described in more details in UG266.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/usbdloader/SimplicityStudio/SLSTK3701A_usbdloader.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/usbdloader/arm/usbdloader.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/usbdloader/iar/usbdloader.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_usbdhidkbd" description="&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use the EFM32 USB Device protocol stack&#xA;and implements an USB HID class keyboard device (one button !).&#xA;&#xA;PB0 is the keyboard button. Pressing this button will succesively write&#xA;&quot;Silicon Labs - &quot;.&#xA;The RGB color of LED1 will reflect keyboard Num, Caps and Scroll lock status.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/usbdhidkbd/SimplicityStudio/SLSTK3701A_usbdhidkbd.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/usbdhidkbd/arm/usbdhidkbd.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/usbdhidkbd/iar/usbdhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_usbdvud" description="&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use the EFM32 USB Device protocol stack&#xA;and implements an USB Vendor Unique Device.&#xA;&#xA;The example will toggle inidividual the LED's of the RGB leds when receiving&#xA;vendor unique class setup commands.&#xA;&#xA;This example is intended to be used together with the &quot;libusb&quot; device driver,&#xA;and host application EFM32-LedApp.exe (a Windows application). Both libusb and&#xA;the application executable (including source code) are in the example &quot;host&quot;&#xA;folder.&#xA;&#xA;The first time the USB device is connected to the host, you must tell the host&#xA;OS to install the &quot;libusb&quot; device driver.&#xA;&#xA;On Windows, you can follow this procedure:&#xA;Insert the device, and manually direct Windows to look for drivers in the&#xA;directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.&#xA;This can be done with the new device &quot;Wizard&quot; which might pop up after device&#xA;insertion, or you can open &quot;Device Manager&quot;, left click on the new device and&#xA;select &quot;Update Driver Software...&quot;.&#xA;&#xA;Some versions of Windows wont allow you to install unsigned drivers. If you&#xA;suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.&#xA;Win7:&#xA;Repeatedly push F8 during boot until the boot menu appears.&#xA;Select the &quot;Disable Driver Signature Enforcement&quot; option.&#xA;Win10:&#xA;Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.&#xA;When computer has restarted into the options menu, select:&#xA;Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement&#xA;You should now be able to install an unsigned driver.&#xA;&#xA;After libusb is installed, start EFM32-LedApp.exe.&#xA;&#xA;This example will output some info on the VCOM serial port.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/usbdvud/SimplicityStudio/SLSTK3701A_usbdvud.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/usbdvud/arm/usbdvud.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/usbdvud/iar/usbdvud.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_usbhenum" description="&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the USB host stack to implement&#xA;a simple device enumerator.&#xA;&#xA;Connect a terminal to VCOM and then connect any USB device to the USB port of&#xA;the kit.&#xA;&#xA;Info about the VID/PID and some string descriptors will be output on&#xA;the serial port. The connected USB device will not be configured.&#xA;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xA;when attached.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/usbhenum/SimplicityStudio/SLSTK3701A_usbhenum.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/usbhenum/arm/usbhenum.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/usbhenum/iar/usbhenum.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_usbhhidkbd" description="&lt;h1&gt;&lt;b&gt;USB Host HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the USB host stack to implement&#xA;support for USB HID Keyboards.&#xA;&#xA;Connect a terminal to VCOM and then connect a USB keyboard to the USB port of&#xA;the kit.&#xA;&#xA;The example will flash keyboard leds (numlock, scrollock and capslock)&#xA;with a binary counting pattern.&#xA;&#xA;Keyboard entry will be echoed on the VCOM port.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/usbhhidkbd/SimplicityStudio/SLSTK3701A_usbhhidkbd.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/usbhhidkbd/arm/usbhhidkbd.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/usbhhidkbd/iar/usbhhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_usbhloader" description="&lt;h1&gt;&lt;b&gt;USB Host Mass Storage Device GBL (Gecko Bootloader) loader example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the USB host and the MSD modules in the&#xA;drivers directory to implement support for Mass Storage Device's (MSD).&#xA;Info about the MSD device will be output on the VCOM port. When a MSD device is&#xA;connected and detected as a valid, this application will start looking for&#xA;a valid gbl file. Once a valid gbl file is found, the flash memory allocated&#xA;for the bootloader storage is reprogrammed with the gbl file.&#xA;Right after the bootloader storage is reprogrammed,&#xA;the bootloader upgrade procedure starts and a software reset is performed.&#xA;&#xA;GBL files can be created using Simplicity Commander by simply running the&#xA;command:&#xA;&quot;commander gbl create myupgrade.gbl --app myapp.s37 --bootloader mybootloader.s37&quot;.&#xA;This is described in more details in UG266.&#xA;&#xA;NOTE:&#xA;  - USB disk drives may fail, as some of them draw too much current when attached.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/usbhloader/SimplicityStudio/SLSTK3701A_usbhloader.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/usbhloader/arm/usbhloader.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/usbhloader/iar/usbhloader.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_usbhmsdfatcon" description="&lt;h1&gt;&lt;b&gt;USB Host mass storage device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the USB host and the MSD modules in the&#xA;drivers directory to implement support for Mass Storage Device's (MSD).&#xA;&#xA;Connect a terminal to VCOM and then connect a memory stick the USB port of the&#xA;kit.&#xA;&#xA;Info about the MSD device will be output on the VCOM port. When a MSD device is&#xA;connected and detected as a valid, you can issue commands at the VCOM console to&#xA;list all files on the device (ls), type the content of a file (cat) and append&#xA;text to a file (echo).&#xA;&#xA;Note that USB disk drives may fail, as some of them draw too much current&#xA;when attached.&#xA;&#xA;NOTE:&#xA;This example is too large to be built with IDEs with 32KB size limits.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/usbhmsdfatcon/SimplicityStudio/SLSTK3701A_usbhmsdfatcon.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/usbhmsdfatcon/arm/usbhmsdfatcon.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/usbhmsdfatcon/iar/usbhmsdfatcon.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLSTK3701A_vcom" description="&lt;h1&gt;&lt;b&gt;VCOM communication example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and EMLIB to demonstrates the&#xA;use of USART and LEUART communication on the SLSTK3701A Starter Kit &#xA;using the virtual COM port.&#xA;&#xA;Virtual COM port through USB is used in by default this example. Undefine &#xA;&quot;RETARGET_VCOM&quot; in the project to use UART on EXP header pins. For EXP header &#xA;UART communication, serial configuration 115200-8-N-1 is used on EXP pin 1 is GND, &#xA;EXP pin 12 is USART0 Tx and EXP pin 14 is USART0 Rx.&#xA;&#xA;If LEUART mode is configured by defining &quot;RETARGET_LEUART0&quot; as a build option,&#xA;terminal configuration is 9600-8-N-1 if &quot;RETARGET_VCOM&quot; is not defined, and&#xA;115200-8-N-1 if &quot;RETARGET_VCOM&quot; is defined.&#xA;&#xA;Board:  Silicon Labs SLSTK3701A Starter Kit&#xA;Device: EFM32GG11B820F2048GL192&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EFM32GG11 Giant Gecko Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLSTK3701A_EFM32GG11/vcom/SimplicityStudio/SLSTK3701A_vcom.slsproj,../app/mcu_example/SLSTK3701A_EFM32GG11/vcom/arm/vcom.uvprojx,../app/mcu_example/SLSTK3701A_EFM32GG11/vcom/iar/vcom.eww"/>
    <properties key="core.boardCompatibility" value="brd2204a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLTB009A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use EFM32 CMSIS and the EMLIB peripheral library to&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xA;a skeleton for new projects.&#xA;&#xA;Board:  Silicon Labs EFM32GG12 Starter Kit&#xA;Device: EFM32GG12B810F1024GM64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Thunderboard EFM32GG12"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLTB009A_EFM32GG12/blink/SimplicityStudio/SLTB009A_blink.slsproj,../app/mcu_example/SLTB009A_EFM32GG12/blink/arm/blink.uvprojx,../app/mcu_example/SLTB009A_EFM32GG12/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd2207a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLTB009A_micriumos_usbdhidmouse" description="&lt;h1&gt;&lt;b&gt;Micrium OS USB device HID mouse example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example shows how to use the Micrium OS USB device stack with the&#xA;USB peripheral on the SLTB009A_EFM32GG12 Thunderboard kit. This example will&#xA;emulate the behavior of a USB mouse and move the mouse pointer up-left and&#xA;down-right periodically when connected to a PC.&#xA;&#xA;The output from the example application can be found by connecting a&#xA;terminal to the VCOM port.&#xA;&#xA;Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.&#xA;SystemView Trace is enabled by default and can be disabled by changing the&#xA;OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used&#xA;to inspect the runtime behavior of this example, it will give a nice overview&#xA;of the tasks and interrupts in the application. SystemView can be downloaded&#xA;from https://www.segger.com/systemview.html&#xA;&#xA;Board:  Silicon Labs SLTB009A_EFM32GG12 Thunderboard Kit&#xA;Device: EFM32GG12B810F1024GM64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Thunderboard EFM32GG12"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLTB009A_EFM32GG12/micriumos_usbdhidmouse/SimplicityStudio/SLTB009A_micriumos_usbdhidmouse.slsproj,../app/mcu_example/SLTB009A_EFM32GG12/micriumos_usbdhidmouse/arm/micriumos_usbdhidmouse.uvprojx,../app/mcu_example/SLTB009A_EFM32GG12/micriumos_usbdhidmouse/iar/micriumos_usbdhidmouse.eww"/>
    <properties key="core.boardCompatibility" value="brd2207a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/ex_main.c"/>
  </descriptors>
  <descriptors label="SLTB009A_pdm-led" description="&lt;h1&gt;&lt;b&gt;pdm-led example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use the two PDM microphones to collect audio data.&#xA;The audio data is translated to a LED intensity using PWM.&#xA;This example is intended as a skeleton for new projects.&#xA;&#xA;Board:  Silicon Labs EFM32GG12 Starter Kit&#xA;Device: EFM32GG12B810F1024GM64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Thunderboard EFM32GG12"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLTB009A_EFM32GG12/pdm-led/SimplicityStudio/SLTB009A_pdm-led.slsproj,../app/mcu_example/SLTB009A_EFM32GG12/pdm-led/arm/pdm-led.uvprojx,../app/mcu_example/SLTB009A_EFM32GG12/pdm-led/iar/pdm-led.eww"/>
    <properties key="core.boardCompatibility" value="brd2207a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/pdm-led.c"/>
  </descriptors>
  <descriptors label="SLTB009A_usbdhidkbd" description="&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use the EFM32 USB Device protocol stack&#xA;and implements an USB HID class keyboard device with one button.&#xA;&#xA;BTN0 is the keyboard button. Pressing this button will succesively write&#xA;&quot;Silicon Labs - &quot;.&#xA;The red led of RGB LED0 toggles each time the keypad (BTN0) is polled and will&#xA;be permanently on when BTN0 is pressed.&#xA;The blue led of LED0 shows the USB device configured status.&#xA;&#xA;Keyboard NumLock, CapsLock and ScrollLock status is reflected by the color&#xA;of RGB led LED1.&#xA;&#xA;Board:  Silicon Labs SLTB009A_EFM32GG12 Thunderboard Kit&#xA;Device: EFM32GG12B810F1024GM64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Thunderboard EFM32GG12"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLTB009A_EFM32GG12/usbdhidkbd/SimplicityStudio/SLTB009A_usbdhidkbd.slsproj,../app/mcu_example/SLTB009A_EFM32GG12/usbdhidkbd/arm/usbdhidkbd.uvprojx,../app/mcu_example/SLTB009A_EFM32GG12/usbdhidkbd/iar/usbdhidkbd.eww"/>
    <properties key="core.boardCompatibility" value="brd2207a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLTB009A_usbdpdmmic" description="&lt;h1&gt;&lt;b&gt;USB audio microphone device example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example implements a USB connected microphone device. The device enumerates&#xA;as a device supporting stereo 16 bit PCM encoded audio at a samplerate of&#xA;44.1 kHz (the standard audio CD samplerate).&#xA;&#xA;The PCM samples are aquired using the Pulse Density Modulation (PDM) peripheral&#xA;of the microcontroller.&#xA;&#xA;The USB device is modelled as the MT (Microphone Topology) described in&#xA;USB-IF document &quot;Universal Serial Bus Audio Device Class Specification for&#xA;Basic Audio Devices&quot;, Release 1.0, November 24th, 2009.&#xA;&#xA;The PDM clock is programmed to give a PCM samplerate of exactly 44,100 Hz.&#xA;This is achieved using the DPLL with a reference clock taken from the USB&#xA;SOF packet detector in the USB peripheral. A PRS channel is used to feed the&#xA;DPLL reference input from the USB SOF detector.&#xA;&#xA;Even when using a DPLL controlled PDM sample clock, we still need to&#xA;occasionally compensate for clock drift between device and host to keep the&#xA;data streams (USB and PCM) synchronized. This is done by adjusting the length&#xA;of the DMA transfers from the PDM periheral.&#xA;&#xA;Board:  Silicon Labs SLTB009A_EFM32GG12 Thunderboard Kit&#xA;Device: EFM32GG12B810F1024GM64&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="Thunderboard EFM32GG12"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLTB009A_EFM32GG12/usbdpdmmic/SimplicityStudio/SLTB009A_usbdpdmmic.slsproj,../app/mcu_example/SLTB009A_EFM32GG12/usbdpdmmic/arm/usbdpdmmic.uvprojx,../app/mcu_example/SLTB009A_EFM32GG12/usbdpdmmic/iar/usbdpdmmic.eww"/>
    <properties key="core.boardCompatibility" value="brd2207a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLTB009A_vcom" description="&lt;h1&gt;&lt;b&gt;VCOM communication example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS and EMLIB to demonstrates the&#xA;use of USART and LEUART communication on the SLTB009A Starter Kit &#xA;using the virtual COM port.&#xA;&#xA;Virtual COM port through USB is used in by default this example. Undefine &#xA;&quot;RETARGET_VCOM&quot; in the project to use UART on EXP header pins. For EXP header &#xA;UART communication, serial configuration 115200-8-N-1 is used on EXP pin 1 is GND, &#xA;EXP pin 12 is USART0 Tx and EXP pin 14 is USART0 Rx.&#xA;&#xA;If LEUART mode is configured by defining &quot;RETARGET_LEUART0&quot; as a build option,&#xA;terminal configuration is 9600-8-N-1 if &quot;RETARGET_VCOM&quot; is not defined, and&#xA;115200-8-N-1 if &quot;RETARGET_VCOM&quot; is defined.&#xA;&#xA;Board:  Silicon Labs SLTB009A Thunderboard Kit&#xA;Device: EFM32GG12B810F1024GM64&lt;/pre&gt;">
    <properties key="template.category" value="Thunderboard EFM32GG12"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLTB009A_EFM32GG12/vcom/SimplicityStudio/SLTB009A_vcom.slsproj,../app/mcu_example/SLTB009A_EFM32GG12/vcom/arm/vcom.uvprojx,../app/mcu_example/SLTB009A_EFM32GG12/vcom/iar/vcom.eww"/>
    <properties key="core.boardCompatibility" value="brd2207a"/>
    <properties key="core.partCompatibility" value="mcu.arm.efm32.gg12.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Tx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct reception by pressing the PB0 button. &#xD;&#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_direct_rx/SimplicityStudio/SLWSTK6240A_ezradio_direct_rx.slsproj,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use this example together with the Direct Rx example&#xD;&#xA;running on an other node, so the link functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can start direct transmission by pressing the PB0 button. &#xD;&#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_direct_tx/SimplicityStudio/SLWSTK6240A_ezradio_direct_tx.slsproj,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xD;&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xD;&#xA;button again. &#xD;&#xA;See the EzRadio documentation for more information on PN9 transmission.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_pn9/SimplicityStudio/SLWSTK6240A_ezradio_pn9.slsproj,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_pn9/arm/ezradio_pn9.uvprojx,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_simple_trx/SimplicityStudio/SLWSTK6240A_ezradio_simple_trx.slsproj,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;It is advised to use two boards with same configuration and firmware, so&#xD;&#xA;both packet transmission and reception functionality can be tested.&#xD;&#xA;&#xD;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xD;&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xD;&#xA;packet is received by the other device, the received data is shown on its&#xD;&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xD;&#xA;the data is received properly the receiver automatically sends back an&#xD;&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xD;&#xA;the LCD as well.&#xD;&#xA;&#xD;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xD;&#xA;The user can cease the transmission by pushing PB1 again.&#xD;&#xA;The number of transmitted packets is configurable.&#xD;&#xA;&#xD;&#xA;The application implements Packet Trace functionality, that means that the&#xD;&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xD;&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_trx_ack/SimplicityStudio/SLWSTK6240A_ezradio_trx_ack.slsproj,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xD;&#xA;&#xD;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xD;&#xA;board support package support functions/drivers to demonstrate driving&#xD;&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xD;&#xA;&#xD;&#xA;The user can start CW transmission by pressing the PB0 button. &#xD;&#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xD;&#xA;&#xD;&#xA;The sample app is able to consume radio configuration header files generated&#xD;&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xD;&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xD;&#xA;the generated header file instead of the default one with other toolchains enable&#xD;&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xD;&#xA;&#xD;&#xA;For more information please refer to the Quick Start Guide of the application.&#xD;&#xA;&#xD;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xD;&#xA;Device: EZR32HG320F64R68&#xD;&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6240A_ezradio_unmodulated_carrier.slsproj,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use CMSIS and the EMLIB peripheral library to&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xA;a skeleton for new projects.&#xA;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Starter Kit&#xA;Device: EZR32HG320F64R61&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6240A_EZR32HG/blink/SimplicityStudio/SLWSTK6240A_blink.slsproj,../app/mcu_example/SLWSTK6240A_EZR32HG/blink/arm/blink.uvprojx,../app/mcu_example/SLWSTK6240A_EZR32HG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6240A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EFM32 CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display on the SLWSTK6240A_EZR32HG kit.&#xA;&#xA;The user can switch between analog and digital clock modes by pushing&#xA;the PB0 button.&#xA;&#xA;The user can increment the second count by pushing the PB1 button.&#xA;The minute count can be incremented by pushing the PB1 button for more&#xA;than 2 seconds.&#xA;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xA;and second pointers on the background which is a bitmap in flash memory.&#xA;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xA;only) of the textdisplay driver.&#xA;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Starter Kit&#xA;Device: EZR32HG320F64R61&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6240A_EZR32HG/clock/SimplicityStudio/SLWSTK6240A_clock.slsproj,../app/mcu_example/SLWSTK6240A_EZR32HG/clock/arm/clock.uvprojx,../app/mcu_example/SLWSTK6240A_EZR32HG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_ezradio_per" description="&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xA;&#xA;This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xA;&#xA;It is advised to use two boards with same configuration and firmware, so&#xA;both packet transmission and reception functionality can be tested.&#xA;&#xA;This example bases on the standard TRx with auto acknowledge example. It is &#xA;advised to study the original application first.&#xA;All the original functionalities can be turned on, however, the main purpose&#xA;of this example is to show how to implement transmission packet error rate (PER) &#xA;and RSSI measurements in an application. The user can send either one (PB0) &#xA;or multiple packets (PB1) with the transmitter node and study the PER and RSSI&#xA;values on the receiver node.&#xA;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xA;The user can cease the transmission by pushing PB1 again.&#xA;The number of transmitted packets is configurable.&#xA;&#xA;The application implements Packet Trace functionality, that means that the&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xA;&#xA;The sample app is able to consume radio configuration header files generated&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xA;the generated header file instead of the default one with other toolchains enable&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xA;&#xA;For more information please refer to the Quick Start Guide of the application.&#xA;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit&#xA;Device: EZR32HG320F64R68&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_per/SimplicityStudio/SLWSTK6240A_ezradio_per.slsproj,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_per/arm/ezradio_per.uvprojx,../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_per/iar/ezradio_per.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6240A_EZR32HG board.&#xA;&#xA;This example project uses CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xA;SLWSTK6240A_EZR32HG board.&#xA;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Starter Kit&#xA;Device: EZR32HG320F64R61&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6240A_EZR32HG/humitemp/SimplicityStudio/SLWSTK6240A_humitemp.slsproj,../app/mcu_example/SLWSTK6240A_EZR32HG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLWSTK6240A_EZR32HG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6240A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses CMSIS and EMLIB, to demonstrates the&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6240A_EZR32HG&#xA;wireless starter kit.&#xA;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xA;#define RETARGET_LEUART0&#xA;#define RETARGET_USART0&#xA;#define RETARGET_VCOM       (default)&#xA;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xA;&#xA;Board:  Silicon Labs SLWSTK6240A_EZR32HG Starter Kit&#xA;Device: EZR32HG320F64R61&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32HG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6240A_EZR32HG/rs232/SimplicityStudio/SLWSTK6240A_rs232.slsproj,../app/mcu_example/SLWSTK6240A_EZR32HG/rs232/arm/rs232.uvprojx,../app/mcu_example/SLWSTK6240A_EZR32HG/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4546a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_blink" description="&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project use CMSIS and the EMLIB peripheral library to&#xA;demonstrate the use of the LED's on the starter kit. This example is intended as&#xA;a skeleton for new projects.&#xA;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Starter Kit&#xA;Device: EZR32LG330F256R60&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6200A_EZR32LG/blink/SimplicityStudio/SLWSTK6200A_blink.slsproj,../app/mcu_example/SLWSTK6200A_EZR32LG/blink/arm/blink.uvprojx,../app/mcu_example/SLWSTK6200A_EZR32LG/blink/iar/blink.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/blink.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_clock" description="&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6200A_EZR32LG.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display on the SLWSTK6200A_EZR32LG kit.&#xA;&#xA;The user can switch between analog and digital clock modes by pushing&#xA;the PB0 button.&#xA;&#xA;The user can increment the minute count by pushing the PB1 button.&#xA;The minute count can be incremented by pushing the PB1 button for more&#xA;than 0.5 seconds.&#xA;&#xA;The analog clock mode demonstrates the use of GLIB to draw hour, minute&#xA;and second pointers on the background which is a bitmap in flash memory.&#xA;&#xA;The digital clock demonstrates the 16x20 font (including number characters&#xA;only) of the textdisplay driver.&#xA;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xA;Device: EZR32LG330F256R60&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6200A_EZR32LG/clock/SimplicityStudio/SLWSTK6200A_clock.slsproj,../app/mcu_example/SLWSTK6200A_EZR32LG/clock/arm/clock.uvprojx,../app/mcu_example/SLWSTK6200A_EZR32LG/clock/iar/clock.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_ezradio_direct_rx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xA;&#xA;It is advised to use this example together with the Direct Tx example&#xA;running on an other node, so the link functionality can be tested.&#xA;&#xA;The user can start direct reception by pressing the PB0 button. &#xA;Ceasing direct reception can be issued by pressing the PB0 button again.&#xA;&#xA;The sample app is able to consume radio configuration header files generated&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xA;the generated header file instead of the default one with other toolchains enable&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xA;&#xA;For more information please refer to the Quick Start Guide of the application.&#xA;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xA;Device: EZR32LG330F256R60&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_direct_rx/SimplicityStudio/SLWSTK6200A_ezradio_direct_rx.slsproj,../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_direct_rx/arm/ezradio_direct_rx.uvprojx,../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_direct_rx/iar/ezradio_direct_rx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_ezradio_direct_tx" description="&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xA;&#xA;It is advised to use this example together with the Direct Rx example&#xA;running on an other node, so the link functionality can be tested.&#xA;&#xA;The user can start direct transmission by pressing the PB0 button. &#xA;Ceasing direct transmission can be issued by pressing the PB0 button again.&#xA;&#xA;The sample app is able to consume radio configuration header files generated&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xA;the generated header file instead of the default one with other toolchains enable&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xA;&#xA;For more information please refer to the Quick Start Guide of the application.&#xA;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xA;Device: EZR32LG330F256R60&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_direct_tx/SimplicityStudio/SLWSTK6200A_ezradio_direct_tx.slsproj,../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_direct_tx/arm/ezradio_direct_tx.uvprojx,../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_direct_tx/iar/ezradio_direct_tx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_ezradio_pn9" description="&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xA;&#xA;The user can start PN9 (pseudorandom binary where N=9) transmission by pressing&#xA;the PB0 button. Ceasing the transmission can be issued by pressing the PB0 &#xA;button again. &#xA;See the EzRadio documentation for more information on PN9 transmission.&#xA;&#xA;The sample app is able to consume radio configuration header files generated&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xA;the generated header file instead of the default one with other toolchains enable&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xA;&#xA;For more information please refer to the Quick Start Guide of the application.&#xA;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xA;Device: EZR32LG330F256R60&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_pn9/SimplicityStudio/SLWSTK6200A_ezradio_pn9.slsproj,../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_pn9/arm/ezradio_pn9.uvprojx,../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_pn9/iar/ezradio_pn9.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_ezradio_simple_trx" description="&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xA;&#xA;It is advised to use two boards with same configuration and firmware, so&#xA;both packet transmission and reception functionality can be tested.&#xA;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xA;packet is received by the other device, the received data is shown on its&#xA;LCD. If the packet is received with CRC error this is printed as well.&#xA;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xA;The user can cease the transmission by pushing PB1 again.&#xA;The number of transmitted packets is configurable.&#xA;&#xA;The application implements Packet Trace functionality, that means that the&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xA;&#xA;The sample app is able to consume radio configuration header files generated&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xA;the generated header file instead of the default one with other toolchains enable&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xA;&#xA;For more information please refer to the Quick Start Guide of the application.&#xA;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xA;Device: EZR32LG330F256R60&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_simple_trx/SimplicityStudio/SLWSTK6200A_ezradio_simple_trx.slsproj,../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_simple_trx/arm/ezradio_simple_trx.uvprojx,../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_simple_trx/iar/ezradio_simple_trx.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_ezradio_trx_ack" description="&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt; device.&#xA;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xA;&#xA;It is advised to use two boards with same configuration and firmware, so&#xA;both packet transmission and reception functionality can be tested.&#xA;&#xA;The user can send one packet with the radio by pushing the PB0 button. The&#xA;data counter in the packet is incremented and shown on the LCD. If the&#xA;packet is received by the other device, the received data is shown on its&#xA;LCD. If the packet is received with CRC error this is printed as well. In case&#xA;the data is received properly the receiver automatically sends back an&#xA;acknowledge packet. The transmitted and received 'ACK' packet is shown on &#xA;the LCD as well.&#xA;&#xA;The user can send specified or unlimited number of packets by pushing PB1.&#xA;The user can cease the transmission by pushing PB1 again.&#xA;The number of transmitted packets is configurable.&#xA;&#xA;The application implements Packet Trace functionality, that means that the&#xA;user can observe transmitted and received packets with the Network Analyzer Tool&#xA;of Simplicity studio using the built-in default radio configuration header files.&#xA;&#xA;The sample app is able to consume radio configuration header files generated&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xA;the generated header file instead of the default one with other toolchains enable&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xA;&#xA;For more information please refer to the Quick Start Guide of the application.&#xA;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xA;Device: EZR32LG330F256R60&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_trx_ack/SimplicityStudio/SLWSTK6200A_ezradio_trx_ack.slsproj,../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_trx_ack/arm/ezradio_trx_ack.uvprojx,../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_trx_ack/iar/ezradio_trx_ack.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_ezradio_unmodulated_carrier" description="&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;the EZR32 device.&#xA;&#xA;This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the EZRadio or EZRadioPRO device in the EZR32 device.&#xA;&#xA;The user can start CW transmission by pressing the PB0 button. &#xA;Ceasing the transmission can be issued by pressing the PB0 button again.&#xA;&#xA;The sample app is able to consume radio configuration header files generated&#xA;with either Simplicity Studio or Wireless Development Suite. The generated&#xA;configuration is consumed automatically in Simplicity Studio. In order to use&#xA;the generated header file instead of the default one with other toolchains enable&#xA;RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.&#xA;&#xA;For more information please refer to the Quick Start Guide of the application.&#xA;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xA;Device: EZR32LG330F256R60&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_unmodulated_carrier/SimplicityStudio/SLWSTK6200A_ezradio_unmodulated_carrier.slsproj,../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_unmodulated_carrier/arm/ezradio_unmodulated_carrier.uvprojx,../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_unmodulated_carrier/iar/ezradio_unmodulated_carrier.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_humitemp" description="&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;SLWSTK6200A_EZR32LG board.&#xA;&#xA;This example project uses CMSIS including EMLIB and the&#xA;board support package support functions/drivers to demonstrate driving&#xA;the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the&#xA;SLWSTK6200A_EZR32LG board.&#xA;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG starter kit.&#xA;Device: EZR32LG330F256R60&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6200A_EZR32LG/humitemp/SimplicityStudio/SLWSTK6200A_humitemp.slsproj,../app/mcu_example/SLWSTK6200A_EZR32LG/humitemp/arm/humitemp.uvprojx,../app/mcu_example/SLWSTK6200A_EZR32LG/humitemp/iar/humitemp.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/humitemp.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_rangeTest" description="&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;The Range Test application can be used to evaluate Silicon Laboratories radio&#xA;chips including performace, sensitivity or blocking measurements.&#xA;&#xA;Range Test creates a radio link between two evaluation kits and sends &#xA;predefined amount of packets from the transmitter side to the receiver.&#xA;The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER&#xA;based on the packets received. It also displays the current RSSI level in dBm&#xA;units and draws a chart of the RSSI historical data.&#xA;For long tests the transmitter can be set up to transmit continuously. It is not&#xA;necessary to start both sides synchronously.&#xA;&#xA;*PLEASE NOTE* This example uses the radio extensively and could transmit at high&#xA;RF power levels that may result in higher peak current consumption. Due to the&#xA;peak current demand this example is not suited to run on a coin cell battery.&#xA;If standalone operation is required please consider the use of an external USB&#xA;connected battery or other power source.&#xA;&#xA;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Starter Kit&#xA;Device: EZR32LG330F256R60&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6200A_EZR32LG/rangeTest/SimplicityStudio/SLWSTK6200A_rangeTest.slsproj"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="configuration/rangetestconfig.c"/>
  </descriptors>
  <descriptors label="SLWSTK6200A_rs232" description="&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;&#xD;&#xA;&lt;pre&gt;&#xA;This example project uses CMSIS and EMLIB, to demonstrates the&#xA;use of LEUART, USART or VCOM  communication on the SLWSTK6200A_EZR32LG&#xA;development kit.&#xA;&#xA;Serial port selection is done by defining any one of compiletime macros:&#xA;#define RETARGET_LEUART0&#xA;#define RETARGET_USART1&#xA;#define RETARGET_USART2&#xA;#define RETARGET_VCOM       (default)&#xA;&#xA;If a USART is used set terminal configuration to 115200-8-N-1.&#xA;If the LEUART is used set terminal configuration to 9600-8-N-1.&#xA;For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.&#xA;&#xA;Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit&#xA;Device: EZR32LG330F256R60&#xA;&lt;/pre&gt;">
    <properties key="template.category" value="EZR32LG 868 MHz Wireless Starter Kit"/>
    <properties key="template.projectFilePaths" value="../app/mcu_example/SLWSTK6200A_EZR32LG/rs232/SimplicityStudio/SLWSTK6200A_rs232.slsproj,../app/mcu_example/SLWSTK6200A_EZR32LG/rs232/arm/rs232.uvprojx,../app/mcu_example/SLWSTK6200A_EZR32LG/rs232/iar/rs232.eww"/>
    <properties key="core.boardCompatibility" value="brd4502a"/>
    <properties key="core.partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <properties key="template.initiallyOpenedResource" value="src/main.c"/>
  </descriptors>
</model:MDescriptors>
